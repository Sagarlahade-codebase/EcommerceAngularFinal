{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { warn } from '../util/console.js';\nimport { removeNils } from '../util/object.js';\nimport { createOAuthMeta } from '../oidc/util/oauthMeta.js';\nimport './types/api.js';\nimport '../myaccount/types.js';\nfunction createTransactionMeta(_x) {\n  return _createTransactionMeta.apply(this, arguments);\n}\nfunction _createTransactionMeta() {\n  _createTransactionMeta = _asyncToGenerator(function* (authClient, options = {}) {\n    const tokenParams = yield authClient.token.prepareTokenParams(options);\n    const pkceMeta = createOAuthMeta(authClient, tokenParams);\n    let {\n      flow = 'default',\n      withCredentials = true,\n      activationToken = undefined,\n      recoveryToken = undefined,\n      maxAge = undefined\n    } = Object.assign(Object.assign({}, authClient.options), options);\n    const meta = Object.assign(Object.assign({}, pkceMeta), {\n      flow,\n      withCredentials,\n      activationToken,\n      recoveryToken,\n      maxAge\n    });\n    return meta;\n  });\n  return _createTransactionMeta.apply(this, arguments);\n}\nfunction hasSavedInteractionHandle(authClient, options) {\n  const savedMeta = getSavedTransactionMeta(authClient, options);\n  if (savedMeta === null || savedMeta === void 0 ? void 0 : savedMeta.interactionHandle) {\n    return true;\n  }\n  return false;\n}\nfunction getSavedTransactionMeta(authClient, options) {\n  options = removeNils(options);\n  options = Object.assign(Object.assign({}, authClient.options), options);\n  let savedMeta;\n  try {\n    savedMeta = authClient.transactionManager.load(options);\n  } catch (e) {}\n  if (!savedMeta) {\n    return;\n  }\n  if (isTransactionMetaValid(savedMeta, options)) {\n    return savedMeta;\n  }\n  warn('Saved transaction meta does not match the current configuration. ' + 'This may indicate that two apps are sharing a storage key.');\n}\nfunction getTransactionMeta(_x2, _x3) {\n  return _getTransactionMeta.apply(this, arguments);\n}\nfunction _getTransactionMeta() {\n  _getTransactionMeta = _asyncToGenerator(function* (authClient, options) {\n    options = removeNils(options);\n    options = Object.assign(Object.assign({}, authClient.options), options);\n    const validExistingMeta = getSavedTransactionMeta(authClient, options);\n    if (validExistingMeta) {\n      return validExistingMeta;\n    }\n    return createTransactionMeta(authClient, options);\n  });\n  return _getTransactionMeta.apply(this, arguments);\n}\nfunction saveTransactionMeta(authClient, meta) {\n  authClient.transactionManager.save(meta, {\n    muteWarning: true\n  });\n}\nfunction clearTransactionMeta(authClient) {\n  authClient.transactionManager.clear();\n}\nfunction isTransactionMetaValid(meta, options = {}) {\n  const keys = ['issuer', 'clientId', 'redirectUri', 'state', 'codeChallenge', 'codeChallengeMethod', 'activationToken', 'recoveryToken'];\n  if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n    return false;\n  }\n  const {\n    flow\n  } = options;\n  if (isTransactionMetaValidForFlow(meta, flow) === false) {\n    return false;\n  }\n  return true;\n}\nfunction isTransactionMetaValidForFlow(meta, flow) {\n  const shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n  if (shouldValidateFlow) {\n    if (flow !== meta.flow) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isTransactionMetaValidForOptions(meta, options, keys) {\n  const mismatch = keys.some(key => {\n    const value = options[key];\n    if (value && value !== meta[key]) {\n      return true;\n    }\n  });\n  return !mismatch;\n}\nexport { clearTransactionMeta, createTransactionMeta, getSavedTransactionMeta, getTransactionMeta, hasSavedInteractionHandle, isTransactionMetaValid, isTransactionMetaValidForFlow, isTransactionMetaValidForOptions, saveTransactionMeta };","map":{"version":3,"names":["warn","removeNils","createOAuthMeta","createTransactionMeta","_x","_createTransactionMeta","apply","arguments","_asyncToGenerator","authClient","options","tokenParams","token","prepareTokenParams","pkceMeta","flow","withCredentials","activationToken","undefined","recoveryToken","maxAge","Object","assign","meta","hasSavedInteractionHandle","savedMeta","getSavedTransactionMeta","interactionHandle","transactionManager","load","e","isTransactionMetaValid","getTransactionMeta","_x2","_x3","_getTransactionMeta","validExistingMeta","saveTransactionMeta","save","muteWarning","clearTransactionMeta","clear","keys","isTransactionMetaValidForOptions","isTransactionMetaValidForFlow","shouldValidateFlow","mismatch","some","key","value"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/transactionMeta.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { warn } from '../util/console.js';\nimport { removeNils } from '../util/object.js';\nimport { createOAuthMeta } from '../oidc/util/oauthMeta.js';\nimport './types/api.js';\nimport '../myaccount/types.js';\n\nasync function createTransactionMeta(authClient, options = {}) {\n    const tokenParams = await authClient.token.prepareTokenParams(options);\n    const pkceMeta = createOAuthMeta(authClient, tokenParams);\n    let { flow = 'default', withCredentials = true, activationToken = undefined, recoveryToken = undefined, maxAge = undefined, } = Object.assign(Object.assign({}, authClient.options), options);\n    const meta = Object.assign(Object.assign({}, pkceMeta), { flow,\n        withCredentials,\n        activationToken,\n        recoveryToken,\n        maxAge });\n    return meta;\n}\nfunction hasSavedInteractionHandle(authClient, options) {\n    const savedMeta = getSavedTransactionMeta(authClient, options);\n    if (savedMeta === null || savedMeta === void 0 ? void 0 : savedMeta.interactionHandle) {\n        return true;\n    }\n    return false;\n}\nfunction getSavedTransactionMeta(authClient, options) {\n    options = removeNils(options);\n    options = Object.assign(Object.assign({}, authClient.options), options);\n    let savedMeta;\n    try {\n        savedMeta = authClient.transactionManager.load(options);\n    }\n    catch (e) {\n    }\n    if (!savedMeta) {\n        return;\n    }\n    if (isTransactionMetaValid(savedMeta, options)) {\n        return savedMeta;\n    }\n    warn('Saved transaction meta does not match the current configuration. ' +\n        'This may indicate that two apps are sharing a storage key.');\n}\nasync function getTransactionMeta(authClient, options) {\n    options = removeNils(options);\n    options = Object.assign(Object.assign({}, authClient.options), options);\n    const validExistingMeta = getSavedTransactionMeta(authClient, options);\n    if (validExistingMeta) {\n        return validExistingMeta;\n    }\n    return createTransactionMeta(authClient, options);\n}\nfunction saveTransactionMeta(authClient, meta) {\n    authClient.transactionManager.save(meta, { muteWarning: true });\n}\nfunction clearTransactionMeta(authClient) {\n    authClient.transactionManager.clear();\n}\nfunction isTransactionMetaValid(meta, options = {}) {\n    const keys = [\n        'issuer',\n        'clientId',\n        'redirectUri',\n        'state',\n        'codeChallenge',\n        'codeChallengeMethod',\n        'activationToken',\n        'recoveryToken'\n    ];\n    if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n        return false;\n    }\n    const { flow } = options;\n    if (isTransactionMetaValidForFlow(meta, flow) === false) {\n        return false;\n    }\n    return true;\n}\nfunction isTransactionMetaValidForFlow(meta, flow) {\n    const shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n    if (shouldValidateFlow) {\n        if (flow !== meta.flow) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isTransactionMetaValidForOptions(meta, options, keys) {\n    const mismatch = keys.some(key => {\n        const value = options[key];\n        if (value && value !== meta[key]) {\n            return true;\n        }\n    });\n    return !mismatch;\n}\n\nexport { clearTransactionMeta, createTransactionMeta, getSavedTransactionMeta, getTransactionMeta, hasSavedInteractionHandle, isTransactionMetaValid, isTransactionMetaValidForFlow, isTransactionMetaValidForOptions, saveTransactionMeta };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}