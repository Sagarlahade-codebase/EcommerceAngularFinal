{"ast":null,"code":"/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* global Uint8Array, btoa, atob */\nconst fn = {};\n/**\n * Light weight hashing algorithm that hashes string into an integer between 0 and 4294967295\n * Not recommended for data set of size greater than 10000\n * https://www.npmjs.com/package/string-hash\n *\n * @param str the string to be hashed\n * @returns string hash of integer type\n */\n\nfn.getStringHash = function (str) {\n  let hash = 5381;\n  let i = str.length;\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n  return hash >>> 0;\n};\n/**\n * Converts any url safe characters in a base64 string to regular base64 characters\n * @param str base64 string that might contain url safe characters\n * @returns base64 formatted string\n */\n\nfn.base64UrlSafeToBase64 = function (str) {\n  return str.replace(new RegExp('_', 'g'), '/').replace(new RegExp('-', 'g'), '+');\n};\n/**\n * Converts an ArrayBuffer object that contains binary data to base64 encoded string\n * @param bin ArrayBuffer object\n * @returns base64 encoded string\n */\n\nfn.binToStr = function (bin) {\n  return btoa(new Uint8Array(bin).reduce((s, byte) => s + String.fromCharCode(byte), ''));\n};\n/**\n * Converts base64 string to binary data view\n * @param str in base64 or base64UrlSafe format\n * @returns converted Uint8Array view of binary data\n */\n\nfn.strToBin = function (str) {\n  return Uint8Array.from(atob(this.base64UrlSafeToBase64(str)), c => c.charCodeAt(0));\n};\nexport { fn as default };","map":{"version":3,"names":["fn","getStringHash","str","hash","i","length","charCodeAt","base64UrlSafeToBase64","replace","RegExp","binToStr","bin","btoa","Uint8Array","reduce","s","byte","String","fromCharCode","strToBin","from","atob","c","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/util/CryptoUtil.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* global Uint8Array, btoa, atob */\nconst fn = {};\n/**\n * Light weight hashing algorithm that hashes string into an integer between 0 and 4294967295\n * Not recommended for data set of size greater than 10000\n * https://www.npmjs.com/package/string-hash\n *\n * @param str the string to be hashed\n * @returns string hash of integer type\n */\n\nfn.getStringHash = function (str) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n\n  return hash >>> 0;\n};\n/**\n * Converts any url safe characters in a base64 string to regular base64 characters\n * @param str base64 string that might contain url safe characters\n * @returns base64 formatted string\n */\n\n\nfn.base64UrlSafeToBase64 = function (str) {\n  return str.replace(new RegExp('_', 'g'), '/').replace(new RegExp('-', 'g'), '+');\n};\n/**\n * Converts an ArrayBuffer object that contains binary data to base64 encoded string\n * @param bin ArrayBuffer object\n * @returns base64 encoded string\n */\n\n\nfn.binToStr = function (bin) {\n  return btoa(new Uint8Array(bin).reduce((s, byte) => s + String.fromCharCode(byte), ''));\n};\n/**\n * Converts base64 string to binary data view\n * @param str in base64 or base64UrlSafe format\n * @returns converted Uint8Array view of binary data\n */\n\n\nfn.strToBin = function (str) {\n  return Uint8Array.from(atob(this.base64UrlSafeToBase64(str)), c => c.charCodeAt(0));\n};\n\nexport { fn as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,EAAE,GAAG,CAAC,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,EAAE,CAACC,aAAa,GAAG,UAAUC,GAAG,EAAE;EAChC,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIC,CAAC,GAAGF,GAAG,CAACG,MAAM;EAElB,OAAOD,CAAC,EAAE;IACRD,IAAI,GAAGA,IAAI,GAAG,EAAE,GAAGD,GAAG,CAACI,UAAU,CAAC,EAAEF,CAAC,CAAC;EACxC;EAEA,OAAOD,IAAI,KAAK,CAAC;AACnB,CAAC;AACD;AACA;AACA;AACA;AACA;;AAGAH,EAAE,CAACO,qBAAqB,GAAG,UAAUL,GAAG,EAAE;EACxC,OAAOA,GAAG,CAACM,OAAO,CAAC,IAAIC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAACD,OAAO,CAAC,IAAIC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;AAClF,CAAC;AACD;AACA;AACA;AACA;AACA;;AAGAT,EAAE,CAACU,QAAQ,GAAG,UAAUC,GAAG,EAAE;EAC3B,OAAOC,IAAI,CAAC,IAAIC,UAAU,CAACF,GAAG,CAAC,CAACG,MAAM,CAAC,CAACC,CAAC,EAAEC,IAAI,KAAKD,CAAC,GAAGE,MAAM,CAACC,YAAY,CAACF,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;AACzF,CAAC;AACD;AACA;AACA;AACA;AACA;;AAGAhB,EAAE,CAACmB,QAAQ,GAAG,UAAUjB,GAAG,EAAE;EAC3B,OAAOW,UAAU,CAACO,IAAI,CAACC,IAAI,CAAC,IAAI,CAACd,qBAAqB,CAACL,GAAG,CAAC,CAAC,EAAEoB,CAAC,IAAIA,CAAC,CAAChB,UAAU,CAAC,CAAC,CAAC,CAAC;AACrF,CAAC;AAED,SAASN,EAAE,IAAIuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}