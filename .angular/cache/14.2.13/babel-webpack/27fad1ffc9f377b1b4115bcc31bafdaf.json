{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { base64UrlToBuffer, bufferToBase64Url } from './base64.js';\nconst getEnrolledCredentials = (authenticatorEnrollments = []) => {\n  const credentials = [];\n  authenticatorEnrollments.forEach(enrollement => {\n    if (enrollement.key === 'webauthn') {\n      credentials.push({\n        type: 'public-key',\n        id: base64UrlToBuffer(enrollement.credentialId)\n      });\n    }\n  });\n  return credentials;\n};\nconst buildCredentialCreationOptions = (activationData, authenticatorEnrollments) => {\n  return {\n    publicKey: {\n      rp: activationData.rp,\n      user: {\n        id: base64UrlToBuffer(activationData.user.id),\n        name: activationData.user.name,\n        displayName: activationData.user.displayName\n      },\n      challenge: base64UrlToBuffer(activationData.challenge),\n      pubKeyCredParams: activationData.pubKeyCredParams,\n      attestation: activationData.attestation,\n      authenticatorSelection: activationData.authenticatorSelection,\n      excludeCredentials: getEnrolledCredentials(authenticatorEnrollments)\n    }\n  };\n};\nconst buildCredentialRequestOptions = (challengeData, authenticatorEnrollments) => {\n  return {\n    publicKey: {\n      challenge: base64UrlToBuffer(challengeData.challenge),\n      userVerification: challengeData.userVerification,\n      allowCredentials: getEnrolledCredentials(authenticatorEnrollments)\n    }\n  };\n};\nconst getAttestation = credential => {\n  const response = credential.response;\n  const id = credential.id;\n  const clientData = bufferToBase64Url(response.clientDataJSON);\n  const attestation = bufferToBase64Url(response.attestationObject);\n  return {\n    id,\n    clientData,\n    attestation\n  };\n};\nconst getAssertion = credential => {\n  const response = credential.response;\n  const id = credential.id;\n  const clientData = bufferToBase64Url(response.clientDataJSON);\n  const authenticatorData = bufferToBase64Url(response.authenticatorData);\n  const signatureData = bufferToBase64Url(response.signature);\n  return {\n    id,\n    clientData,\n    authenticatorData,\n    signatureData\n  };\n};\nexport { buildCredentialCreationOptions, buildCredentialRequestOptions, getAssertion, getAttestation };","map":{"version":3,"names":["base64UrlToBuffer","bufferToBase64Url","getEnrolledCredentials","authenticatorEnrollments","credentials","forEach","enrollement","key","push","type","id","credentialId","buildCredentialCreationOptions","activationData","publicKey","rp","user","name","displayName","challenge","pubKeyCredParams","attestation","authenticatorSelection","excludeCredentials","buildCredentialRequestOptions","challengeData","userVerification","allowCredentials","getAttestation","credential","response","clientData","clientDataJSON","attestationObject","getAssertion","authenticatorData","signatureData","signature"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/crypto/webauthn.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { base64UrlToBuffer, bufferToBase64Url } from './base64.js';\n\nconst getEnrolledCredentials = (authenticatorEnrollments = []) => {\n    const credentials = [];\n    authenticatorEnrollments.forEach((enrollement) => {\n        if (enrollement.key === 'webauthn') {\n            credentials.push({\n                type: 'public-key',\n                id: base64UrlToBuffer(enrollement.credentialId),\n            });\n        }\n    });\n    return credentials;\n};\nconst buildCredentialCreationOptions = (activationData, authenticatorEnrollments) => {\n    return {\n        publicKey: {\n            rp: activationData.rp,\n            user: {\n                id: base64UrlToBuffer(activationData.user.id),\n                name: activationData.user.name,\n                displayName: activationData.user.displayName\n            },\n            challenge: base64UrlToBuffer(activationData.challenge),\n            pubKeyCredParams: activationData.pubKeyCredParams,\n            attestation: activationData.attestation,\n            authenticatorSelection: activationData.authenticatorSelection,\n            excludeCredentials: getEnrolledCredentials(authenticatorEnrollments),\n        }\n    };\n};\nconst buildCredentialRequestOptions = (challengeData, authenticatorEnrollments) => {\n    return {\n        publicKey: {\n            challenge: base64UrlToBuffer(challengeData.challenge),\n            userVerification: challengeData.userVerification,\n            allowCredentials: getEnrolledCredentials(authenticatorEnrollments),\n        }\n    };\n};\nconst getAttestation = (credential) => {\n    const response = credential.response;\n    const id = credential.id;\n    const clientData = bufferToBase64Url(response.clientDataJSON);\n    const attestation = bufferToBase64Url(response.attestationObject);\n    return {\n        id,\n        clientData,\n        attestation\n    };\n};\nconst getAssertion = (credential) => {\n    const response = credential.response;\n    const id = credential.id;\n    const clientData = bufferToBase64Url(response.clientDataJSON);\n    const authenticatorData = bufferToBase64Url(response.authenticatorData);\n    const signatureData = bufferToBase64Url(response.signature);\n    return {\n        id,\n        clientData,\n        authenticatorData,\n        signatureData\n    };\n};\n\nexport { buildCredentialCreationOptions, buildCredentialRequestOptions, getAssertion, getAttestation };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,iBAAiB,EAAEC,iBAAiB,QAAQ,aAAa;AAElE,MAAMC,sBAAsB,GAAGA,CAACC,wBAAwB,GAAG,EAAE,KAAK;EAC9D,MAAMC,WAAW,GAAG,EAAE;EACtBD,wBAAwB,CAACE,OAAO,CAAEC,WAAW,IAAK;IAC9C,IAAIA,WAAW,CAACC,GAAG,KAAK,UAAU,EAAE;MAChCH,WAAW,CAACI,IAAI,CAAC;QACbC,IAAI,EAAE,YAAY;QAClBC,EAAE,EAAEV,iBAAiB,CAACM,WAAW,CAACK,YAAY;MAClD,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EACF,OAAOP,WAAW;AACtB,CAAC;AACD,MAAMQ,8BAA8B,GAAGA,CAACC,cAAc,EAAEV,wBAAwB,KAAK;EACjF,OAAO;IACHW,SAAS,EAAE;MACPC,EAAE,EAAEF,cAAc,CAACE,EAAE;MACrBC,IAAI,EAAE;QACFN,EAAE,EAAEV,iBAAiB,CAACa,cAAc,CAACG,IAAI,CAACN,EAAE,CAAC;QAC7CO,IAAI,EAAEJ,cAAc,CAACG,IAAI,CAACC,IAAI;QAC9BC,WAAW,EAAEL,cAAc,CAACG,IAAI,CAACE;MACrC,CAAC;MACDC,SAAS,EAAEnB,iBAAiB,CAACa,cAAc,CAACM,SAAS,CAAC;MACtDC,gBAAgB,EAAEP,cAAc,CAACO,gBAAgB;MACjDC,WAAW,EAAER,cAAc,CAACQ,WAAW;MACvCC,sBAAsB,EAAET,cAAc,CAACS,sBAAsB;MAC7DC,kBAAkB,EAAErB,sBAAsB,CAACC,wBAAwB;IACvE;EACJ,CAAC;AACL,CAAC;AACD,MAAMqB,6BAA6B,GAAGA,CAACC,aAAa,EAAEtB,wBAAwB,KAAK;EAC/E,OAAO;IACHW,SAAS,EAAE;MACPK,SAAS,EAAEnB,iBAAiB,CAACyB,aAAa,CAACN,SAAS,CAAC;MACrDO,gBAAgB,EAAED,aAAa,CAACC,gBAAgB;MAChDC,gBAAgB,EAAEzB,sBAAsB,CAACC,wBAAwB;IACrE;EACJ,CAAC;AACL,CAAC;AACD,MAAMyB,cAAc,GAAIC,UAAU,IAAK;EACnC,MAAMC,QAAQ,GAAGD,UAAU,CAACC,QAAQ;EACpC,MAAMpB,EAAE,GAAGmB,UAAU,CAACnB,EAAE;EACxB,MAAMqB,UAAU,GAAG9B,iBAAiB,CAAC6B,QAAQ,CAACE,cAAc,CAAC;EAC7D,MAAMX,WAAW,GAAGpB,iBAAiB,CAAC6B,QAAQ,CAACG,iBAAiB,CAAC;EACjE,OAAO;IACHvB,EAAE;IACFqB,UAAU;IACVV;EACJ,CAAC;AACL,CAAC;AACD,MAAMa,YAAY,GAAIL,UAAU,IAAK;EACjC,MAAMC,QAAQ,GAAGD,UAAU,CAACC,QAAQ;EACpC,MAAMpB,EAAE,GAAGmB,UAAU,CAACnB,EAAE;EACxB,MAAMqB,UAAU,GAAG9B,iBAAiB,CAAC6B,QAAQ,CAACE,cAAc,CAAC;EAC7D,MAAMG,iBAAiB,GAAGlC,iBAAiB,CAAC6B,QAAQ,CAACK,iBAAiB,CAAC;EACvE,MAAMC,aAAa,GAAGnC,iBAAiB,CAAC6B,QAAQ,CAACO,SAAS,CAAC;EAC3D,OAAO;IACH3B,EAAE;IACFqB,UAAU;IACVI,iBAAiB;IACjBC;EACJ,CAAC;AACL,CAAC;AAED,SAASxB,8BAA8B,EAAEY,6BAA6B,EAAEU,YAAY,EAAEN,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}