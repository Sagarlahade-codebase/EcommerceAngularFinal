{"ast":null,"code":"import Backbone from '../vendor/lib/backbone.js';\nimport oktaUnderscore from '../util/underscore-wrapper.js';\nimport FrameworkView from '../framework/View.js';\nimport TemplateUtil from '../util/TemplateUtil.js';\nconst eventBus = oktaUnderscore.clone(Backbone.Events); // add `broadcast` and `listen` functionality to all views\n// We use one event emitter per all views\n// This means we need to be very careful with event names\n\nconst proto = {\n  constructor: function (options, ...rest) {\n    FrameworkView.call(this, options, ...rest);\n    this.module && this.$el.attr('data-view', this.module.id);\n  },\n  /**\n   * @deprecated Use {@link #removeChildren}\n   */\n  empty: function () {\n    return this.removeChildren();\n  },\n  compileTemplate: TemplateUtil.tpl,\n  /**\n   *\n   * Broadcasts a global event that all views and controllers can subscribe to\n   * for framework use only - prefer using a shared model\n   *\n   * @param {String} eventName A unique identifier for the event\n   * @param {...String} param Parameter to pass with the event (can pass more than one parameter)\n   * @deprecated For internal use only\n   * @private\n   */\n  broadcast: function () {\n    eventBus.trigger.apply(eventBus, arguments);\n    return this;\n  },\n  /**\n   * Subscribe to broadcast events\n   * for framework use only - prefer using a shared model\n   *\n   * @param {String} eventName The event identifier to subscribe\n   * @param {Function} fn The callback function to invoke\n   * @deprecated For internal use only\n   * @private\n   */\n  listen: function (name, fn) {\n    eventBus.off(name, fn);\n    this.listenTo(eventBus, name, fn);\n    return this;\n  },\n  /**\n   * Shows a notification box\n   * @param {String} level success / warning / error\n   * @param {String} message The message to display\n   * @param {Object} [options]\n   * @param {Number} [options.width] Set a custom width\n   * @param {String} [options.title] Set a custom title\n   * @param {Boolean} [options.hide=true] Do we want to auto-hide this notification?\n   * @param {Boolean} [options.dismissable] Show a dismiss button\n   * @example\n   * view.notify('success', 'Group created successfully');\n   */\n  notify: function (level, message, options) {\n    this.broadcast('notification', oktaUnderscore.defaults({\n      message: message,\n      level: level\n    }, options));\n    return this;\n  },\n  /**\n   * Shows a confirmation dialog\n   *\n   * Uses https://www.ericmmartin.com/projects/simplemodal/.\n   * If you want to configure the simplemodal options use ConfirmationDialog instead.\n   *\n   * The main difference between this and the native javascript `confirm` method\n   * Is this method is non blocking (note the callback pattern).\n   *\n   * The callback function will run in the context (`this`) of the invoking view.\n   *\n   * @param {String} [title] The title of the confirmation dialog\n   * @param {String} [message] The message of the confirmation dialog\n   * @param {Function} [okfn] The callback to run when the user hits \"OK\" (runs in the context of the invoking view)\n   * @param {Function} [cancelfn] The callback to run when the user hits \"Cancel\"\n   *        (runs in the context of the invoking view)\n   * @example\n   * view.confirm('Delete Group', 'Are you sure you want to delete the selected group?', function () {\n   *   model.destroy();\n   * });\n   *\n   * // title will be auto-set to \"Okta\"\n   * view.confirm('Are you sure you want to delete the selected group?', function () {\n   *   model.destroy();\n   * });\n   *\n   * view.confirm({\n   *   title: 'Delete Group', //=> Modal title\n   *   subtitle: 'Are you sure you want to delete the selected group?', //=> Modal subtitle\n   *   content: '<h3 color=\"red\">THIS WILL DELETE THE GROUP!</h3>', //=> A template or a view to add to the modal\n   *   save: 'Delete Group', //=> Button label\n   *   ok: _.bind(model.save, model) // Callback function on hitting \"ok\" button\n   *   cancel: 'Cancel', //=> Button label\n   *   cancelFn: _.bind(model.destroy, model) // Callback function on hitting \"cancel\" button\n   * });\n   */\n  confirm: function (title, message, okfn, cancelfn) {\n    let options;\n    /* eslint max-statements: [2, 12] */\n\n    if (typeof title === 'object') {\n      options = title;\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (arguments.length === 2 && oktaUnderscore.isFunction(message)) {\n        options = {\n          title: 'Okta',\n          // eslint-disable-line @okta/okta/no-unlocalized-text\n          subtitle: title,\n          ok: message\n        };\n      } else {\n        options = {\n          title: title,\n          subtitle: message,\n          ok: okfn,\n          cancelFn: cancelfn\n        };\n      }\n    }\n    if (oktaUnderscore.isFunction(options.ok)) {\n      options.ok = oktaUnderscore.bind(options.ok, this);\n    }\n    if (oktaUnderscore.isFunction(options.cancelFn)) {\n      options.cancelFn = oktaUnderscore.bind(options.cancelFn, this);\n    }\n    this.broadcast('confirmation', options);\n    return this;\n  },\n  /**\n   * Shows an alert box\n   *\n   * The main difference between this and the native javascript `alert` method\n   * Is this method is non blocking.\n   *\n   * @param {String} message The message\n   * @example\n   * view.alert('Mission complete');\n   */\n  alert: function (params) {\n    if (oktaUnderscore.isString(params)) {\n      params = {\n        subtitle: params\n      };\n    }\n    this.confirm(oktaUnderscore.extend({}, params, {\n      noCancelButton: true\n    }));\n    return this;\n  }\n};\n/**\n * See {@link src/framework/View} for more detail and examples from the base class.\n * @class module:Okta.View\n * @extends src/framework/View\n */\n\n/** @lends module:Okta.View.prototype */\n\nvar BaseView = FrameworkView.extend(proto, /** @lends View.prototype */\n{\n  /** @method */\n  decorate: function (TargetView) {\n    const BaseViewView = TargetView.extend({});\n    oktaUnderscore.defaults(BaseViewView.prototype, proto);\n    return BaseViewView;\n  }\n});\nexport { BaseView as default };","map":{"version":3,"names":["Backbone","oktaUnderscore","FrameworkView","TemplateUtil","eventBus","clone","Events","proto","constructor","options","rest","call","module","$el","attr","id","empty","removeChildren","compileTemplate","tpl","broadcast","trigger","apply","arguments","listen","name","fn","off","listenTo","notify","level","message","defaults","confirm","title","okfn","cancelfn","length","isFunction","subtitle","ok","cancelFn","bind","alert","params","isString","extend","noCancelButton","BaseView","decorate","TargetView","BaseViewView","prototype","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/@okta/courage-dist/esm/src/courage/views/BaseView.js"],"sourcesContent":["import Backbone from '../vendor/lib/backbone.js';\nimport oktaUnderscore from '../util/underscore-wrapper.js';\nimport FrameworkView from '../framework/View.js';\nimport TemplateUtil from '../util/TemplateUtil.js';\n\nconst eventBus = oktaUnderscore.clone(Backbone.Events); // add `broadcast` and `listen` functionality to all views\n// We use one event emitter per all views\n// This means we need to be very careful with event names\n\nconst proto = {\n  constructor: function (options, ...rest) {\n    FrameworkView.call(this, options, ...rest);\n    this.module && this.$el.attr('data-view', this.module.id);\n  },\n\n  /**\n   * @deprecated Use {@link #removeChildren}\n   */\n  empty: function () {\n    return this.removeChildren();\n  },\n  compileTemplate: TemplateUtil.tpl,\n\n  /**\n   *\n   * Broadcasts a global event that all views and controllers can subscribe to\n   * for framework use only - prefer using a shared model\n   *\n   * @param {String} eventName A unique identifier for the event\n   * @param {...String} param Parameter to pass with the event (can pass more than one parameter)\n   * @deprecated For internal use only\n   * @private\n   */\n  broadcast: function () {\n    eventBus.trigger.apply(eventBus, arguments);\n    return this;\n  },\n\n  /**\n   * Subscribe to broadcast events\n   * for framework use only - prefer using a shared model\n   *\n   * @param {String} eventName The event identifier to subscribe\n   * @param {Function} fn The callback function to invoke\n   * @deprecated For internal use only\n   * @private\n   */\n  listen: function (name, fn) {\n    eventBus.off(name, fn);\n    this.listenTo(eventBus, name, fn);\n    return this;\n  },\n\n  /**\n   * Shows a notification box\n   * @param {String} level success / warning / error\n   * @param {String} message The message to display\n   * @param {Object} [options]\n   * @param {Number} [options.width] Set a custom width\n   * @param {String} [options.title] Set a custom title\n   * @param {Boolean} [options.hide=true] Do we want to auto-hide this notification?\n   * @param {Boolean} [options.dismissable] Show a dismiss button\n   * @example\n   * view.notify('success', 'Group created successfully');\n   */\n  notify: function (level, message, options) {\n    this.broadcast('notification', oktaUnderscore.defaults({\n      message: message,\n      level: level\n    }, options));\n    return this;\n  },\n\n  /**\n   * Shows a confirmation dialog\n   *\n   * Uses https://www.ericmmartin.com/projects/simplemodal/.\n   * If you want to configure the simplemodal options use ConfirmationDialog instead.\n   *\n   * The main difference between this and the native javascript `confirm` method\n   * Is this method is non blocking (note the callback pattern).\n   *\n   * The callback function will run in the context (`this`) of the invoking view.\n   *\n   * @param {String} [title] The title of the confirmation dialog\n   * @param {String} [message] The message of the confirmation dialog\n   * @param {Function} [okfn] The callback to run when the user hits \"OK\" (runs in the context of the invoking view)\n   * @param {Function} [cancelfn] The callback to run when the user hits \"Cancel\"\n   *        (runs in the context of the invoking view)\n   * @example\n   * view.confirm('Delete Group', 'Are you sure you want to delete the selected group?', function () {\n   *   model.destroy();\n   * });\n   *\n   * // title will be auto-set to \"Okta\"\n   * view.confirm('Are you sure you want to delete the selected group?', function () {\n   *   model.destroy();\n   * });\n   *\n   * view.confirm({\n   *   title: 'Delete Group', //=> Modal title\n   *   subtitle: 'Are you sure you want to delete the selected group?', //=> Modal subtitle\n   *   content: '<h3 color=\"red\">THIS WILL DELETE THE GROUP!</h3>', //=> A template or a view to add to the modal\n   *   save: 'Delete Group', //=> Button label\n   *   ok: _.bind(model.save, model) // Callback function on hitting \"ok\" button\n   *   cancel: 'Cancel', //=> Button label\n   *   cancelFn: _.bind(model.destroy, model) // Callback function on hitting \"cancel\" button\n   * });\n   */\n  confirm: function (title, message, okfn, cancelfn) {\n    let options;\n    /* eslint max-statements: [2, 12] */\n\n    if (typeof title === 'object') {\n      options = title;\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (arguments.length === 2 && oktaUnderscore.isFunction(message)) {\n        options = {\n          title: 'Okta',\n          // eslint-disable-line @okta/okta/no-unlocalized-text\n          subtitle: title,\n          ok: message\n        };\n      } else {\n        options = {\n          title: title,\n          subtitle: message,\n          ok: okfn,\n          cancelFn: cancelfn\n        };\n      }\n    }\n\n    if (oktaUnderscore.isFunction(options.ok)) {\n      options.ok = oktaUnderscore.bind(options.ok, this);\n    }\n\n    if (oktaUnderscore.isFunction(options.cancelFn)) {\n      options.cancelFn = oktaUnderscore.bind(options.cancelFn, this);\n    }\n\n    this.broadcast('confirmation', options);\n    return this;\n  },\n\n  /**\n   * Shows an alert box\n   *\n   * The main difference between this and the native javascript `alert` method\n   * Is this method is non blocking.\n   *\n   * @param {String} message The message\n   * @example\n   * view.alert('Mission complete');\n   */\n  alert: function (params) {\n    if (oktaUnderscore.isString(params)) {\n      params = {\n        subtitle: params\n      };\n    }\n\n    this.confirm(oktaUnderscore.extend({}, params, {\n      noCancelButton: true\n    }));\n    return this;\n  }\n};\n/**\n * See {@link src/framework/View} for more detail and examples from the base class.\n * @class module:Okta.View\n * @extends src/framework/View\n */\n\n/** @lends module:Okta.View.prototype */\n\nvar BaseView = FrameworkView.extend(proto,\n/** @lends View.prototype */\n{\n  /** @method */\n  decorate: function (TargetView) {\n    const BaseViewView = TargetView.extend({});\n    oktaUnderscore.defaults(BaseViewView.prototype, proto);\n    return BaseViewView;\n  }\n});\n\nexport { BaseView as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}