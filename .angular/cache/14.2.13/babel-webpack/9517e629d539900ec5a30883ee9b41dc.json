{"ast":null,"code":"import oktaUnderscore from '../../../util/underscore-wrapper.js';\nconst registry = {};\nfunction isBaseInput(input) {\n  if (oktaUnderscore.isFunction(input)) {\n    return oktaUnderscore.isFunction(input.prototype.editMode) && oktaUnderscore.isFunction(input.prototype.readMode);\n  } else {\n    return oktaUnderscore.isObject(input) && oktaUnderscore.isFunction(input.editMode) && oktaUnderscore.isFunction(input.readMode);\n  }\n}\n/**\n * @class module:Okta.internal.views.forms.helpers.InputRegistry\n */\n\nvar InputRegistry = /** @lends module:Okta.internal.views.forms.helpers.InputRegistry */\n{\n  isBaseInput: isBaseInput,\n  /**\n   * Register a form input\n   * @param {String} type string identifier for the input\n   * @param {BaseInput} input the input to register\n   * @return {void}\n   */\n  register: function (type, input) {\n    registry[type] = input;\n  },\n  /**\n   * Get a form input by type\n   * @param {Object} options input definition\n   * @param {String} options.type string identifier for the input\n   * @return {BaseInput} a matching input\n   */\n  get: function (options) {\n    const input = registry[options.type];\n    return input && (isBaseInput(input) ? input : input(options));\n  },\n  /**\n   * Unregister an input type\n   * @param {String} type\n   */\n  unregister: function (type) {\n    delete registry[type];\n  }\n};\nexport { InputRegistry as default };","map":{"version":3,"names":["oktaUnderscore","registry","isBaseInput","input","isFunction","prototype","editMode","readMode","isObject","InputRegistry","register","type","get","options","unregister","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/@okta/courage-dist/esm/src/courage/views/forms/helpers/InputRegistry.js"],"sourcesContent":["import oktaUnderscore from '../../../util/underscore-wrapper.js';\n\nconst registry = {};\n\nfunction isBaseInput(input) {\n  if (oktaUnderscore.isFunction(input)) {\n    return oktaUnderscore.isFunction(input.prototype.editMode) && oktaUnderscore.isFunction(input.prototype.readMode);\n  } else {\n    return oktaUnderscore.isObject(input) && oktaUnderscore.isFunction(input.editMode) && oktaUnderscore.isFunction(input.readMode);\n  }\n}\n/**\n * @class module:Okta.internal.views.forms.helpers.InputRegistry\n */\n\n\nvar InputRegistry =\n/** @lends module:Okta.internal.views.forms.helpers.InputRegistry */\n{\n  isBaseInput: isBaseInput,\n\n  /**\n   * Register a form input\n   * @param {String} type string identifier for the input\n   * @param {BaseInput} input the input to register\n   * @return {void}\n   */\n  register: function (type, input) {\n    registry[type] = input;\n  },\n\n  /**\n   * Get a form input by type\n   * @param {Object} options input definition\n   * @param {String} options.type string identifier for the input\n   * @return {BaseInput} a matching input\n   */\n  get: function (options) {\n    const input = registry[options.type];\n    return input && (isBaseInput(input) ? input : input(options));\n  },\n\n  /**\n   * Unregister an input type\n   * @param {String} type\n   */\n  unregister: function (type) {\n    delete registry[type];\n  }\n};\n\nexport { InputRegistry as default };\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,qCAAqC;AAEhE,MAAMC,QAAQ,GAAG,CAAC,CAAC;AAEnB,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1B,IAAIH,cAAc,CAACI,UAAU,CAACD,KAAK,CAAC,EAAE;IACpC,OAAOH,cAAc,CAACI,UAAU,CAACD,KAAK,CAACE,SAAS,CAACC,QAAQ,CAAC,IAAIN,cAAc,CAACI,UAAU,CAACD,KAAK,CAACE,SAAS,CAACE,QAAQ,CAAC;EACnH,CAAC,MAAM;IACL,OAAOP,cAAc,CAACQ,QAAQ,CAACL,KAAK,CAAC,IAAIH,cAAc,CAACI,UAAU,CAACD,KAAK,CAACG,QAAQ,CAAC,IAAIN,cAAc,CAACI,UAAU,CAACD,KAAK,CAACI,QAAQ,CAAC;EACjI;AACF;AACA;AACA;AACA;;AAGA,IAAIE,aAAa,GACjB;AACA;EACEP,WAAW,EAAEA,WAAW;EAExB;AACF;AACA;AACA;AACA;AACA;EACEQ,QAAQ,EAAE,SAAAA,CAAUC,IAAI,EAAER,KAAK,EAAE;IAC/BF,QAAQ,CAACU,IAAI,CAAC,GAAGR,KAAK;EACxB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACES,GAAG,EAAE,SAAAA,CAAUC,OAAO,EAAE;IACtB,MAAMV,KAAK,GAAGF,QAAQ,CAACY,OAAO,CAACF,IAAI,CAAC;IACpC,OAAOR,KAAK,KAAKD,WAAW,CAACC,KAAK,CAAC,GAAGA,KAAK,GAAGA,KAAK,CAACU,OAAO,CAAC,CAAC;EAC/D,CAAC;EAED;AACF;AACA;AACA;EACEC,UAAU,EAAE,SAAAA,CAAUH,IAAI,EAAE;IAC1B,OAAOV,QAAQ,CAACU,IAAI,CAAC;EACvB;AACF,CAAC;AAED,SAASF,aAAa,IAAIM,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}