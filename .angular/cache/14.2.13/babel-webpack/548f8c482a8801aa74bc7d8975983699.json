{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport CustomError from '../errors/CustomError.js';\nimport { urlParamsToObject } from '../oidc/util/urlParams.js';\nclass EmailVerifyCallbackError extends CustomError {\n  constructor(state, otp) {\n    super(`Enter the OTP code in the originating client: ${otp}`);\n    this.name = 'EmailVerifyCallbackError';\n    this.state = state;\n    this.otp = otp;\n  }\n}\nfunction isEmailVerifyCallbackError(error) {\n  return error.name === 'EmailVerifyCallbackError';\n}\nfunction isEmailVerifyCallback(urlPath) {\n  return /(otp=)/i.test(urlPath) && /(state=)/i.test(urlPath);\n}\nfunction parseEmailVerifyCallback(urlPath) {\n  return urlParamsToObject(urlPath);\n}\nfunction handleEmailVerifyCallback(_x, _x2) {\n  return _handleEmailVerifyCallback.apply(this, arguments);\n}\nfunction _handleEmailVerifyCallback() {\n  _handleEmailVerifyCallback = _asyncToGenerator(function* (authClient, search) {\n    if (isEmailVerifyCallback(search)) {\n      const {\n        state,\n        otp\n      } = parseEmailVerifyCallback(search);\n      if (authClient.idx.canProceed({\n        state\n      })) {\n        return yield authClient.idx.proceed({\n          state,\n          otp\n        });\n      } else {\n        throw new EmailVerifyCallbackError(state, otp);\n      }\n    }\n  });\n  return _handleEmailVerifyCallback.apply(this, arguments);\n}\nexport { EmailVerifyCallbackError, handleEmailVerifyCallback, isEmailVerifyCallback, isEmailVerifyCallbackError, parseEmailVerifyCallback };","map":{"version":3,"names":["CustomError","urlParamsToObject","EmailVerifyCallbackError","constructor","state","otp","name","isEmailVerifyCallbackError","error","isEmailVerifyCallback","urlPath","test","parseEmailVerifyCallback","handleEmailVerifyCallback","_x","_x2","_handleEmailVerifyCallback","apply","arguments","_asyncToGenerator","authClient","search","idx","canProceed","proceed"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/emailVerify.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport CustomError from '../errors/CustomError.js';\nimport { urlParamsToObject } from '../oidc/util/urlParams.js';\n\nclass EmailVerifyCallbackError extends CustomError {\n    constructor(state, otp) {\n        super(`Enter the OTP code in the originating client: ${otp}`);\n        this.name = 'EmailVerifyCallbackError';\n        this.state = state;\n        this.otp = otp;\n    }\n}\nfunction isEmailVerifyCallbackError(error) {\n    return (error.name === 'EmailVerifyCallbackError');\n}\nfunction isEmailVerifyCallback(urlPath) {\n    return /(otp=)/i.test(urlPath) && /(state=)/i.test(urlPath);\n}\nfunction parseEmailVerifyCallback(urlPath) {\n    return urlParamsToObject(urlPath);\n}\nasync function handleEmailVerifyCallback(authClient, search) {\n    if (isEmailVerifyCallback(search)) {\n        const { state, otp } = parseEmailVerifyCallback(search);\n        if (authClient.idx.canProceed({ state })) {\n            return await authClient.idx.proceed({ state, otp });\n        }\n        else {\n            throw new EmailVerifyCallbackError(state, otp);\n        }\n    }\n}\n\nexport { EmailVerifyCallbackError, handleEmailVerifyCallback, isEmailVerifyCallback, isEmailVerifyCallbackError, parseEmailVerifyCallback };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,WAAW,MAAM,0BAA0B;AAClD,SAASC,iBAAiB,QAAQ,2BAA2B;AAE7D,MAAMC,wBAAwB,SAASF,WAAW,CAAC;EAC/CG,WAAWA,CAACC,KAAK,EAAEC,GAAG,EAAE;IACpB,KAAK,CAAC,iDAAiDA,GAAG,EAAE,CAAC;IAC7D,IAAI,CAACC,IAAI,GAAG,0BAA0B;IACtC,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,GAAG,GAAGA,GAAG;EAClB;AACJ;AACA,SAASE,0BAA0BA,CAACC,KAAK,EAAE;EACvC,OAAQA,KAAK,CAACF,IAAI,KAAK,0BAA0B;AACrD;AACA,SAASG,qBAAqBA,CAACC,OAAO,EAAE;EACpC,OAAO,SAAS,CAACC,IAAI,CAACD,OAAO,CAAC,IAAI,WAAW,CAACC,IAAI,CAACD,OAAO,CAAC;AAC/D;AACA,SAASE,wBAAwBA,CAACF,OAAO,EAAE;EACvC,OAAOT,iBAAiB,CAACS,OAAO,CAAC;AACrC;AAAC,SACcG,yBAAyBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,2BAAA;EAAAA,0BAAA,GAAAG,iBAAA,CAAxC,WAAyCC,UAAU,EAAEC,MAAM,EAAE;IACzD,IAAIZ,qBAAqB,CAACY,MAAM,CAAC,EAAE;MAC/B,MAAM;QAAEjB,KAAK;QAAEC;MAAI,CAAC,GAAGO,wBAAwB,CAACS,MAAM,CAAC;MACvD,IAAID,UAAU,CAACE,GAAG,CAACC,UAAU,CAAC;QAAEnB;MAAM,CAAC,CAAC,EAAE;QACtC,aAAagB,UAAU,CAACE,GAAG,CAACE,OAAO,CAAC;UAAEpB,KAAK;UAAEC;QAAI,CAAC,CAAC;MACvD,CAAC,MACI;QACD,MAAM,IAAIH,wBAAwB,CAACE,KAAK,EAAEC,GAAG,CAAC;MAClD;IACJ;EACJ,CAAC;EAAA,OAAAW,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAAShB,wBAAwB,EAAEW,yBAAyB,EAAEJ,qBAAqB,EAAEF,0BAA0B,EAAEK,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module"}