{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nfunction validateClaims(sdk, claims, validationParams) {\n  var aud = validationParams.clientId;\n  var iss = validationParams.issuer;\n  var nonce = validationParams.nonce;\n  if (!claims || !iss || !aud) {\n    throw new AuthSdkError('The jwt, iss, and aud arguments are all required');\n  }\n  if (nonce && claims.nonce !== nonce) {\n    throw new AuthSdkError('OAuth flow response nonce doesn\\'t match request nonce');\n  }\n  var now = Math.floor(Date.now() / 1000);\n  if (claims.iss !== iss) {\n    throw new AuthSdkError('The issuer [' + claims.iss + '] ' + 'does not match [' + iss + ']');\n  }\n  if (claims.aud !== aud) {\n    throw new AuthSdkError('The audience [' + claims.aud + '] ' + 'does not match [' + aud + ']');\n  }\n  if (claims.iat > claims.exp) {\n    throw new AuthSdkError('The JWT expired before it was issued');\n  }\n  if (!sdk.options.ignoreLifetime) {\n    if (now - sdk.options.maxClockSkew > claims.exp) {\n      throw new AuthSdkError('The JWT expired and is no longer valid');\n    }\n    if (claims.iat > now + sdk.options.maxClockSkew) {\n      throw new AuthSdkError('The JWT was issued in the future');\n    }\n  }\n}\nexport { validateClaims };","map":{"version":3,"names":["AuthSdkError","validateClaims","sdk","claims","validationParams","aud","clientId","iss","issuer","nonce","now","Math","floor","Date","iat","exp","options","ignoreLifetime","maxClockSkew"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/util/validateClaims.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../../errors/AuthSdkError.js';\n\nfunction validateClaims(sdk, claims, validationParams) {\n    var aud = validationParams.clientId;\n    var iss = validationParams.issuer;\n    var nonce = validationParams.nonce;\n    if (!claims || !iss || !aud) {\n        throw new AuthSdkError('The jwt, iss, and aud arguments are all required');\n    }\n    if (nonce && claims.nonce !== nonce) {\n        throw new AuthSdkError('OAuth flow response nonce doesn\\'t match request nonce');\n    }\n    var now = Math.floor(Date.now() / 1000);\n    if (claims.iss !== iss) {\n        throw new AuthSdkError('The issuer [' + claims.iss + '] ' +\n            'does not match [' + iss + ']');\n    }\n    if (claims.aud !== aud) {\n        throw new AuthSdkError('The audience [' + claims.aud + '] ' +\n            'does not match [' + aud + ']');\n    }\n    if (claims.iat > claims.exp) {\n        throw new AuthSdkError('The JWT expired before it was issued');\n    }\n    if (!sdk.options.ignoreLifetime) {\n        if ((now - sdk.options.maxClockSkew) > claims.exp) {\n            throw new AuthSdkError('The JWT expired and is no longer valid');\n        }\n        if (claims.iat > (now + sdk.options.maxClockSkew)) {\n            throw new AuthSdkError('The JWT was issued in the future');\n        }\n    }\n}\n\nexport { validateClaims };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,YAAY,MAAM,8BAA8B;AAEvD,SAASC,cAAcA,CAACC,GAAG,EAAEC,MAAM,EAAEC,gBAAgB,EAAE;EACnD,IAAIC,GAAG,GAAGD,gBAAgB,CAACE,QAAQ;EACnC,IAAIC,GAAG,GAAGH,gBAAgB,CAACI,MAAM;EACjC,IAAIC,KAAK,GAAGL,gBAAgB,CAACK,KAAK;EAClC,IAAI,CAACN,MAAM,IAAI,CAACI,GAAG,IAAI,CAACF,GAAG,EAAE;IACzB,MAAM,IAAIL,YAAY,CAAC,kDAAkD,CAAC;EAC9E;EACA,IAAIS,KAAK,IAAIN,MAAM,CAACM,KAAK,KAAKA,KAAK,EAAE;IACjC,MAAM,IAAIT,YAAY,CAAC,wDAAwD,CAAC;EACpF;EACA,IAAIU,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;EACvC,IAAIP,MAAM,CAACI,GAAG,KAAKA,GAAG,EAAE;IACpB,MAAM,IAAIP,YAAY,CAAC,cAAc,GAAGG,MAAM,CAACI,GAAG,GAAG,IAAI,GACrD,kBAAkB,GAAGA,GAAG,GAAG,GAAG,CAAC;EACvC;EACA,IAAIJ,MAAM,CAACE,GAAG,KAAKA,GAAG,EAAE;IACpB,MAAM,IAAIL,YAAY,CAAC,gBAAgB,GAAGG,MAAM,CAACE,GAAG,GAAG,IAAI,GACvD,kBAAkB,GAAGA,GAAG,GAAG,GAAG,CAAC;EACvC;EACA,IAAIF,MAAM,CAACW,GAAG,GAAGX,MAAM,CAACY,GAAG,EAAE;IACzB,MAAM,IAAIf,YAAY,CAAC,sCAAsC,CAAC;EAClE;EACA,IAAI,CAACE,GAAG,CAACc,OAAO,CAACC,cAAc,EAAE;IAC7B,IAAKP,GAAG,GAAGR,GAAG,CAACc,OAAO,CAACE,YAAY,GAAIf,MAAM,CAACY,GAAG,EAAE;MAC/C,MAAM,IAAIf,YAAY,CAAC,wCAAwC,CAAC;IACpE;IACA,IAAIG,MAAM,CAACW,GAAG,GAAIJ,GAAG,GAAGR,GAAG,CAACc,OAAO,CAACE,YAAa,EAAE;MAC/C,MAAM,IAAIlB,YAAY,CAAC,kCAAkC,CAAC;IAC9D;EACJ;AACJ;AAEA,SAASC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}