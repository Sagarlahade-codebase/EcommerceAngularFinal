{"ast":null,"code":"import oktaUnderscore from '../../../util/underscore-wrapper.js';\nimport StringUtil from '../../../util/StringUtil.js';\nimport BooleanSelect from '../inputs/BooleanSelect.js';\nimport TextBoxSet from '../inputs/TextBoxSet.js';\nimport EnumTypeHelper from './EnumTypeHelper.js';\n\n/* eslint max-statements: 0, max-params: 0 */\n\nfunction convertStringToNumber(string) {\n  const number = StringUtil.parseFloat(string);\n  return string === '' ? null : number;\n} // converts possibleValues to choices\n// [a, b, c] => {a: a, b: b, c: c}\n\nfunction getChoices(values) {\n  return oktaUnderscore.object(values, values);\n}\nfunction isArray(type) {\n  return type && type.indexOf('array') >= 0;\n} // A schema property may have an objectName either\n// at the root level or nested in the items object\n\nfunction getObjectName(schemaProp) {\n  const items = schemaProp.get('items');\n  if (items) {\n    return items.objectName;\n  }\n  return schemaProp.get('objectName');\n}\n/**\n * Checks the validity of a schema property.\n *\n * @param {SchemaProperty} [schemaProp] A schema property backbone model\n * @param {Object} [values] An object of the form { key: [value1, value2]}\n * @return {Boolean} true/false\n * @private\n */\n\nfunction isValidSchemaProp(schemaProp, values) {\n  const objectName = getObjectName(schemaProp);\n  const results = values[objectName]; // a schema property that references an empty list of values\n  // Im looking at you, google apps.\n\n  if (objectName && oktaUnderscore(results).isEmpty()) {\n    return false;\n  }\n  return true;\n} // Maps each __displayType__ to a basic set of inputOptions.\n\nfunction defaultOptions(property) {\n  const type = property.get('__displayType__');\n  const values = property.get('__possibleValues__');\n  const name = property.get('name');\n  const title = property.get('title');\n  /* eslint complexity: [2, 24] */\n\n  const inputOptions = {\n    type: 'text',\n    name: name,\n    label: title || name\n  }; // @see customOptions for enum complex \"object\" type,\n  // a.k.a \"object\" or \"arrayofobject\" type has enum values defined.\n  // Other cases (e.g., nested object type) are not support yet.\n\n  switch (type) {\n    case 'arrayofstring':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'string'\n      };\n      break;\n    case 'arrayofnumber':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'number'\n      };\n      break;\n    case 'arrayofinteger':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'integer'\n      };\n      break;\n    case 'arrayofobject':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: property.get('items').type\n      };\n      break;\n    case 'arrayofref-id':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: property.get('items').format\n      };\n      break;\n    case 'boolean':\n      inputOptions.input = BooleanSelect;\n      break;\n    case 'integer':\n    case 'number':\n      inputOptions.to = convertStringToNumber;\n      break;\n    case 'reference':\n      inputOptions.type = 'select';\n      inputOptions.options = getChoices(values);\n      break;\n    case 'image':\n      inputOptions.readOnly = true;\n      inputOptions.from = function (value) {\n        return oktaUnderscore.isEmpty(value) ? '' : StringUtil.localize('user.profile.image.image_set', 'courage'); // TODO\n      };\n      break;\n    case 'password':\n      inputOptions.type = 'password';\n      break;\n    case 'date':\n      inputOptions.type = 'date';\n      break;\n    case 'uri':\n    case 'country-code':\n    case 'country_code':\n    case 'language-code':\n    case 'language_code':\n    case 'email':\n    case 'locale':\n    case 'timezone':\n    case 'string':\n    case 'object':\n      // default input options\n      break;\n    default:\n      throw new Error(`unknown type: ${type}`);\n  }\n  return inputOptions;\n} // Sets nonbasic inputOptions, such as an array with possible values\n\nfunction customOptions(property) {\n  let inputOptions = {};\n  const name = property.get('name');\n  const type = property.get('__displayType__');\n  const values = property.get('__possibleValues__');\n  const prefix = property.get('__fieldNamePrefix__');\n  if (prefix) {\n    inputOptions.name = prefix + name;\n    inputOptions.errorField = name;\n  }\n  if (property.isEnumType()) {\n    const configs = {\n      displayType: type,\n      title: property.get('title'),\n      enumValues: property.getEnumValues()\n    };\n    inputOptions = oktaUnderscore.extend({}, EnumTypeHelper.getEnumInputOptions(configs), inputOptions);\n  } else if (isArray(type) && values) {\n    inputOptions.type = 'checkboxset';\n    inputOptions.input = null;\n    inputOptions.options = getChoices(values);\n  }\n  return inputOptions;\n}\nfunction augmentSchemaProp(schemaProp, possibleValues, profile) {\n  const name = schemaProp.get('name');\n  const prefix = profile.__nestedProperty__;\n  let defaultValues = possibleValues[name];\n  const userValues = profile.get(name);\n  let values; // If API responds with a field name that differs from the form-field name\n  // example: Model's 'profile.username' vs. server's 'username'\n\n  if (prefix) {\n    schemaProp.set('__fieldNamePrefix__', prefix);\n  } // case 1: objectName - fixed list of values are set for the input\n\n  const fixedValues = possibleValues[getObjectName(schemaProp)]; // case 2: name only - default list of values are provided, user can add more\n  // TODO: this case does not yet exist, so it is not tested\n\n  if (defaultValues && userValues) {\n    defaultValues = oktaUnderscore.union(defaultValues, userValues);\n  } // If both fixed and default values exist,\n  // take the fixed values unless they are empty\n\n  if (fixedValues && fixedValues.length) {\n    values = fixedValues;\n  } else if (defaultValues && defaultValues.length) {\n    values = defaultValues;\n  }\n  schemaProp.set('__possibleValues__', values);\n}\nfunction augmentSchemaProps(schemaProps, possibleValues, profile) {\n  schemaProps.each(function (schemaProp) {\n    augmentSchemaProp(schemaProp, possibleValues, profile);\n  });\n  return schemaProps;\n}\n/**\n * Remove invalid schema properties from a collection\n *\n * @param {SchemaProperties Collection} [properties] A collection of schema properties\n * @param {Object} [values] An object of the form { key: [value1, value2]}\n * @return {Array} An array of valid schema models, this can be used to reset\n * a schema properties collection for example.\n * @private\n */\n\nfunction cleanSchema(properties, values) {\n  return properties.filter(function (schema) {\n    return isValidSchemaProp(schema, values);\n  });\n}\nvar SchemaFormFactory = {\n  /**\n   * Creates the options hash for BaseForm.addInput from a prepared schema\n   * property.\n   *\n   * @param {Okta.Model} [preparedSchemaProp] A schema property backbone model\n   * that has been standardized by the prepareSchema method.\n   * @return {Object} An object containing all of the options needed by\n   * BaseForm's addInput()\n   */\n  createInputOptions: function (preparedSchemaProp) {\n    const custom = customOptions(preparedSchemaProp);\n    const standard = defaultOptions(preparedSchemaProp); // underscore did not support nested extend\n    // https://github.com/jashkenas/underscore/issues/162\n\n    if (custom.params && standard.params) {\n      custom.params = oktaUnderscore.defaults(custom.params, standard.params);\n    }\n    return oktaUnderscore.defaults(custom, standard);\n  },\n  hasValidSchemaProps: function (schemaProps, possibleValues) {\n    if (oktaUnderscore.isEmpty(schemaProps)) {\n      return false;\n    }\n    const validSchema = cleanSchema(schemaProps, possibleValues);\n    return !!validSchema.length;\n  },\n  /**\n   * This method is responsible for preparing a collection for the form\n   * factory to use by putting all of the information to create an input\n   * into the schema property and removing invalid properties.\n   * The typical UD form takes 3 models:\n   * The data model has the input values.\n   * The schema model describes which input to use, such as a textbox or a checkbox.\n   * The possible values model provide a list of default options to display, for example in a drop down menu.\n   *\n   * @param {SchemaProperty Collection} [schemaProps] A schema property backbone model.\n   * @param {Object} [possibleValues] An object of the form { key: [value1, value2]}\n   * @param {Okta.Model} [profile] A backbone model containing the property described by the schema property.\n   * @return {SchemaProperty Collection} A schema property collection with standardized models.\n   * The standard schema model adds a couple of additional private properties to\n   * allow the form factory to reference lookup values or name prefixes without going to a second model.\n   */\n  prepareSchema: function (schemaProps, possibleValues, profile) {\n    schemaProps.reset(cleanSchema(schemaProps, possibleValues));\n    return augmentSchemaProps(schemaProps, possibleValues, profile);\n  },\n  /**\n   * `prepareSchema` will reset the property list which may not be necessary at some case.\n   * like when setting default value for schema properties.\n   * (more detail about such case @see wiki UX, App+Entitlements+for+Provisioning)\n   *\n   * @param { }\n   * @return {String}\n   */\n  augmentSchemaProps: augmentSchemaProps,\n  augmentSchemaProp: augmentSchemaProp\n};\nexport { SchemaFormFactory as default };","map":{"version":3,"names":["oktaUnderscore","StringUtil","BooleanSelect","TextBoxSet","EnumTypeHelper","convertStringToNumber","string","number","parseFloat","getChoices","values","object","isArray","type","indexOf","getObjectName","schemaProp","items","get","objectName","isValidSchemaProp","results","isEmpty","defaultOptions","property","name","title","inputOptions","label","input","params","itemType","format","to","options","readOnly","from","value","localize","Error","customOptions","prefix","errorField","isEnumType","configs","displayType","enumValues","getEnumValues","extend","getEnumInputOptions","augmentSchemaProp","possibleValues","profile","__nestedProperty__","defaultValues","userValues","set","fixedValues","union","length","augmentSchemaProps","schemaProps","each","cleanSchema","properties","filter","schema","SchemaFormFactory","createInputOptions","preparedSchemaProp","custom","standard","defaults","hasValidSchemaProps","validSchema","prepareSchema","reset","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/@okta/courage-dist/esm/src/courage/views/forms/helpers/SchemaFormFactory.js"],"sourcesContent":["import oktaUnderscore from '../../../util/underscore-wrapper.js';\nimport StringUtil from '../../../util/StringUtil.js';\nimport BooleanSelect from '../inputs/BooleanSelect.js';\nimport TextBoxSet from '../inputs/TextBoxSet.js';\nimport EnumTypeHelper from './EnumTypeHelper.js';\n\n/* eslint max-statements: 0, max-params: 0 */\n\nfunction convertStringToNumber(string) {\n  const number = StringUtil.parseFloat(string);\n  return string === '' ? null : number;\n} // converts possibleValues to choices\n// [a, b, c] => {a: a, b: b, c: c}\n\n\nfunction getChoices(values) {\n  return oktaUnderscore.object(values, values);\n}\n\nfunction isArray(type) {\n  return type && type.indexOf('array') >= 0;\n} // A schema property may have an objectName either\n// at the root level or nested in the items object\n\n\nfunction getObjectName(schemaProp) {\n  const items = schemaProp.get('items');\n\n  if (items) {\n    return items.objectName;\n  }\n\n  return schemaProp.get('objectName');\n}\n/**\n * Checks the validity of a schema property.\n *\n * @param {SchemaProperty} [schemaProp] A schema property backbone model\n * @param {Object} [values] An object of the form { key: [value1, value2]}\n * @return {Boolean} true/false\n * @private\n */\n\n\nfunction isValidSchemaProp(schemaProp, values) {\n  const objectName = getObjectName(schemaProp);\n  const results = values[objectName]; // a schema property that references an empty list of values\n  // Im looking at you, google apps.\n\n  if (objectName && oktaUnderscore(results).isEmpty()) {\n    return false;\n  }\n\n  return true;\n} // Maps each __displayType__ to a basic set of inputOptions.\n\n\nfunction defaultOptions(property) {\n  const type = property.get('__displayType__');\n  const values = property.get('__possibleValues__');\n  const name = property.get('name');\n  const title = property.get('title');\n  /* eslint complexity: [2, 24] */\n\n  const inputOptions = {\n    type: 'text',\n    name: name,\n    label: title || name\n  }; // @see customOptions for enum complex \"object\" type,\n  // a.k.a \"object\" or \"arrayofobject\" type has enum values defined.\n  // Other cases (e.g., nested object type) are not support yet.\n\n  switch (type) {\n    case 'arrayofstring':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'string'\n      };\n      break;\n\n    case 'arrayofnumber':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'number'\n      };\n      break;\n\n    case 'arrayofinteger':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'integer'\n      };\n      break;\n\n    case 'arrayofobject':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: property.get('items').type\n      };\n      break;\n\n    case 'arrayofref-id':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: property.get('items').format\n      };\n      break;\n\n    case 'boolean':\n      inputOptions.input = BooleanSelect;\n      break;\n\n    case 'integer':\n    case 'number':\n      inputOptions.to = convertStringToNumber;\n      break;\n\n    case 'reference':\n      inputOptions.type = 'select';\n      inputOptions.options = getChoices(values);\n      break;\n\n    case 'image':\n      inputOptions.readOnly = true;\n\n      inputOptions.from = function (value) {\n        return oktaUnderscore.isEmpty(value) ? '' : StringUtil.localize('user.profile.image.image_set', 'courage'); // TODO\n      };\n\n      break;\n\n    case 'password':\n      inputOptions.type = 'password';\n      break;\n\n    case 'date':\n      inputOptions.type = 'date';\n      break;\n\n    case 'uri':\n    case 'country-code':\n    case 'country_code':\n    case 'language-code':\n    case 'language_code':\n    case 'email':\n    case 'locale':\n    case 'timezone':\n    case 'string':\n    case 'object':\n      // default input options\n      break;\n\n    default:\n      throw new Error(`unknown type: ${type}`);\n  }\n\n  return inputOptions;\n} // Sets nonbasic inputOptions, such as an array with possible values\n\n\nfunction customOptions(property) {\n  let inputOptions = {};\n  const name = property.get('name');\n  const type = property.get('__displayType__');\n  const values = property.get('__possibleValues__');\n  const prefix = property.get('__fieldNamePrefix__');\n\n  if (prefix) {\n    inputOptions.name = prefix + name;\n    inputOptions.errorField = name;\n  }\n\n  if (property.isEnumType()) {\n    const configs = {\n      displayType: type,\n      title: property.get('title'),\n      enumValues: property.getEnumValues()\n    };\n    inputOptions = oktaUnderscore.extend({}, EnumTypeHelper.getEnumInputOptions(configs), inputOptions);\n  } else if (isArray(type) && values) {\n    inputOptions.type = 'checkboxset';\n    inputOptions.input = null;\n    inputOptions.options = getChoices(values);\n  }\n\n  return inputOptions;\n}\n\nfunction augmentSchemaProp(schemaProp, possibleValues, profile) {\n  const name = schemaProp.get('name');\n  const prefix = profile.__nestedProperty__;\n  let defaultValues = possibleValues[name];\n  const userValues = profile.get(name);\n  let values; // If API responds with a field name that differs from the form-field name\n  // example: Model's 'profile.username' vs. server's 'username'\n\n  if (prefix) {\n    schemaProp.set('__fieldNamePrefix__', prefix);\n  } // case 1: objectName - fixed list of values are set for the input\n\n\n  const fixedValues = possibleValues[getObjectName(schemaProp)]; // case 2: name only - default list of values are provided, user can add more\n  // TODO: this case does not yet exist, so it is not tested\n\n  if (defaultValues && userValues) {\n    defaultValues = oktaUnderscore.union(defaultValues, userValues);\n  } // If both fixed and default values exist,\n  // take the fixed values unless they are empty\n\n\n  if (fixedValues && fixedValues.length) {\n    values = fixedValues;\n  } else if (defaultValues && defaultValues.length) {\n    values = defaultValues;\n  }\n\n  schemaProp.set('__possibleValues__', values);\n}\n\nfunction augmentSchemaProps(schemaProps, possibleValues, profile) {\n  schemaProps.each(function (schemaProp) {\n    augmentSchemaProp(schemaProp, possibleValues, profile);\n  });\n  return schemaProps;\n}\n/**\n * Remove invalid schema properties from a collection\n *\n * @param {SchemaProperties Collection} [properties] A collection of schema properties\n * @param {Object} [values] An object of the form { key: [value1, value2]}\n * @return {Array} An array of valid schema models, this can be used to reset\n * a schema properties collection for example.\n * @private\n */\n\n\nfunction cleanSchema(properties, values) {\n  return properties.filter(function (schema) {\n    return isValidSchemaProp(schema, values);\n  });\n}\n\nvar SchemaFormFactory = {\n  /**\n   * Creates the options hash for BaseForm.addInput from a prepared schema\n   * property.\n   *\n   * @param {Okta.Model} [preparedSchemaProp] A schema property backbone model\n   * that has been standardized by the prepareSchema method.\n   * @return {Object} An object containing all of the options needed by\n   * BaseForm's addInput()\n   */\n  createInputOptions: function (preparedSchemaProp) {\n    const custom = customOptions(preparedSchemaProp);\n    const standard = defaultOptions(preparedSchemaProp); // underscore did not support nested extend\n    // https://github.com/jashkenas/underscore/issues/162\n\n    if (custom.params && standard.params) {\n      custom.params = oktaUnderscore.defaults(custom.params, standard.params);\n    }\n\n    return oktaUnderscore.defaults(custom, standard);\n  },\n  hasValidSchemaProps: function (schemaProps, possibleValues) {\n    if (oktaUnderscore.isEmpty(schemaProps)) {\n      return false;\n    }\n\n    const validSchema = cleanSchema(schemaProps, possibleValues);\n    return !!validSchema.length;\n  },\n\n  /**\n   * This method is responsible for preparing a collection for the form\n   * factory to use by putting all of the information to create an input\n   * into the schema property and removing invalid properties.\n   * The typical UD form takes 3 models:\n   * The data model has the input values.\n   * The schema model describes which input to use, such as a textbox or a checkbox.\n   * The possible values model provide a list of default options to display, for example in a drop down menu.\n   *\n   * @param {SchemaProperty Collection} [schemaProps] A schema property backbone model.\n   * @param {Object} [possibleValues] An object of the form { key: [value1, value2]}\n   * @param {Okta.Model} [profile] A backbone model containing the property described by the schema property.\n   * @return {SchemaProperty Collection} A schema property collection with standardized models.\n   * The standard schema model adds a couple of additional private properties to\n   * allow the form factory to reference lookup values or name prefixes without going to a second model.\n   */\n  prepareSchema: function (schemaProps, possibleValues, profile) {\n    schemaProps.reset(cleanSchema(schemaProps, possibleValues));\n    return augmentSchemaProps(schemaProps, possibleValues, profile);\n  },\n\n  /**\n   * `prepareSchema` will reset the property list which may not be necessary at some case.\n   * like when setting default value for schema properties.\n   * (more detail about such case @see wiki UX, App+Entitlements+for+Provisioning)\n   *\n   * @param { }\n   * @return {String}\n   */\n  augmentSchemaProps: augmentSchemaProps,\n  augmentSchemaProp: augmentSchemaProp\n};\n\nexport { SchemaFormFactory as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}