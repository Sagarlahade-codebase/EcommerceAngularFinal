{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Controller, loc } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport ViewFactory from '../view-builder/ViewFactory.js';\nimport IonResponseHelper from '../ion/IonResponseHelper.js';\nimport { getV1ClassName } from '../ion/ViewClassNamesFactory.js';\nimport { TERMINAL_FORMS, FORMS, FORM_NAME_TO_OPERATION_MAP } from '../ion/RemediationConstants.js';\nimport Util from '../../util/Util.js';\nimport sessionStorageHelper from '../client/sessionStorageHelper.js';\nimport { IdxStatus } from '@okta/okta-auth-js';\nimport { CONFIGURED_FLOW } from '../client/constants.js';\nimport { ConfigError } from '../../util/Errors.js';\nimport { updateAppState } from '../client/updateAppState.js';\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar FormController = Controller.extend({\n  className: 'form-controller',\n  appStateEvents: {\n    'change:currentFormName': 'handleFormNameChange',\n    'afterError': 'handleAfterError',\n    'invokeAction': 'handleInvokeAction',\n    'saveForm': 'handleSaveForm',\n    'switchForm': 'handleSwitchForm'\n  },\n  preRender: function () {\n    this.removeChildren();\n  },\n  postRender: function () {\n    const currentViewState = this.options.appState.getCurrentViewState(); // TODO: add comments regarding when `currentViewState` would be null?\n\n    if (!currentViewState) {\n      return;\n    }\n    this.clearMetadata();\n    let formName = currentViewState.name;\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      formName = 'identify-recovery';\n    }\n    const TheView = ViewFactory.create(formName, this.options.appState.get('authenticatorKey'));\n    try {\n      this.formView = this.add(TheView, {\n        options: {\n          currentViewState: currentViewState\n        }\n      }).last();\n    } catch (error) {\n      // This is the place where runtime error (NPE) happens at most of time.\n      // It has been swallowed by Q.js hence add try/catch to surface up errors.\n      this.options.settings.callGlobalError(error);\n      return;\n    }\n    this.triggerAfterRenderEvent();\n  },\n  clearMetadata: function () {\n    const formName = this.options.appState.get('currentFormName'); // TODO: OKTA-392835 shall not clear state handle at terminal page\n\n    if (TERMINAL_FORMS.includes(formName)) {\n      sessionStorageHelper.removeStateHandle();\n    }\n  },\n  triggerAfterRenderEvent: function () {\n    const contextData = this.createAfterEventContext();\n    this.trigger('afterRender', contextData);\n  },\n  handleFormNameChange: function () {\n    this.render();\n  },\n  handleAfterError: function (error) {\n    const contextData = this.createAfterEventContext();\n    const errorContextData = {\n      xhr: error,\n      errorSummary: error.responseJSON && error.responseJSON.errorSummary\n    }; // TODO: need some enhancement after https://github.com/okta/okta-idx-js/pull/27\n    // OKTA-318062\n\n    this.trigger('afterError', contextData, errorContextData);\n  },\n  createAfterEventContext: function () {\n    const formName = this.options.appState.get('currentFormName');\n    const authenticatorKey = this.options.appState.get('authenticatorKey');\n    const methodType = this.options.appState.get('authenticatorMethodType');\n    const isPasswordRecoveryFlow = this.options.appState.get('isPasswordRecoveryFlow');\n    const v1ControllerClassName = getV1ClassName(formName, authenticatorKey, methodType, isPasswordRecoveryFlow);\n    const eventData = {\n      controller: v1ControllerClassName,\n      formName: formName\n    };\n    if (authenticatorKey) {\n      eventData.authenticatorKey = authenticatorKey;\n    }\n    if (methodType) {\n      eventData.methodType = methodType;\n    }\n    return eventData;\n  },\n  handleSwitchForm: function (formName) {\n    // trigger formName change to change view\n    if (this.options.appState.get('messages')) {\n      // Clear messages before calling switch form.\n      // If a form has errors sent form API inside messages\n      // and user hits back to factors list which triggers switchForm,\n      // those error will show up on another screen that gets rendered after switchForm\n      this.options.appState.unset('messages');\n    }\n    this.options.appState.set('currentFormName', formName);\n  },\n  // eslint-disable-next-line max-statements\n  handleInvokeAction: function () {\n    var _ref = _asyncToGenerator(function* (actionPath = '', actionParams = {}) {\n      const {\n        appState: appState,\n        settings: settings\n      } = this.options;\n      const idx = appState.get('idx');\n      const {\n        stateHandle: stateHandle\n      } = idx.context;\n      let invokeOptions = {\n        exchangeCodeForTokens: false,\n        // we handle this in interactionCodeFlow.js\n        shouldProceedWithEmailAuthenticator: false,\n        // do not auto-select email authenticator\n        stateHandle: stateHandle\n      };\n      let error; // Cancel action is executes synchronously\n\n      if (actionPath === 'cancel') {\n        // TODO: resolve race conditions caused by event pattern: OKTA-490220\n        settings.getAuthClient().transactionManager.clear({\n          clearIdxResponse: false\n        });\n        sessionStorageHelper.removeStateHandle();\n        appState.clearAppStateCache();\n        if (settings.get('useInteractionCodeFlow')) {\n          // In this case we need to restart login flow and recreate transaction meta\n          // that will be used in interactionCodeFlow function\n          appState.trigger('restartLoginFlow');\n          return;\n        }\n      } // Build options to invoke or throw error for invalid action\n\n      if (idx['neededToProceed'].find(item => item.name === actionPath)) {\n        invokeOptions = {\n          ...invokeOptions,\n          step: actionPath\n        };\n      } else if (oktaUnderscore.isFunction(idx['actions'][actionPath])) {\n        invokeOptions = {\n          ...invokeOptions,\n          actions: [{\n            name: actionPath,\n            params: actionParams\n          }]\n        };\n      } else {\n        error = new ConfigError(`Invalid action selected: ${actionPath}`);\n        this.options.settings.callGlobalError(error);\n        yield this.showFormErrors(this.formView.model, error, this.formView.form);\n        return;\n      } // action will be executed asynchronously\n\n      yield this.invokeAction(invokeOptions);\n    });\n    return function handleInvokeAction() {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n  invokeAction: function () {\n    var _ref2 = _asyncToGenerator(function* (invokeOptions) {\n      const authClient = this.options.settings.getAuthClient();\n      let resp;\n      let error;\n      try {\n        resp = yield authClient.idx.proceed(invokeOptions);\n        if (resp.requestDidSucceed === false) {\n          error = resp;\n        }\n      } catch (e) {\n        error = e;\n      } // if request did not succeed, show error on the current form\n\n      if (error) {\n        yield this.showFormErrors(this.formView.model, error, this.formView.form);\n        return;\n      } // process response, may render a new form\n\n      yield this.handleIdxResponse(resp);\n    });\n    return function invokeAction(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(),\n  // eslint-disable-next-line max-statements, complexity\n  handleSaveForm: function () {\n    var _ref3 = _asyncToGenerator(function* (model) {\n      const formName = model.get('formName'); // Toggle Form saving status (e.g. disabling save button, etc)\n\n      this.toggleFormButtonState(true);\n      model.trigger('request'); // Use full page redirection if necessary\n\n      if (model.get('useRedirect')) {\n        // Clear when navigates away from SIW page, e.g. success, IdP Authenticator.\n        // Because SIW sort of finished its current /transaction/\n        sessionStorageHelper.removeStateHandle();\n        const currentViewState = this.options.appState.getCurrentViewState();\n        Util.redirectWithFormGet(currentViewState.href);\n        return;\n      } // Run hook: transform the user name (a.k.a identifier)\n\n      const values = this.transformIdentifier(formName, model); // Error out when this is not a remediation form. Unexpected Exception.\n\n      if (!this.options.appState.hasRemediationObject(formName)) {\n        this.options.settings.callGlobalError(`Cannot find http action for \"${formName}\".`);\n        yield this.showFormErrors(this.formView.model, 'Cannot find action to proceed.', this.formView.form);\n        return;\n      } // Reset password in identity-first flow needs some help to auto-select password and begin the reset flow\n\n      if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n        values.authenticator = 'okta_password';\n      } // Submit request to idx endpoint\n\n      const authClient = this.options.settings.getAuthClient();\n      const idxOptions = {\n        exchangeCodeForTokens: false,\n        // we handle this in interactionCodeFlow.js\n        shouldProceedWithEmailAuthenticator: false // do not auto-select email authenticator\n      };\n      try {\n        const idx = this.options.appState.get('idx');\n        const {\n          stateHandle: stateHandle\n        } = idx.context;\n        const resp = yield authClient.idx.proceed({\n          ...idxOptions,\n          step: formName,\n          stateHandle: stateHandle,\n          ...values\n        });\n        if (resp.status === IdxStatus.FAILURE) {\n          throw resp.error; // caught and handled in this function\n        } // follow idx transaction to render terminal view for session expired error\n\n        if (IonResponseHelper.isIdxSessionExpiredError(resp)) {\n          const authClient = this.settings.getAuthClient();\n          authClient.transactionManager.clear();\n          yield this.handleIdxResponse(resp);\n          return;\n        } // If the last request did not succeed, show errors on the current form\n        // Special case: Okta server responds 401 status code with WWW-Authenticate header and new remediation\n        // so that the iOS/MacOS credential SSO extension (Okta Verify) can intercept\n        // the response reaches here when Okta Verify is not installed\n        // we need to return an idx object so that\n        // the SIW can proceed to the next step without showing error\n\n        if (resp.requestDidSucceed === false && !resp.stepUp) {\n          yield this.showFormErrors(model, resp, this.formView.form);\n          return;\n        }\n        const onSuccess = this.handleIdxResponse.bind(this, resp);\n        if (formName === FORMS.ENROLL_PROFILE) {\n          var _values$userProfile;\n\n          // call registration (aka enroll profile) hook\n          this.settings.postRegistrationSubmit(values === null || values === void 0 ? void 0 : (_values$userProfile = values.userProfile) === null || _values$userProfile === void 0 ? void 0 : _values$userProfile.email, onSuccess, error => {\n            model.trigger('error', model, {\n              responseJSON: error\n            });\n          });\n        } else {\n          yield onSuccess();\n        }\n      } catch (error) {\n        var _error$is;\n        if ((_error$is = error.is) !== null && _error$is !== void 0 && _error$is.call(error, 'terminal')) {\n          this.options.appState.setNonIdxError(error);\n        } else {\n          yield this.showFormErrors(model, error, this.formView.form);\n        }\n      } finally {\n        this.toggleFormButtonState(false);\n      }\n    });\n    return function handleSaveForm(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(),\n  transformIdentifier: function (formName, model) {\n    const modelJSON = model.toJSON();\n    if (Object.prototype.hasOwnProperty.call(modelJSON, 'identifier')) {\n      // The callback function is passed two arguments:\n      // 1) username: The name entered by the user\n      // 2) operation: The type of operation the user is trying to perform:\n      //      - PRIMARY_AUTH\n      //      - FORGOT_PASSWORD\n      //      - UNLOCK_ACCOUNT\n      const operation = FORM_NAME_TO_OPERATION_MAP[formName];\n      modelJSON.identifier = this.settings.transformUsername(modelJSON.identifier, operation);\n    }\n    return modelJSON;\n  },\n  /**\n   * @param model current form model\n   * @param error any errors after user action\n   * @param form current form\n   * Handle errors that get displayed right after any user action. After such form errors widget doesn't\n   * reload or re-render, but updates the AppSate with latest remediation.\n   */\n  showFormErrors: function () {\n    var _ref4 = _asyncToGenerator(function* (model, error, form) {\n      var _error, _idxStateError, _idxStateError2;\n\n      /* eslint max-statements: [2, 24] */\n      let errorObj;\n      let idxStateError;\n      let showErrorBanner = true;\n      model.trigger('clearFormError');\n      if (!error) {\n        error = 'FormController - unknown error found';\n        this.options.settings.callGlobalError(error);\n      }\n      if ((_error = error) !== null && _error !== void 0 && _error.rawIdxState) {\n        idxStateError = error;\n        error = error.rawIdxState;\n      }\n      if (IonResponseHelper.isIonErrorResponse(error)) {\n        errorObj = IonResponseHelper.convertFormErrors(error);\n      } else if (error.errorSummary) {\n        errorObj = {\n          responseJSON: error\n        };\n      } else {\n        Util.logConsoleError(error);\n        errorObj = {\n          responseJSON: {\n            errorSummary: loc('error.unsupported.response', 'login')\n          }\n        };\n      }\n      if (oktaUnderscore.isFunction(form === null || form === void 0 ? void 0 : form.showCustomFormErrorCallout)) {\n        showErrorBanner = !form.showCustomFormErrorCallout(errorObj, idxStateError.messages);\n      } // show error before updating app state.\n\n      model.trigger('error', model, errorObj, showErrorBanner);\n      idxStateError = Object.assign({}, idxStateError, {\n        hasFormError: true\n      }); // TODO OKTA-408410: Widget should update the state on every new response. It should NOT do selective update.\n      // For eg 429 rate-limit errors, we have to skip updating idx state, because error response is not an idx response.\n\n      if (Array.isArray((_idxStateError = idxStateError) === null || _idxStateError === void 0 ? void 0 : _idxStateError.neededToProceed) && (_idxStateError2 = idxStateError) !== null && _idxStateError2 !== void 0 && _idxStateError2.neededToProceed.length) {\n        yield this.handleIdxResponse(idxStateError);\n      }\n    });\n    return function showFormErrors(_x3, _x4, _x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }(),\n  handleIdxResponse: function () {\n    var _ref5 = _asyncToGenerator(function* (idxResp) {\n      yield updateAppState(this.options.appState, idxResp);\n    });\n    return function handleIdxResponse(_x6) {\n      return _ref5.apply(this, arguments);\n    };\n  }(),\n  /**\n   * SignIn widget has its own (hacky) way to customize the button disabled state:\n   * adding `link-button-disabled` despite the name was intend only to disable\n   * `link-button`.\n   * Instead of doing decent refactor, we want to follow the convention for now.\n   *\n   * @param {boolean} disabled whether add extra disable CSS class.\n   */\n  toggleFormButtonState: function (disabled) {\n    const button = this.$el.find('.o-form-button-bar .button');\n    button.toggleClass('link-button-disabled', disabled);\n  }\n});\nexport { FormController as default };","map":{"version":3,"names":["Controller","loc","oktaUnderscore","ViewFactory","IonResponseHelper","getV1ClassName","TERMINAL_FORMS","FORMS","FORM_NAME_TO_OPERATION_MAP","Util","sessionStorageHelper","IdxStatus","CONFIGURED_FLOW","ConfigError","updateAppState","FormController","extend","className","appStateEvents","preRender","removeChildren","postRender","currentViewState","options","appState","getCurrentViewState","clearMetadata","formName","name","settings","get","RESET_PASSWORD","TheView","create","formView","add","last","error","callGlobalError","triggerAfterRenderEvent","includes","removeStateHandle","contextData","createAfterEventContext","trigger","handleFormNameChange","render","handleAfterError","errorContextData","xhr","errorSummary","responseJSON","authenticatorKey","methodType","isPasswordRecoveryFlow","v1ControllerClassName","eventData","controller","handleSwitchForm","unset","set","handleInvokeAction","_ref","_asyncToGenerator","actionPath","actionParams","idx","stateHandle","context","invokeOptions","exchangeCodeForTokens","shouldProceedWithEmailAuthenticator","getAuthClient","transactionManager","clear","clearIdxResponse","clearAppStateCache","find","item","step","isFunction","actions","params","showFormErrors","model","form","invokeAction","apply","arguments","_ref2","authClient","resp","proceed","requestDidSucceed","e","handleIdxResponse","_x","handleSaveForm","_ref3","toggleFormButtonState","redirectWithFormGet","href","values","transformIdentifier","hasRemediationObject","authenticator","idxOptions","status","FAILURE","isIdxSessionExpiredError","stepUp","onSuccess","bind","ENROLL_PROFILE","_values$userProfile","postRegistrationSubmit","userProfile","email","_error$is","is","call","setNonIdxError","_x2","modelJSON","toJSON","Object","prototype","hasOwnProperty","operation","identifier","transformUsername","_ref4","_error","_idxStateError","_idxStateError2","errorObj","idxStateError","showErrorBanner","rawIdxState","isIonErrorResponse","convertFormErrors","logConsoleError","showCustomFormErrorCallout","messages","assign","hasFormError","Array","isArray","neededToProceed","length","_x3","_x4","_x5","_ref5","idxResp","_x6","disabled","button","$el","toggleClass","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/controllers/FormController.js"],"sourcesContent":["import { Controller, loc } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport ViewFactory from '../view-builder/ViewFactory.js';\nimport IonResponseHelper from '../ion/IonResponseHelper.js';\nimport { getV1ClassName } from '../ion/ViewClassNamesFactory.js';\nimport { TERMINAL_FORMS, FORMS, FORM_NAME_TO_OPERATION_MAP } from '../ion/RemediationConstants.js';\nimport Util from '../../util/Util.js';\nimport sessionStorageHelper from '../client/sessionStorageHelper.js';\nimport { IdxStatus } from '@okta/okta-auth-js';\nimport { CONFIGURED_FLOW } from '../client/constants.js';\nimport { ConfigError } from '../../util/Errors.js';\nimport { updateAppState } from '../client/updateAppState.js';\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar FormController = Controller.extend({\n  className: 'form-controller',\n  appStateEvents: {\n    'change:currentFormName': 'handleFormNameChange',\n    'afterError': 'handleAfterError',\n    'invokeAction': 'handleInvokeAction',\n    'saveForm': 'handleSaveForm',\n    'switchForm': 'handleSwitchForm'\n  },\n  preRender: function () {\n    this.removeChildren();\n  },\n  postRender: function () {\n    const currentViewState = this.options.appState.getCurrentViewState(); // TODO: add comments regarding when `currentViewState` would be null?\n\n    if (!currentViewState) {\n      return;\n    }\n\n    this.clearMetadata();\n    let formName = currentViewState.name;\n\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      formName = 'identify-recovery';\n    }\n\n    const TheView = ViewFactory.create(formName, this.options.appState.get('authenticatorKey'));\n\n    try {\n      this.formView = this.add(TheView, {\n        options: {\n          currentViewState: currentViewState\n        }\n      }).last();\n    } catch (error) {\n      // This is the place where runtime error (NPE) happens at most of time.\n      // It has been swallowed by Q.js hence add try/catch to surface up errors.\n      this.options.settings.callGlobalError(error);\n      return;\n    }\n\n    this.triggerAfterRenderEvent();\n  },\n  clearMetadata: function () {\n    const formName = this.options.appState.get('currentFormName'); // TODO: OKTA-392835 shall not clear state handle at terminal page\n\n    if (TERMINAL_FORMS.includes(formName)) {\n      sessionStorageHelper.removeStateHandle();\n    }\n  },\n  triggerAfterRenderEvent: function () {\n    const contextData = this.createAfterEventContext();\n    this.trigger('afterRender', contextData);\n  },\n  handleFormNameChange: function () {\n    this.render();\n  },\n  handleAfterError: function (error) {\n    const contextData = this.createAfterEventContext();\n    const errorContextData = {\n      xhr: error,\n      errorSummary: error.responseJSON && error.responseJSON.errorSummary\n    }; // TODO: need some enhancement after https://github.com/okta/okta-idx-js/pull/27\n    // OKTA-318062\n\n    this.trigger('afterError', contextData, errorContextData);\n  },\n  createAfterEventContext: function () {\n    const formName = this.options.appState.get('currentFormName');\n    const authenticatorKey = this.options.appState.get('authenticatorKey');\n    const methodType = this.options.appState.get('authenticatorMethodType');\n    const isPasswordRecoveryFlow = this.options.appState.get('isPasswordRecoveryFlow');\n    const v1ControllerClassName = getV1ClassName(formName, authenticatorKey, methodType, isPasswordRecoveryFlow);\n    const eventData = {\n      controller: v1ControllerClassName,\n      formName: formName\n    };\n\n    if (authenticatorKey) {\n      eventData.authenticatorKey = authenticatorKey;\n    }\n\n    if (methodType) {\n      eventData.methodType = methodType;\n    }\n\n    return eventData;\n  },\n  handleSwitchForm: function (formName) {\n    // trigger formName change to change view\n    if (this.options.appState.get('messages')) {\n      // Clear messages before calling switch form.\n      // If a form has errors sent form API inside messages\n      // and user hits back to factors list which triggers switchForm,\n      // those error will show up on another screen that gets rendered after switchForm\n      this.options.appState.unset('messages');\n    }\n\n    this.options.appState.set('currentFormName', formName);\n  },\n  // eslint-disable-next-line max-statements\n  handleInvokeAction: async function (actionPath = '', actionParams = {}) {\n    const {\n      appState: appState,\n      settings: settings\n    } = this.options;\n    const idx = appState.get('idx');\n    const {\n      stateHandle: stateHandle\n    } = idx.context;\n    let invokeOptions = {\n      exchangeCodeForTokens: false,\n      // we handle this in interactionCodeFlow.js\n      shouldProceedWithEmailAuthenticator: false,\n      // do not auto-select email authenticator\n      stateHandle: stateHandle\n    };\n    let error; // Cancel action is executes synchronously\n\n    if (actionPath === 'cancel') {\n      // TODO: resolve race conditions caused by event pattern: OKTA-490220\n      settings.getAuthClient().transactionManager.clear({\n        clearIdxResponse: false\n      });\n      sessionStorageHelper.removeStateHandle();\n      appState.clearAppStateCache();\n\n      if (settings.get('useInteractionCodeFlow')) {\n        // In this case we need to restart login flow and recreate transaction meta\n        // that will be used in interactionCodeFlow function\n        appState.trigger('restartLoginFlow');\n        return;\n      }\n    } // Build options to invoke or throw error for invalid action\n\n\n    if (idx['neededToProceed'].find(item => item.name === actionPath)) {\n      invokeOptions = { ...invokeOptions,\n        step: actionPath\n      };\n    } else if (oktaUnderscore.isFunction(idx['actions'][actionPath])) {\n      invokeOptions = { ...invokeOptions,\n        actions: [{\n          name: actionPath,\n          params: actionParams\n        }]\n      };\n    } else {\n      error = new ConfigError(`Invalid action selected: ${actionPath}`);\n      this.options.settings.callGlobalError(error);\n      await this.showFormErrors(this.formView.model, error, this.formView.form);\n      return;\n    } // action will be executed asynchronously\n\n\n    await this.invokeAction(invokeOptions);\n  },\n  invokeAction: async function (invokeOptions) {\n    const authClient = this.options.settings.getAuthClient();\n    let resp;\n    let error;\n\n    try {\n      resp = await authClient.idx.proceed(invokeOptions);\n\n      if (resp.requestDidSucceed === false) {\n        error = resp;\n      }\n    } catch (e) {\n      error = e;\n    } // if request did not succeed, show error on the current form\n\n\n    if (error) {\n      await this.showFormErrors(this.formView.model, error, this.formView.form);\n      return;\n    } // process response, may render a new form\n\n\n    await this.handleIdxResponse(resp);\n  },\n  // eslint-disable-next-line max-statements, complexity\n  handleSaveForm: async function (model) {\n    const formName = model.get('formName'); // Toggle Form saving status (e.g. disabling save button, etc)\n\n    this.toggleFormButtonState(true);\n    model.trigger('request'); // Use full page redirection if necessary\n\n    if (model.get('useRedirect')) {\n      // Clear when navigates away from SIW page, e.g. success, IdP Authenticator.\n      // Because SIW sort of finished its current /transaction/\n      sessionStorageHelper.removeStateHandle();\n      const currentViewState = this.options.appState.getCurrentViewState();\n      Util.redirectWithFormGet(currentViewState.href);\n      return;\n    } // Run hook: transform the user name (a.k.a identifier)\n\n\n    const values = this.transformIdentifier(formName, model); // Error out when this is not a remediation form. Unexpected Exception.\n\n    if (!this.options.appState.hasRemediationObject(formName)) {\n      this.options.settings.callGlobalError(`Cannot find http action for \"${formName}\".`);\n      await this.showFormErrors(this.formView.model, 'Cannot find action to proceed.', this.formView.form);\n      return;\n    } // Reset password in identity-first flow needs some help to auto-select password and begin the reset flow\n\n\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      values.authenticator = 'okta_password';\n    } // Submit request to idx endpoint\n\n\n    const authClient = this.options.settings.getAuthClient();\n    const idxOptions = {\n      exchangeCodeForTokens: false,\n      // we handle this in interactionCodeFlow.js\n      shouldProceedWithEmailAuthenticator: false // do not auto-select email authenticator\n\n    };\n\n    try {\n      const idx = this.options.appState.get('idx');\n      const {\n        stateHandle: stateHandle\n      } = idx.context;\n      const resp = await authClient.idx.proceed({ ...idxOptions,\n        step: formName,\n        stateHandle: stateHandle,\n        ...values\n      });\n\n      if (resp.status === IdxStatus.FAILURE) {\n        throw resp.error; // caught and handled in this function\n      } // follow idx transaction to render terminal view for session expired error\n\n\n      if (IonResponseHelper.isIdxSessionExpiredError(resp)) {\n        const authClient = this.settings.getAuthClient();\n        authClient.transactionManager.clear();\n        await this.handleIdxResponse(resp);\n        return;\n      } // If the last request did not succeed, show errors on the current form\n      // Special case: Okta server responds 401 status code with WWW-Authenticate header and new remediation\n      // so that the iOS/MacOS credential SSO extension (Okta Verify) can intercept\n      // the response reaches here when Okta Verify is not installed\n      // we need to return an idx object so that\n      // the SIW can proceed to the next step without showing error\n\n\n      if (resp.requestDidSucceed === false && !resp.stepUp) {\n        await this.showFormErrors(model, resp, this.formView.form);\n        return;\n      }\n\n      const onSuccess = this.handleIdxResponse.bind(this, resp);\n\n      if (formName === FORMS.ENROLL_PROFILE) {\n        var _values$userProfile;\n\n        // call registration (aka enroll profile) hook\n        this.settings.postRegistrationSubmit(values === null || values === void 0 ? void 0 : (_values$userProfile = values.userProfile) === null || _values$userProfile === void 0 ? void 0 : _values$userProfile.email, onSuccess, error => {\n          model.trigger('error', model, {\n            responseJSON: error\n          });\n        });\n      } else {\n        await onSuccess();\n      }\n    } catch (error) {\n      var _error$is;\n\n      if ((_error$is = error.is) !== null && _error$is !== void 0 && _error$is.call(error, 'terminal')) {\n        this.options.appState.setNonIdxError(error);\n      } else {\n        await this.showFormErrors(model, error, this.formView.form);\n      }\n    } finally {\n      this.toggleFormButtonState(false);\n    }\n  },\n  transformIdentifier: function (formName, model) {\n    const modelJSON = model.toJSON();\n\n    if (Object.prototype.hasOwnProperty.call(modelJSON, 'identifier')) {\n      // The callback function is passed two arguments:\n      // 1) username: The name entered by the user\n      // 2) operation: The type of operation the user is trying to perform:\n      //      - PRIMARY_AUTH\n      //      - FORGOT_PASSWORD\n      //      - UNLOCK_ACCOUNT\n      const operation = FORM_NAME_TO_OPERATION_MAP[formName];\n      modelJSON.identifier = this.settings.transformUsername(modelJSON.identifier, operation);\n    }\n\n    return modelJSON;\n  },\n\n  /**\n   * @param model current form model\n   * @param error any errors after user action\n   * @param form current form\n   * Handle errors that get displayed right after any user action. After such form errors widget doesn't\n   * reload or re-render, but updates the AppSate with latest remediation.\n   */\n  showFormErrors: async function (model, error, form) {\n    var _error, _idxStateError, _idxStateError2;\n\n    /* eslint max-statements: [2, 24] */\n    let errorObj;\n    let idxStateError;\n    let showErrorBanner = true;\n    model.trigger('clearFormError');\n\n    if (!error) {\n      error = 'FormController - unknown error found';\n      this.options.settings.callGlobalError(error);\n    }\n\n    if ((_error = error) !== null && _error !== void 0 && _error.rawIdxState) {\n      idxStateError = error;\n      error = error.rawIdxState;\n    }\n\n    if (IonResponseHelper.isIonErrorResponse(error)) {\n      errorObj = IonResponseHelper.convertFormErrors(error);\n    } else if (error.errorSummary) {\n      errorObj = {\n        responseJSON: error\n      };\n    } else {\n      Util.logConsoleError(error);\n      errorObj = {\n        responseJSON: {\n          errorSummary: loc('error.unsupported.response', 'login')\n        }\n      };\n    }\n\n    if (oktaUnderscore.isFunction(form === null || form === void 0 ? void 0 : form.showCustomFormErrorCallout)) {\n      showErrorBanner = !form.showCustomFormErrorCallout(errorObj, idxStateError.messages);\n    } // show error before updating app state.\n\n\n    model.trigger('error', model, errorObj, showErrorBanner);\n    idxStateError = Object.assign({}, idxStateError, {\n      hasFormError: true\n    }); // TODO OKTA-408410: Widget should update the state on every new response. It should NOT do selective update.\n    // For eg 429 rate-limit errors, we have to skip updating idx state, because error response is not an idx response.\n\n    if (Array.isArray((_idxStateError = idxStateError) === null || _idxStateError === void 0 ? void 0 : _idxStateError.neededToProceed) && (_idxStateError2 = idxStateError) !== null && _idxStateError2 !== void 0 && _idxStateError2.neededToProceed.length) {\n      await this.handleIdxResponse(idxStateError);\n    }\n  },\n  handleIdxResponse: async function (idxResp) {\n    await updateAppState(this.options.appState, idxResp);\n  },\n\n  /**\n   * SignIn widget has its own (hacky) way to customize the button disabled state:\n   * adding `link-button-disabled` despite the name was intend only to disable\n   * `link-button`.\n   * Instead of doing decent refactor, we want to follow the convention for now.\n   *\n   * @param {boolean} disabled whether add extra disable CSS class.\n   */\n  toggleFormButtonState: function (disabled) {\n    const button = this.$el.find('.o-form-button-bar .button');\n    button.toggleClass('link-button-disabled', disabled);\n  }\n});\n\nexport { FormController as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}