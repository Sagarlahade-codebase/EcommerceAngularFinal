{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { TRANSACTION_STORAGE_NAME, SHARED_TRANSACTION_STORAGE_NAME, ORIGINAL_URI_STORAGE_NAME, IDX_RESPONSE_STORAGE_NAME, TOKEN_STORAGE_NAME, CACHE_STORAGE_NAME, PKCE_STORAGE_NAME, REDIRECT_OAUTH_PARAMS_NAME } from './constants.js';\nimport SavedObject from './SavedObject.js';\nimport { isBrowser } from './features.js';\nimport { warn } from './util/console.js';\nimport AuthSdkError from './errors/AuthSdkError.js';\nfunction logServerSideMemoryStorageWarning(options) {\n  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\nclass StorageManager {\n  constructor(storageManagerOptions, cookieOptions, storageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n  getOptionsForSection(sectionName, overrideOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n  getStorage(options) {\n    options = Object.assign({}, this.cookieOptions, options);\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n    let {\n      storageType,\n      storageTypes\n    } = options;\n    if (storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = undefined;\n      }\n    }\n    if (!storageType) {\n      storageType = this.storageUtil.findStorageType(storageTypes);\n    }\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n  getTransactionStorage(options) {\n    options = this.getOptionsForSection('transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n  getSharedTansactionStorage(options) {\n    options = this.getOptionsForSection('shared-transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || SHARED_TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n  getOriginalUriStorage(options) {\n    options = this.getOptionsForSection('original-uri', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || ORIGINAL_URI_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n  getIdxResponseStorage(options) {\n    let storage;\n    if (isBrowser()) {\n      try {\n        storage = this.storageUtil.getStorageByType('memory', options);\n      } catch (e) {\n        warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n      }\n    } else {\n      const transactionStorage = this.getTransactionStorage(options);\n      if (transactionStorage) {\n        storage = {\n          getItem: key => {\n            const transaction = transactionStorage.getStorage();\n            if (transaction && transaction[key]) {\n              return transaction[key];\n            }\n            return null;\n          },\n          setItem: (key, val) => {\n            const transaction = transactionStorage.getStorage();\n            if (!transaction) {\n              throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n            }\n            transaction[key] = val;\n            transactionStorage.setStorage(transaction);\n          },\n          removeItem: key => {\n            const transaction = transactionStorage.getStorage();\n            if (!transaction) {\n              return;\n            }\n            delete transaction[key];\n            transactionStorage.setStorage(transaction);\n          }\n        };\n      }\n    }\n    if (!storage) {\n      return null;\n    }\n    return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n  }\n  getTokenStorage(options) {\n    options = this.getOptionsForSection('token', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n  getHttpCache(options) {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n  getLegacyPKCEStorage(options) {\n    options = this.getOptionsForSection('legacy-pkce', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || PKCE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n  getLegacyOAuthParamsStorage(options) {\n    options = this.getOptionsForSection('legacy-oauth-params', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n}\nexport { StorageManager };","map":{"version":3,"names":["TRANSACTION_STORAGE_NAME","SHARED_TRANSACTION_STORAGE_NAME","ORIGINAL_URI_STORAGE_NAME","IDX_RESPONSE_STORAGE_NAME","TOKEN_STORAGE_NAME","CACHE_STORAGE_NAME","PKCE_STORAGE_NAME","REDIRECT_OAUTH_PARAMS_NAME","SavedObject","isBrowser","warn","AuthSdkError","logServerSideMemoryStorageWarning","options","storageProvider","StorageManager","constructor","storageManagerOptions","cookieOptions","storageUtil","getOptionsForSection","sectionName","overrideOptions","Object","assign","getStorage","storageType","storageTypes","sessionCookie","idx","indexOf","slice","undefined","findStorageType","getStorageByType","getTransactionStorage","storage","storageKey","getSharedTansactionStorage","getOriginalUriStorage","getIdxResponseStorage","e","transactionStorage","getItem","key","transaction","setItem","val","setStorage","removeItem","getTokenStorage","getHttpCache","getLegacyPKCEStorage","getLegacyOAuthParamsStorage"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/StorageManager.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { TRANSACTION_STORAGE_NAME, SHARED_TRANSACTION_STORAGE_NAME, ORIGINAL_URI_STORAGE_NAME, IDX_RESPONSE_STORAGE_NAME, TOKEN_STORAGE_NAME, CACHE_STORAGE_NAME, PKCE_STORAGE_NAME, REDIRECT_OAUTH_PARAMS_NAME } from './constants.js';\nimport SavedObject from './SavedObject.js';\nimport { isBrowser } from './features.js';\nimport { warn } from './util/console.js';\nimport AuthSdkError from './errors/AuthSdkError.js';\n\nfunction logServerSideMemoryStorageWarning(options) {\n    if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n        warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n    }\n}\nclass StorageManager {\n    constructor(storageManagerOptions, cookieOptions, storageUtil) {\n        this.storageManagerOptions = storageManagerOptions;\n        this.cookieOptions = cookieOptions;\n        this.storageUtil = storageUtil;\n    }\n    getOptionsForSection(sectionName, overrideOptions) {\n        return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n    }\n    getStorage(options) {\n        options = Object.assign({}, this.cookieOptions, options);\n        if (options.storageProvider) {\n            return options.storageProvider;\n        }\n        let { storageType, storageTypes } = options;\n        if (storageType === 'sessionStorage') {\n            options.sessionCookie = true;\n        }\n        if (storageType && storageTypes) {\n            const idx = storageTypes.indexOf(storageType);\n            if (idx >= 0) {\n                storageTypes = storageTypes.slice(idx);\n                storageType = undefined;\n            }\n        }\n        if (!storageType) {\n            storageType = this.storageUtil.findStorageType(storageTypes);\n        }\n        return this.storageUtil.getStorageByType(storageType, options);\n    }\n    getTransactionStorage(options) {\n        options = this.getOptionsForSection('transaction', options);\n        logServerSideMemoryStorageWarning(options);\n        const storage = this.getStorage(options);\n        const storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n        return new SavedObject(storage, storageKey);\n    }\n    getSharedTansactionStorage(options) {\n        options = this.getOptionsForSection('shared-transaction', options);\n        logServerSideMemoryStorageWarning(options);\n        const storage = this.getStorage(options);\n        const storageKey = options.storageKey || SHARED_TRANSACTION_STORAGE_NAME;\n        return new SavedObject(storage, storageKey);\n    }\n    getOriginalUriStorage(options) {\n        options = this.getOptionsForSection('original-uri', options);\n        logServerSideMemoryStorageWarning(options);\n        const storage = this.getStorage(options);\n        const storageKey = options.storageKey || ORIGINAL_URI_STORAGE_NAME;\n        return new SavedObject(storage, storageKey);\n    }\n    getIdxResponseStorage(options) {\n        let storage;\n        if (isBrowser()) {\n            try {\n                storage = this.storageUtil.getStorageByType('memory', options);\n            }\n            catch (e) {\n                warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n            }\n        }\n        else {\n            const transactionStorage = this.getTransactionStorage(options);\n            if (transactionStorage) {\n                storage = {\n                    getItem: (key) => {\n                        const transaction = transactionStorage.getStorage();\n                        if (transaction && transaction[key]) {\n                            return transaction[key];\n                        }\n                        return null;\n                    },\n                    setItem: (key, val) => {\n                        const transaction = transactionStorage.getStorage();\n                        if (!transaction) {\n                            throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n                        }\n                        transaction[key] = val;\n                        transactionStorage.setStorage(transaction);\n                    },\n                    removeItem: (key) => {\n                        const transaction = transactionStorage.getStorage();\n                        if (!transaction) {\n                            return;\n                        }\n                        delete transaction[key];\n                        transactionStorage.setStorage(transaction);\n                    }\n                };\n            }\n        }\n        if (!storage) {\n            return null;\n        }\n        return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n    }\n    getTokenStorage(options) {\n        options = this.getOptionsForSection('token', options);\n        logServerSideMemoryStorageWarning(options);\n        const storage = this.getStorage(options);\n        const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n        return new SavedObject(storage, storageKey);\n    }\n    getHttpCache(options) {\n        options = this.getOptionsForSection('cache', options);\n        const storage = this.getStorage(options);\n        const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n        return new SavedObject(storage, storageKey);\n    }\n    getLegacyPKCEStorage(options) {\n        options = this.getOptionsForSection('legacy-pkce', options);\n        const storage = this.getStorage(options);\n        const storageKey = options.storageKey || PKCE_STORAGE_NAME;\n        return new SavedObject(storage, storageKey);\n    }\n    getLegacyOAuthParamsStorage(options) {\n        options = this.getOptionsForSection('legacy-oauth-params', options);\n        const storage = this.getStorage(options);\n        const storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n        return new SavedObject(storage, storageKey);\n    }\n}\n\nexport { StorageManager };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}