{"ast":null,"code":"import _Handlebars2 from '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport { View, loc, internal } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport fn from '../../util/CountryUtil.js';\nimport Enums from '../../util/Enums.js';\nimport FormController from '../util/FormController.js';\nimport FormType from '../util/FormType.js';\nimport Util from '../../util/Util.js';\nimport Footer from '../views/enroll-factors/Footer.js';\nimport PhoneTextBox from '../views/enroll-factors/PhoneTextBox.js';\nimport TextBox from '../views/shared/TextBox.js';\nlet {\n  Keys: Keys\n} = internal.util;\nconst EnrollCallAndSmsControllerwarningTemplate = View.extend({\n  className: 'okta-form-infobox-warning infobox infobox-warning login-timeout-warning',\n  attributes: {\n    'aria-live': 'polite'\n  },\n  template: _Handlebars2.template({\n    \"compiler\": [8, \">= 4.3.0\"],\n    \"main\": function (container, depth0, helpers, partials, data) {\n      var stack1,\n        helper,\n        lookupProperty = container.lookupProperty || function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n      return \"<span class=\\\"icon warning-16\\\"></span><p>\" + ((stack1 = (helper = (helper = lookupProperty(helpers, \"warning\") || (depth0 != null ? lookupProperty(depth0, \"warning\") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {\n        \"name\": \"warning\",\n        \"hash\": {},\n        \"data\": data,\n        \"loc\": {\n          \"start\": {\n            \"line\": 1,\n            \"column\": 40\n          },\n          \"end\": {\n            \"line\": 1,\n            \"column\": 53\n          }\n        }\n      }) : helper)) != null ? stack1 : \"\") + \"</p>\";\n    },\n    \"useData\": true\n  })\n});\nconst factorIdIsDefined = {\n  factorId: function (val) {\n    return !oktaUnderscore.isUndefined(val);\n  }\n};\nfunction isCallFactor(factorType) {\n  return factorType === 'call';\n}\nfunction getClassName(factorType) {\n  return isCallFactor(factorType) ? 'enroll-call' : 'enroll-sms';\n}\nfunction sendCode(e) {\n  if (Keys.isEnter(e)) {\n    e.stopPropagation();\n    e.preventDefault();\n    if (e.type === 'keyup' && e.data && e.data.model) {\n      e.data.model.sendCode();\n    }\n  }\n}\nvar EnrollCallAndSmsController = FormController.extend({\n  className: function () {\n    return getClassName(this.options.factorType);\n  },\n  Model: function () {\n    return {\n      props: {\n        phoneNumber: ['string', true],\n        phoneExtension: ['string', false],\n        lastEnrolledPhoneNumber: 'string',\n        passCode: ['string', true],\n        factorId: 'string'\n      },\n      local: {\n        countryCode: ['string', false, this.options.appState.get('userCountryCode')],\n        hasExistingPhones: 'boolean',\n        trapEnrollment: 'boolean',\n        ableToResend: 'boolean',\n        factorType: 'string',\n        skipPhoneValidation: 'boolean'\n      },\n      derived: {\n        countryCallingCode: {\n          deps: ['countryCode'],\n          fn: function (countryCode) {\n            return '+' + fn.getCallingCodeForCountry(countryCode);\n          }\n        },\n        fullPhoneNumber: {\n          deps: ['countryCallingCode', 'phoneNumber'],\n          fn: function (countryCallingCode, phoneNumber) {\n            return phoneNumber ? countryCallingCode + phoneNumber : '';\n          }\n        },\n        enrolled: {\n          deps: ['lastEnrolledPhoneNumber', 'fullPhoneNumber'],\n          fn: function (lastEnrolled, current) {\n            return lastEnrolled === current;\n          }\n        }\n      },\n      limitResending: function () {\n        this.set({\n          ableToResend: false\n        });\n        oktaUnderscore.delay(oktaUnderscore.bind(this.set, this), Enums.API_RATE_LIMIT, {\n          ableToResend: true\n        });\n      },\n      sendCode: function () {\n        const self = this;\n        const phoneNumber = this.get('fullPhoneNumber');\n        const phoneExtension = this.get('phoneExtension');\n        self.trigger('errors:clear');\n        if (!phoneNumber.length) {\n          self.trigger('invalid', self, {\n            phoneNumber: 'model.validation.field.blank'\n          });\n          return;\n        }\n        return this.doTransaction(function (transaction) {\n          const isMfaEnroll = transaction.status === 'MFA_ENROLL' || transaction.status === 'FACTOR_ENROLL';\n          const profileData = {\n            phoneNumber: phoneNumber,\n            updatePhone: isMfaEnroll ? self.get('hasExistingPhones') : true\n          };\n          if (isCallFactor(self.get('factorType'))) {\n            profileData['phoneExtension'] = phoneExtension;\n          }\n          if (self.get('skipPhoneValidation')) {\n            profileData['validatePhone'] = false;\n          }\n          const doEnroll = function (trans) {\n            const factor = oktaUnderscore.findWhere(trans.factors, {\n              factorType: self.get('factorType'),\n              provider: 'OKTA'\n            });\n            return factor.enroll({\n              profile: profileData\n            }).catch(function (error) {\n              if (error.errorCode === 'E0000098') {\n                // E0000098: \"This phone number is invalid.\"\n                self.set('skipPhoneValidation', true);\n                error.xhr.responseJSON.errorSummary = loc('enroll.sms.try_again', 'login');\n              }\n              throw error;\n            });\n          };\n          if (isMfaEnroll) {\n            return doEnroll(transaction);\n          } else {\n            // We must transition to MfaEnroll before updating the phone number\n            self.set('trapEnrollment', true);\n            return transaction.prev().then(doEnroll).then(function (trans) {\n              self.set('trapEnrollment', false);\n              return trans;\n            });\n          } // Rethrow errors so we can change state\n          // AFTER setting the new transaction\n        }, true).then(function () {\n          self.set('lastEnrolledPhoneNumber', phoneNumber);\n          self.limitResending();\n        }).catch(function () {\n          self.set('trapEnrollment', false);\n        });\n      },\n      resendCode: function () {\n        this.trigger('errors:clear');\n        this.limitResending();\n        return this.doTransaction(function (transaction) {\n          return transaction.resend(this.get('factorType'));\n        });\n      },\n      save: function () {\n        return this.doTransaction(function (transaction) {\n          return transaction.activate({\n            passCode: this.get('passCode')\n          });\n        });\n      }\n    };\n  },\n  Form: function () {\n    const factorType = this.options.factorType;\n    const isCall = isCallFactor(factorType);\n    const formTitle = loc(isCall ? 'enroll.call.setup' : 'enroll.sms.setup', 'login');\n    const formSubmit = loc(isCall ? 'mfa.call' : 'mfa.sendCode', 'login');\n    const formRetry = loc(isCall ? 'mfa.redial' : 'mfa.resendCode', 'login');\n    const formSubmitted = loc(isCall ? 'mfa.calling' : 'mfa.sent', 'login');\n    const numberFieldClassName = isCall ? 'enroll-call-phone' : 'enroll-sms-phone';\n    const buttonClassName = isCall ? 'call-request-button' : 'sms-request-button';\n    const formChildren = [FormType.Input({\n      name: 'countryCode',\n      type: 'select',\n      wide: true,\n      options: fn.getCountries()\n    }), FormType.Input({\n      label: loc('mfa.phoneNumber.placeholder', 'login'),\n      'label-top': true,\n      className: numberFieldClassName,\n      name: 'phoneNumber',\n      input: PhoneTextBox,\n      type: 'text',\n      render: function () {\n        this.$('input[name=\"phoneNumber\"]').off('keydown keyup', sendCode).keydown(sendCode).keyup({\n          model: this.model\n        }, sendCode);\n      }\n    })];\n    if (isCall) {\n      formChildren.push(FormType.Input({\n        label: loc('mfa.phoneNumber.ext.placeholder', 'login'),\n        'label-top': true,\n        className: 'enroll-call-extension',\n        name: 'phoneExtension',\n        input: TextBox,\n        type: 'text'\n      }));\n    }\n    formChildren.push(FormType.Button({\n      title: formSubmit,\n      attributes: {\n        'data-se': buttonClassName\n      },\n      className: 'button button-primary js-enroll-phone margin-top-30 ' + buttonClassName,\n      click: function () {\n        this.model.sendCode();\n      }\n    }), FormType.Button({\n      title: formRetry,\n      attributes: {\n        'data-se': buttonClassName\n      },\n      className: 'button js-enroll-phone margin-top-30 ' + buttonClassName,\n      click: function () {\n        this.model.resendCode();\n      },\n      initialize: function () {\n        this.$el.css({\n          display: 'none'\n        });\n        this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {\n          if (ableToResend) {\n            this.options.title = formRetry;\n            this.enable();\n          } else {\n            this.options.title = formSubmitted;\n            this.disable();\n          }\n          this.render();\n        });\n      }\n    }), FormType.Divider({\n      showWhen: factorIdIsDefined\n    }), FormType.Input({\n      label: loc('mfa.challenge.enterCode.placeholder', 'login'),\n      'label-top': true,\n      explain: Util.createInputExplain('mfa.challenge.enterCode.tooltip', 'mfa.challenge.enterCode.placeholder', 'login'),\n      'explain-top': true,\n      name: 'passCode',\n      input: TextBox,\n      type: 'tel',\n      showWhen: factorIdIsDefined\n    }), FormType.Toolbar({\n      noCancelButton: true,\n      save: loc('mfa.challenge.verify', 'login'),\n      showWhen: factorIdIsDefined\n    }));\n    return {\n      title: formTitle,\n      noButtonBar: true,\n      autoSave: true,\n      className: getClassName(factorType),\n      showWarning: function (msg) {\n        this.clearWarnings();\n        this.add(EnrollCallAndSmsControllerwarningTemplate, '.o-form-error-container', {\n          options: {\n            warning: msg\n          }\n        });\n      },\n      clearWarnings: function () {\n        this.$('.okta-form-infobox-warning').remove();\n      },\n      initialize: function () {\n        this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {\n          if (ableToResend) {\n            this.showWarning(loc(isCall ? 'factor.call.time.warning' : 'factor.sms.time.warning', 'login'));\n          } else {\n            this.clearWarnings();\n          }\n        });\n        this.listenTo(this.model, 'error errors:clear', function () {\n          this.clearWarnings();\n          this.clearErrors();\n        });\n        this.listenTo(this.model, 'change:enrolled', function () {\n          this.$('.js-enroll-phone').toggle();\n        });\n      },\n      formChildren: formChildren\n    };\n  },\n  Footer: Footer,\n  trapAuthResponse: function () {\n    if (this.options.appState.get('isMfaEnrollActivate')) {\n      this.model.set('factorId', this.options.appState.get('activatedFactorId'));\n      return true;\n    }\n    if (this.options.appState.get('isMfaEnroll') && this.model.get('trapEnrollment')) {\n      return true;\n    }\n  },\n  initialize: function () {\n    if (isCallFactor(this.options.factorType)) {\n      this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhonesForCall'));\n    } else {\n      this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhones'));\n    }\n    this.model.set('factorType', this.options.factorType);\n  }\n});\nexport { EnrollCallAndSmsController as default };","map":{"version":3,"names":["_Handlebars2","View","loc","internal","oktaUnderscore","fn","Enums","FormController","FormType","Util","Footer","PhoneTextBox","TextBox","Keys","util","EnrollCallAndSmsControllerwarningTemplate","extend","className","attributes","template","main","container","depth0","helpers","partials","data","stack1","helper","lookupProperty","parent","propertyName","Object","prototype","hasOwnProperty","call","undefined","hooks","helperMissing","nullContext","factorIdIsDefined","factorId","val","isUndefined","isCallFactor","factorType","getClassName","sendCode","e","isEnter","stopPropagation","preventDefault","type","model","EnrollCallAndSmsController","options","Model","props","phoneNumber","phoneExtension","lastEnrolledPhoneNumber","passCode","local","countryCode","appState","get","hasExistingPhones","trapEnrollment","ableToResend","skipPhoneValidation","derived","countryCallingCode","deps","getCallingCodeForCountry","fullPhoneNumber","enrolled","lastEnrolled","current","limitResending","set","delay","bind","API_RATE_LIMIT","self","trigger","length","doTransaction","transaction","isMfaEnroll","status","profileData","updatePhone","doEnroll","trans","factor","findWhere","factors","provider","enroll","profile","catch","error","errorCode","xhr","responseJSON","errorSummary","prev","then","resendCode","resend","save","activate","Form","isCall","formTitle","formSubmit","formRetry","formSubmitted","numberFieldClassName","buttonClassName","formChildren","Input","name","wide","getCountries","label","input","render","$","off","keydown","keyup","push","Button","title","click","initialize","$el","css","display","listenTo","enable","disable","Divider","showWhen","explain","createInputExplain","Toolbar","noCancelButton","noButtonBar","autoSave","showWarning","msg","clearWarnings","add","warning","remove","clearErrors","toggle","trapAuthResponse","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v1/controllers/EnrollCallAndSmsController.js"],"sourcesContent":["import _Handlebars2 from '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport { View, loc, internal } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport fn from '../../util/CountryUtil.js';\nimport Enums from '../../util/Enums.js';\nimport FormController from '../util/FormController.js';\nimport FormType from '../util/FormType.js';\nimport Util from '../../util/Util.js';\nimport Footer from '../views/enroll-factors/Footer.js';\nimport PhoneTextBox from '../views/enroll-factors/PhoneTextBox.js';\nimport TextBox from '../views/shared/TextBox.js';\n\nlet {\n  Keys: Keys\n} = internal.util;\nconst EnrollCallAndSmsControllerwarningTemplate = View.extend({\n  className: 'okta-form-infobox-warning infobox infobox-warning login-timeout-warning',\n  attributes: {\n    'aria-live': 'polite'\n  },\n  template: _Handlebars2.template({\n    \"compiler\": [8, \">= 4.3.0\"],\n    \"main\": function (container, depth0, helpers, partials, data) {\n      var stack1,\n          helper,\n          lookupProperty = container.lookupProperty || function (parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n\n        return undefined;\n      };\n\n      return \"<span class=\\\"icon warning-16\\\"></span><p>\" + ((stack1 = (helper = (helper = lookupProperty(helpers, \"warning\") || (depth0 != null ? lookupProperty(depth0, \"warning\") : depth0)) != null ? helper : container.hooks.helperMissing, typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, {\n        \"name\": \"warning\",\n        \"hash\": {},\n        \"data\": data,\n        \"loc\": {\n          \"start\": {\n            \"line\": 1,\n            \"column\": 40\n          },\n          \"end\": {\n            \"line\": 1,\n            \"column\": 53\n          }\n        }\n      }) : helper)) != null ? stack1 : \"\") + \"</p>\";\n    },\n    \"useData\": true\n  })\n});\nconst factorIdIsDefined = {\n  factorId: function (val) {\n    return !oktaUnderscore.isUndefined(val);\n  }\n};\n\nfunction isCallFactor(factorType) {\n  return factorType === 'call';\n}\n\nfunction getClassName(factorType) {\n  return isCallFactor(factorType) ? 'enroll-call' : 'enroll-sms';\n}\n\nfunction sendCode(e) {\n  if (Keys.isEnter(e)) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (e.type === 'keyup' && e.data && e.data.model) {\n      e.data.model.sendCode();\n    }\n  }\n}\n\nvar EnrollCallAndSmsController = FormController.extend({\n  className: function () {\n    return getClassName(this.options.factorType);\n  },\n  Model: function () {\n    return {\n      props: {\n        phoneNumber: ['string', true],\n        phoneExtension: ['string', false],\n        lastEnrolledPhoneNumber: 'string',\n        passCode: ['string', true],\n        factorId: 'string'\n      },\n      local: {\n        countryCode: ['string', false, this.options.appState.get('userCountryCode')],\n        hasExistingPhones: 'boolean',\n        trapEnrollment: 'boolean',\n        ableToResend: 'boolean',\n        factorType: 'string',\n        skipPhoneValidation: 'boolean'\n      },\n      derived: {\n        countryCallingCode: {\n          deps: ['countryCode'],\n          fn: function (countryCode) {\n            return '+' + fn.getCallingCodeForCountry(countryCode);\n          }\n        },\n        fullPhoneNumber: {\n          deps: ['countryCallingCode', 'phoneNumber'],\n          fn: function (countryCallingCode, phoneNumber) {\n            return phoneNumber ? countryCallingCode + phoneNumber : '';\n          }\n        },\n        enrolled: {\n          deps: ['lastEnrolledPhoneNumber', 'fullPhoneNumber'],\n          fn: function (lastEnrolled, current) {\n            return lastEnrolled === current;\n          }\n        }\n      },\n      limitResending: function () {\n        this.set({\n          ableToResend: false\n        });\n\n        oktaUnderscore.delay(oktaUnderscore.bind(this.set, this), Enums.API_RATE_LIMIT, {\n          ableToResend: true\n        });\n      },\n      sendCode: function () {\n        const self = this;\n        const phoneNumber = this.get('fullPhoneNumber');\n        const phoneExtension = this.get('phoneExtension');\n        self.trigger('errors:clear');\n\n        if (!phoneNumber.length) {\n          self.trigger('invalid', self, {\n            phoneNumber: 'model.validation.field.blank'\n          });\n          return;\n        }\n\n        return this.doTransaction(function (transaction) {\n          const isMfaEnroll = transaction.status === 'MFA_ENROLL' || transaction.status === 'FACTOR_ENROLL';\n          const profileData = {\n            phoneNumber: phoneNumber,\n            updatePhone: isMfaEnroll ? self.get('hasExistingPhones') : true\n          };\n\n          if (isCallFactor(self.get('factorType'))) {\n            profileData['phoneExtension'] = phoneExtension;\n          }\n\n          if (self.get('skipPhoneValidation')) {\n            profileData['validatePhone'] = false;\n          }\n\n          const doEnroll = function (trans) {\n            const factor = oktaUnderscore.findWhere(trans.factors, {\n              factorType: self.get('factorType'),\n              provider: 'OKTA'\n            });\n\n            return factor.enroll({\n              profile: profileData\n            }).catch(function (error) {\n              if (error.errorCode === 'E0000098') {\n                // E0000098: \"This phone number is invalid.\"\n                self.set('skipPhoneValidation', true);\n                error.xhr.responseJSON.errorSummary = loc('enroll.sms.try_again', 'login');\n              }\n\n              throw error;\n            });\n          };\n\n          if (isMfaEnroll) {\n            return doEnroll(transaction);\n          } else {\n            // We must transition to MfaEnroll before updating the phone number\n            self.set('trapEnrollment', true);\n            return transaction.prev().then(doEnroll).then(function (trans) {\n              self.set('trapEnrollment', false);\n              return trans;\n            });\n          } // Rethrow errors so we can change state\n          // AFTER setting the new transaction\n\n        }, true).then(function () {\n          self.set('lastEnrolledPhoneNumber', phoneNumber);\n          self.limitResending();\n        }).catch(function () {\n          self.set('trapEnrollment', false);\n        });\n      },\n      resendCode: function () {\n        this.trigger('errors:clear');\n        this.limitResending();\n        return this.doTransaction(function (transaction) {\n          return transaction.resend(this.get('factorType'));\n        });\n      },\n      save: function () {\n        return this.doTransaction(function (transaction) {\n          return transaction.activate({\n            passCode: this.get('passCode')\n          });\n        });\n      }\n    };\n  },\n  Form: function () {\n    const factorType = this.options.factorType;\n    const isCall = isCallFactor(factorType);\n    const formTitle = loc(isCall ? 'enroll.call.setup' : 'enroll.sms.setup', 'login');\n    const formSubmit = loc(isCall ? 'mfa.call' : 'mfa.sendCode', 'login');\n    const formRetry = loc(isCall ? 'mfa.redial' : 'mfa.resendCode', 'login');\n    const formSubmitted = loc(isCall ? 'mfa.calling' : 'mfa.sent', 'login');\n    const numberFieldClassName = isCall ? 'enroll-call-phone' : 'enroll-sms-phone';\n    const buttonClassName = isCall ? 'call-request-button' : 'sms-request-button';\n    const formChildren = [FormType.Input({\n      name: 'countryCode',\n      type: 'select',\n      wide: true,\n      options: fn.getCountries()\n    }), FormType.Input({\n      label: loc('mfa.phoneNumber.placeholder', 'login'),\n      'label-top': true,\n      className: numberFieldClassName,\n      name: 'phoneNumber',\n      input: PhoneTextBox,\n      type: 'text',\n      render: function () {\n        this.$('input[name=\"phoneNumber\"]').off('keydown keyup', sendCode).keydown(sendCode).keyup({\n          model: this.model\n        }, sendCode);\n      }\n    })];\n\n    if (isCall) {\n      formChildren.push(FormType.Input({\n        label: loc('mfa.phoneNumber.ext.placeholder', 'login'),\n        'label-top': true,\n        className: 'enroll-call-extension',\n        name: 'phoneExtension',\n        input: TextBox,\n        type: 'text'\n      }));\n    }\n\n    formChildren.push(FormType.Button({\n      title: formSubmit,\n      attributes: {\n        'data-se': buttonClassName\n      },\n      className: 'button button-primary js-enroll-phone margin-top-30 ' + buttonClassName,\n      click: function () {\n        this.model.sendCode();\n      }\n    }), FormType.Button({\n      title: formRetry,\n      attributes: {\n        'data-se': buttonClassName\n      },\n      className: 'button js-enroll-phone margin-top-30 ' + buttonClassName,\n      click: function () {\n        this.model.resendCode();\n      },\n      initialize: function () {\n        this.$el.css({\n          display: 'none'\n        });\n        this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {\n          if (ableToResend) {\n            this.options.title = formRetry;\n            this.enable();\n          } else {\n            this.options.title = formSubmitted;\n            this.disable();\n          }\n\n          this.render();\n        });\n      }\n    }), FormType.Divider({\n      showWhen: factorIdIsDefined\n    }), FormType.Input({\n      label: loc('mfa.challenge.enterCode.placeholder', 'login'),\n      'label-top': true,\n      explain: Util.createInputExplain('mfa.challenge.enterCode.tooltip', 'mfa.challenge.enterCode.placeholder', 'login'),\n      'explain-top': true,\n      name: 'passCode',\n      input: TextBox,\n      type: 'tel',\n      showWhen: factorIdIsDefined\n    }), FormType.Toolbar({\n      noCancelButton: true,\n      save: loc('mfa.challenge.verify', 'login'),\n      showWhen: factorIdIsDefined\n    }));\n    return {\n      title: formTitle,\n      noButtonBar: true,\n      autoSave: true,\n      className: getClassName(factorType),\n      showWarning: function (msg) {\n        this.clearWarnings();\n        this.add(EnrollCallAndSmsControllerwarningTemplate, '.o-form-error-container', {\n          options: {\n            warning: msg\n          }\n        });\n      },\n      clearWarnings: function () {\n        this.$('.okta-form-infobox-warning').remove();\n      },\n      initialize: function () {\n        this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {\n          if (ableToResend) {\n            this.showWarning(loc(isCall ? 'factor.call.time.warning' : 'factor.sms.time.warning', 'login'));\n          } else {\n            this.clearWarnings();\n          }\n        });\n        this.listenTo(this.model, 'error errors:clear', function () {\n          this.clearWarnings();\n          this.clearErrors();\n        });\n        this.listenTo(this.model, 'change:enrolled', function () {\n          this.$('.js-enroll-phone').toggle();\n        });\n      },\n      formChildren: formChildren\n    };\n  },\n  Footer: Footer,\n  trapAuthResponse: function () {\n    if (this.options.appState.get('isMfaEnrollActivate')) {\n      this.model.set('factorId', this.options.appState.get('activatedFactorId'));\n      return true;\n    }\n\n    if (this.options.appState.get('isMfaEnroll') && this.model.get('trapEnrollment')) {\n      return true;\n    }\n  },\n  initialize: function () {\n    if (isCallFactor(this.options.factorType)) {\n      this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhonesForCall'));\n    } else {\n      this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhones'));\n    }\n\n    this.model.set('factorType', this.options.factorType);\n  }\n});\n\nexport { EnrollCallAndSmsController as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}