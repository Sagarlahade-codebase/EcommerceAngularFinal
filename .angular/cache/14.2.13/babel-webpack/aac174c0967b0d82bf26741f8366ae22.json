{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { removeNils } from '../../util/object.js';\nimport { toQueryString } from '../../util/url.js';\nimport { httpRequest } from '../../http/request.js';\nfunction validateOptions(options) {\n  if (!options.clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n  }\n  if (!options.redirectUri) {\n    throw new AuthSdkError('The redirectUri passed to /authorize must also be passed to /token');\n  }\n  if (!options.authorizationCode && !options.interactionCode) {\n    throw new AuthSdkError('An authorization code (returned from /authorize) must be passed to /token');\n  }\n  if (!options.codeVerifier) {\n    throw new AuthSdkError('The \"codeVerifier\" (generated and saved by your app) must be passed to /token');\n  }\n}\nfunction getPostData(sdk, options) {\n  var params = removeNils({\n    'client_id': options.clientId,\n    'redirect_uri': options.redirectUri,\n    'grant_type': options.interactionCode ? 'interaction_code' : 'authorization_code',\n    'code_verifier': options.codeVerifier\n  });\n  if (options.interactionCode) {\n    params['interaction_code'] = options.interactionCode;\n  } else if (options.authorizationCode) {\n    params.code = options.authorizationCode;\n  }\n  const {\n    clientSecret\n  } = sdk.options;\n  if (clientSecret) {\n    params['client_secret'] = clientSecret;\n  }\n  return toQueryString(params).slice(1);\n}\nfunction postToTokenEndpoint(sdk, options, urls) {\n  validateOptions(options);\n  var data = getPostData(sdk, options);\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  return httpRequest(sdk, {\n    url: urls.tokenUrl,\n    method: 'POST',\n    args: data,\n    headers\n  });\n}\nfunction postRefreshToken(sdk, options, refreshToken) {\n  return httpRequest(sdk, {\n    url: refreshToken.tokenUrl,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    args: Object.entries({\n      client_id: options.clientId,\n      grant_type: 'refresh_token',\n      scope: refreshToken.scopes.join(' '),\n      refresh_token: refreshToken.refreshToken\n    }).map(function ([name, value]) {\n      return name + '=' + encodeURIComponent(value);\n    }).join('&')\n  });\n}\nexport { postRefreshToken, postToTokenEndpoint };","map":{"version":3,"names":["AuthSdkError","removeNils","toQueryString","httpRequest","validateOptions","options","clientId","redirectUri","authorizationCode","interactionCode","codeVerifier","getPostData","sdk","params","code","clientSecret","slice","postToTokenEndpoint","urls","data","headers","url","tokenUrl","method","args","postRefreshToken","refreshToken","Object","entries","client_id","grant_type","scope","scopes","join","refresh_token","map","name","value","encodeURIComponent"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/endpoints/token.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { removeNils } from '../../util/object.js';\nimport { toQueryString } from '../../util/url.js';\nimport { httpRequest } from '../../http/request.js';\n\nfunction validateOptions(options) {\n    if (!options.clientId) {\n        throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n    }\n    if (!options.redirectUri) {\n        throw new AuthSdkError('The redirectUri passed to /authorize must also be passed to /token');\n    }\n    if (!options.authorizationCode && !options.interactionCode) {\n        throw new AuthSdkError('An authorization code (returned from /authorize) must be passed to /token');\n    }\n    if (!options.codeVerifier) {\n        throw new AuthSdkError('The \"codeVerifier\" (generated and saved by your app) must be passed to /token');\n    }\n}\nfunction getPostData(sdk, options) {\n    var params = removeNils({\n        'client_id': options.clientId,\n        'redirect_uri': options.redirectUri,\n        'grant_type': options.interactionCode ? 'interaction_code' : 'authorization_code',\n        'code_verifier': options.codeVerifier\n    });\n    if (options.interactionCode) {\n        params['interaction_code'] = options.interactionCode;\n    }\n    else if (options.authorizationCode) {\n        params.code = options.authorizationCode;\n    }\n    const { clientSecret } = sdk.options;\n    if (clientSecret) {\n        params['client_secret'] = clientSecret;\n    }\n    return toQueryString(params).slice(1);\n}\nfunction postToTokenEndpoint(sdk, options, urls) {\n    validateOptions(options);\n    var data = getPostData(sdk, options);\n    const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    return httpRequest(sdk, {\n        url: urls.tokenUrl,\n        method: 'POST',\n        args: data,\n        headers\n    });\n}\nfunction postRefreshToken(sdk, options, refreshToken) {\n    return httpRequest(sdk, {\n        url: refreshToken.tokenUrl,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        args: Object.entries({\n            client_id: options.clientId,\n            grant_type: 'refresh_token',\n            scope: refreshToken.scopes.join(' '),\n            refresh_token: refreshToken.refreshToken,\n        }).map(function ([name, value]) {\n            return name + '=' + encodeURIComponent(value);\n        }).join('&'),\n    });\n}\n\nexport { postRefreshToken, postToTokenEndpoint };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}