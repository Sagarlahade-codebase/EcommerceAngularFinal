{"ast":null,"code":"import oktaUnderscore from '../../../util/underscore-wrapper.js';\nimport ButtonFactory from '../../../util/ButtonFactory.js';\nimport BaseView from '../../BaseView.js';\nimport BaseInput from '../BaseInput.js';\nfunction countInputs(inputs) {\n  return oktaUnderscore.filter(inputs || [], function (input) {\n    return !oktaUnderscore.contains(['label', 'button', 'select'], input.type);\n  }).length;\n}\nconst InputGroupLabelInput = BaseInput.extend({\n  tagName: 'span',\n  initialize: function () {\n    this.$el.text(this.getModelValue());\n  },\n  editMode: function () {\n    this.toggle(true);\n  },\n  readMode: function () {\n    this.toggle(false);\n  },\n  getModelValue: function () {\n    return this.options.label;\n  },\n  toggle: function (isEditMode) {\n    this.$el.toggleClass('o-form-label-inline', isEditMode);\n    this.$el.toggleClass('o-form-control', !isEditMode);\n  },\n  focus: oktaUnderscore.noop\n});\nfunction createButtonInput(options) {\n  return ButtonFactory.create(oktaUnderscore.defaults({\n    getReadModeString: oktaUnderscore.constant(' '),\n    focus: oktaUnderscore.noop\n  }, oktaUnderscore.pick(options, 'click', 'title', 'href', 'icon')));\n}\nconst InputGroupInputGroupView = BaseView.extend({\n  getParams: BaseInput.prototype.getParams,\n  getParam: BaseInput.prototype.getParam,\n  className: function () {\n    let className; // Allows views to group multiple inputs under one label without any of the other\n    // styling/rendering changes that come with using a group input\n\n    if (this.getParam('noBaseClasses')) {\n      return '';\n    }\n    if (this.getParam('display') === 'text') {\n      className = 'o-form-input-group-subtle';\n    } else {\n      className = 'o-form-input-group';\n    }\n    if (countInputs(this.getParam('inputs')) > 1) {\n      className += ' o-form-input-group-2';\n    }\n    return className;\n  },\n  initialize: function () {\n    oktaUnderscore.each(this.getParam('inputs'), function (input) {\n      switch (input.type) {\n        case 'label':\n          this.add(InputGroupLabelInput, {\n            options: input\n          });\n          break;\n        case 'button':\n          this.add(createButtonInput(input));\n          break;\n        default:\n          input = oktaUnderscore.defaults({\n            model: this.model,\n            params: oktaUnderscore.extend({\n              autoWidth: true\n            }, input.params || {})\n          }, input);\n          this.add(this.getParams().create(input));\n      }\n    }, this);\n  },\n  focus: function () {\n    this.first().focus();\n  }\n});\nvar InputGroup = BaseInput.extend({\n  constructor: function (options) {\n    this.inputGroupView = new InputGroupInputGroupView(options);\n    BaseInput.apply(this, arguments);\n  },\n  editMode: function () {\n    this.inputGroupView.remove();\n    this.inputGroupView = new InputGroupInputGroupView(this.options);\n    this.$el.html(this.inputGroupView.render().el);\n  },\n  readMode: function () {\n    // Allows the user to use to the default \"read mode\" of the child inputs instead of\n    // rendering a single read mode string for all the child inputs\n    if (this.getParam('useChildInputsReadMode')) {\n      this.editMode();\n    } else {\n      BaseInput.prototype.readMode.apply(this, arguments);\n    }\n  },\n  toStringValue: function () {\n    const strings = this.inputGroupView.map(function (input) {\n      return input.getReadModeString();\n    });\n    return strings.length && oktaUnderscore.every(strings) ? strings.join(' ') : ' ';\n  },\n  focus: function () {\n    this.inputGroupView.focus();\n  }\n}, {\n  // test hooks\n  LabelInput: InputGroupLabelInput,\n  InputGroupView: InputGroupInputGroupView\n});\nexport { InputGroup as default };","map":{"version":3,"names":["oktaUnderscore","ButtonFactory","BaseView","BaseInput","countInputs","inputs","filter","input","contains","type","length","InputGroupLabelInput","extend","tagName","initialize","$el","text","getModelValue","editMode","toggle","readMode","options","label","isEditMode","toggleClass","focus","noop","createButtonInput","create","defaults","getReadModeString","constant","pick","InputGroupInputGroupView","getParams","prototype","getParam","className","each","add","model","params","autoWidth","first","InputGroup","constructor","inputGroupView","apply","arguments","remove","html","render","el","toStringValue","strings","map","every","join","LabelInput","InputGroupView","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/@okta/courage-dist/esm/src/courage/views/forms/inputs/InputGroup.js"],"sourcesContent":["import oktaUnderscore from '../../../util/underscore-wrapper.js';\nimport ButtonFactory from '../../../util/ButtonFactory.js';\nimport BaseView from '../../BaseView.js';\nimport BaseInput from '../BaseInput.js';\n\nfunction countInputs(inputs) {\n  return oktaUnderscore.filter(inputs || [], function (input) {\n    return !oktaUnderscore.contains(['label', 'button', 'select'], input.type);\n  }).length;\n}\n\nconst InputGroupLabelInput = BaseInput.extend({\n  tagName: 'span',\n  initialize: function () {\n    this.$el.text(this.getModelValue());\n  },\n  editMode: function () {\n    this.toggle(true);\n  },\n  readMode: function () {\n    this.toggle(false);\n  },\n  getModelValue: function () {\n    return this.options.label;\n  },\n  toggle: function (isEditMode) {\n    this.$el.toggleClass('o-form-label-inline', isEditMode);\n    this.$el.toggleClass('o-form-control', !isEditMode);\n  },\n  focus: oktaUnderscore.noop\n});\n\nfunction createButtonInput(options) {\n  return ButtonFactory.create(oktaUnderscore.defaults({\n    getReadModeString: oktaUnderscore.constant(' '),\n    focus: oktaUnderscore.noop\n  }, oktaUnderscore.pick(options, 'click', 'title', 'href', 'icon')));\n}\n\nconst InputGroupInputGroupView = BaseView.extend({\n  getParams: BaseInput.prototype.getParams,\n  getParam: BaseInput.prototype.getParam,\n  className: function () {\n    let className; // Allows views to group multiple inputs under one label without any of the other\n    // styling/rendering changes that come with using a group input\n\n    if (this.getParam('noBaseClasses')) {\n      return '';\n    }\n\n    if (this.getParam('display') === 'text') {\n      className = 'o-form-input-group-subtle';\n    } else {\n      className = 'o-form-input-group';\n    }\n\n    if (countInputs(this.getParam('inputs')) > 1) {\n      className += ' o-form-input-group-2';\n    }\n\n    return className;\n  },\n  initialize: function () {\n    oktaUnderscore.each(this.getParam('inputs'), function (input) {\n      switch (input.type) {\n        case 'label':\n          this.add(InputGroupLabelInput, {\n            options: input\n          });\n          break;\n\n        case 'button':\n          this.add(createButtonInput(input));\n          break;\n\n        default:\n          input = oktaUnderscore.defaults({\n            model: this.model,\n            params: oktaUnderscore.extend({\n              autoWidth: true\n            }, input.params || {})\n          }, input);\n          this.add(this.getParams().create(input));\n      }\n    }, this);\n  },\n  focus: function () {\n    this.first().focus();\n  }\n});\nvar InputGroup = BaseInput.extend({\n  constructor: function (options) {\n    this.inputGroupView = new InputGroupInputGroupView(options);\n    BaseInput.apply(this, arguments);\n  },\n  editMode: function () {\n    this.inputGroupView.remove();\n    this.inputGroupView = new InputGroupInputGroupView(this.options);\n    this.$el.html(this.inputGroupView.render().el);\n  },\n  readMode: function () {\n    // Allows the user to use to the default \"read mode\" of the child inputs instead of\n    // rendering a single read mode string for all the child inputs\n    if (this.getParam('useChildInputsReadMode')) {\n      this.editMode();\n    } else {\n      BaseInput.prototype.readMode.apply(this, arguments);\n    }\n  },\n  toStringValue: function () {\n    const strings = this.inputGroupView.map(function (input) {\n      return input.getReadModeString();\n    });\n    return strings.length && oktaUnderscore.every(strings) ? strings.join(' ') : ' ';\n  },\n  focus: function () {\n    this.inputGroupView.focus();\n  }\n}, {\n  // test hooks\n  LabelInput: InputGroupLabelInput,\n  InputGroupView: InputGroupInputGroupView\n});\n\nexport { InputGroup as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}