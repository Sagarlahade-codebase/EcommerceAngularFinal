{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getWellKnown } from '../endpoints/well-known.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { getDefaultTokenParams } from './defaultTokenParams.js';\nimport { DEFAULT_CODE_CHALLENGE_METHOD } from '../../constants.js';\nimport PKCE from './pkce.js';\nfunction assertPKCESupport(sdk) {\n  if (!sdk.features.isPKCESupported()) {\n    var errorMessage = 'PKCE requires a modern browser with encryption support running in a secure context.';\n    if (!sdk.features.isHTTPS()) {\n      errorMessage += '\\nThe current page is not being served with HTTPS protocol. PKCE requires secure HTTPS protocol.';\n    }\n    if (!sdk.features.hasTextEncoder()) {\n      errorMessage += '\\n\"TextEncoder\" is not defined. To use PKCE, you may need to include a polyfill/shim for this browser.';\n    }\n    throw new AuthSdkError(errorMessage);\n  }\n}\nfunction validateCodeChallengeMethod(_x, _x2) {\n  return _validateCodeChallengeMethod.apply(this, arguments);\n}\nfunction _validateCodeChallengeMethod() {\n  _validateCodeChallengeMethod = _asyncToGenerator(function* (sdk, codeChallengeMethod) {\n    codeChallengeMethod = codeChallengeMethod || sdk.options.codeChallengeMethod || DEFAULT_CODE_CHALLENGE_METHOD;\n    const wellKnownResponse = yield getWellKnown(sdk);\n    var methods = wellKnownResponse['code_challenge_methods_supported'] || [];\n    if (methods.indexOf(codeChallengeMethod) === -1) {\n      throw new AuthSdkError('Invalid code_challenge_method');\n    }\n    return codeChallengeMethod;\n  });\n  return _validateCodeChallengeMethod.apply(this, arguments);\n}\nfunction preparePKCE(_x3, _x4) {\n  return _preparePKCE.apply(this, arguments);\n}\nfunction _preparePKCE() {\n  _preparePKCE = _asyncToGenerator(function* (sdk, tokenParams) {\n    let {\n      codeVerifier,\n      codeChallenge,\n      codeChallengeMethod\n    } = tokenParams;\n    codeChallenge = codeChallenge || sdk.options.codeChallenge;\n    if (!codeChallenge) {\n      assertPKCESupport(sdk);\n      codeVerifier = codeVerifier || PKCE.generateVerifier();\n      codeChallenge = yield PKCE.computeChallenge(codeVerifier);\n    }\n    codeChallengeMethod = yield validateCodeChallengeMethod(sdk, codeChallengeMethod);\n    tokenParams = Object.assign(Object.assign({}, tokenParams), {\n      responseType: 'code',\n      codeVerifier,\n      codeChallenge,\n      codeChallengeMethod\n    });\n    return tokenParams;\n  });\n  return _preparePKCE.apply(this, arguments);\n}\nfunction prepareTokenParams(_x5) {\n  return _prepareTokenParams.apply(this, arguments);\n}\nfunction _prepareTokenParams() {\n  _prepareTokenParams = _asyncToGenerator(function* (sdk, tokenParams = {}) {\n    const defaults = getDefaultTokenParams(sdk);\n    tokenParams = Object.assign(Object.assign({}, defaults), tokenParams);\n    if (tokenParams.pkce === false) {\n      return tokenParams;\n    }\n    return preparePKCE(sdk, tokenParams);\n  });\n  return _prepareTokenParams.apply(this, arguments);\n}\nexport { assertPKCESupport, preparePKCE, prepareTokenParams, validateCodeChallengeMethod };","map":{"version":3,"names":["getWellKnown","AuthSdkError","getDefaultTokenParams","DEFAULT_CODE_CHALLENGE_METHOD","PKCE","assertPKCESupport","sdk","features","isPKCESupported","errorMessage","isHTTPS","hasTextEncoder","validateCodeChallengeMethod","_x","_x2","_validateCodeChallengeMethod","apply","arguments","_asyncToGenerator","codeChallengeMethod","options","wellKnownResponse","methods","indexOf","preparePKCE","_x3","_x4","_preparePKCE","tokenParams","codeVerifier","codeChallenge","generateVerifier","computeChallenge","Object","assign","responseType","prepareTokenParams","_x5","_prepareTokenParams","defaults","pkce"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/util/prepareTokenParams.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getWellKnown } from '../endpoints/well-known.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { getDefaultTokenParams } from './defaultTokenParams.js';\nimport { DEFAULT_CODE_CHALLENGE_METHOD } from '../../constants.js';\nimport PKCE from './pkce.js';\n\nfunction assertPKCESupport(sdk) {\n    if (!sdk.features.isPKCESupported()) {\n        var errorMessage = 'PKCE requires a modern browser with encryption support running in a secure context.';\n        if (!sdk.features.isHTTPS()) {\n            errorMessage += '\\nThe current page is not being served with HTTPS protocol. PKCE requires secure HTTPS protocol.';\n        }\n        if (!sdk.features.hasTextEncoder()) {\n            errorMessage += '\\n\"TextEncoder\" is not defined. To use PKCE, you may need to include a polyfill/shim for this browser.';\n        }\n        throw new AuthSdkError(errorMessage);\n    }\n}\nasync function validateCodeChallengeMethod(sdk, codeChallengeMethod) {\n    codeChallengeMethod = codeChallengeMethod || sdk.options.codeChallengeMethod || DEFAULT_CODE_CHALLENGE_METHOD;\n    const wellKnownResponse = await getWellKnown(sdk);\n    var methods = wellKnownResponse['code_challenge_methods_supported'] || [];\n    if (methods.indexOf(codeChallengeMethod) === -1) {\n        throw new AuthSdkError('Invalid code_challenge_method');\n    }\n    return codeChallengeMethod;\n}\nasync function preparePKCE(sdk, tokenParams) {\n    let { codeVerifier, codeChallenge, codeChallengeMethod } = tokenParams;\n    codeChallenge = codeChallenge || sdk.options.codeChallenge;\n    if (!codeChallenge) {\n        assertPKCESupport(sdk);\n        codeVerifier = codeVerifier || PKCE.generateVerifier();\n        codeChallenge = await PKCE.computeChallenge(codeVerifier);\n    }\n    codeChallengeMethod = await validateCodeChallengeMethod(sdk, codeChallengeMethod);\n    tokenParams = Object.assign(Object.assign({}, tokenParams), { responseType: 'code',\n        codeVerifier,\n        codeChallenge,\n        codeChallengeMethod });\n    return tokenParams;\n}\nasync function prepareTokenParams(sdk, tokenParams = {}) {\n    const defaults = getDefaultTokenParams(sdk);\n    tokenParams = Object.assign(Object.assign({}, defaults), tokenParams);\n    if (tokenParams.pkce === false) {\n        return tokenParams;\n    }\n    return preparePKCE(sdk, tokenParams);\n}\n\nexport { assertPKCESupport, preparePKCE, prepareTokenParams, validateCodeChallengeMethod };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}