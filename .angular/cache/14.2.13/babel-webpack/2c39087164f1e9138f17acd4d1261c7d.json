{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { addPostMessageListener, loadFrame } from './util/browser.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { prepareTokenParams } from './util/prepareTokenParams.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nimport { buildAuthorizeParams } from './endpoints/authorize.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nfunction getToken(sdk, options) {\n  if (arguments.length > 2) {\n    return Promise.reject(new AuthSdkError('As of version 3.0, \"getToken\" takes only a single set of options'));\n  }\n  options = options || {};\n  const popupWindow = options.popupWindow;\n  options.popupWindow = undefined;\n  return prepareTokenParams(sdk, options).then(function (tokenParams) {\n    var sessionTokenOverrides = {\n      prompt: 'none',\n      responseMode: 'okta_post_message',\n      display: null\n    };\n    var idpOverrides = {\n      display: 'popup'\n    };\n    if (options.sessionToken) {\n      Object.assign(tokenParams, sessionTokenOverrides);\n    } else if (options.idp) {\n      Object.assign(tokenParams, idpOverrides);\n    }\n    var requestUrl, endpoint, urls;\n    urls = getOAuthUrls(sdk, tokenParams);\n    endpoint = options.codeVerifier ? urls.tokenUrl : urls.authorizeUrl;\n    requestUrl = endpoint + buildAuthorizeParams(tokenParams);\n    var flowType;\n    if (tokenParams.sessionToken || tokenParams.display === null) {\n      flowType = 'IFRAME';\n    } else if (tokenParams.display === 'popup') {\n      flowType = 'POPUP';\n    } else {\n      flowType = 'IMPLICIT';\n    }\n    switch (flowType) {\n      case 'IFRAME':\n        var iframePromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);\n        var iframeEl = loadFrame(requestUrl);\n        return iframePromise.then(function (res) {\n          return handleOAuthResponse(sdk, tokenParams, res, urls);\n        }).finally(function () {\n          var _a;\n          if (document.body.contains(iframeEl)) {\n            (_a = iframeEl.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(iframeEl);\n          }\n        });\n      case 'POPUP':\n        var oauthPromise;\n        if (tokenParams.responseMode === 'okta_post_message') {\n          if (!sdk.features.isPopupPostMessageSupported()) {\n            throw new AuthSdkError('This browser doesn\\'t have full postMessage support');\n          }\n          oauthPromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);\n        }\n        if (popupWindow) {\n          popupWindow.location.assign(requestUrl);\n        }\n        var popupPromise = new Promise(function (resolve, reject) {\n          var closePoller = setInterval(function () {\n            if (!popupWindow || popupWindow.closed) {\n              clearInterval(closePoller);\n              reject(new AuthSdkError('Unable to parse OAuth flow response'));\n            }\n          }, 100);\n          oauthPromise.then(function (res) {\n            clearInterval(closePoller);\n            resolve(res);\n          }).catch(function (err) {\n            clearInterval(closePoller);\n            reject(err);\n          });\n        });\n        return popupPromise.then(function (res) {\n          return handleOAuthResponse(sdk, tokenParams, res, urls);\n        }).finally(function () {\n          if (popupWindow && !popupWindow.closed) {\n            popupWindow.close();\n          }\n        });\n      default:\n        throw new AuthSdkError('The full page redirect flow is not supported');\n    }\n  });\n}\nexport { getToken };","map":{"version":3,"names":["addPostMessageListener","loadFrame","getOAuthUrls","AuthSdkError","prepareTokenParams","buildAuthorizeParams","handleOAuthResponse","getToken","sdk","options","arguments","length","Promise","reject","popupWindow","undefined","then","tokenParams","sessionTokenOverrides","prompt","responseMode","display","idpOverrides","sessionToken","Object","assign","idp","requestUrl","endpoint","urls","codeVerifier","tokenUrl","authorizeUrl","flowType","iframePromise","timeout","state","iframeEl","res","finally","_a","document","body","contains","parentElement","removeChild","oauthPromise","features","isPopupPostMessageSupported","location","popupPromise","resolve","closePoller","setInterval","closed","clearInterval","catch","err","close"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/getToken.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { addPostMessageListener, loadFrame } from './util/browser.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { prepareTokenParams } from './util/prepareTokenParams.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nimport { buildAuthorizeParams } from './endpoints/authorize.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\n\nfunction getToken(sdk, options) {\n    if (arguments.length > 2) {\n        return Promise.reject(new AuthSdkError('As of version 3.0, \"getToken\" takes only a single set of options'));\n    }\n    options = options || {};\n    const popupWindow = options.popupWindow;\n    options.popupWindow = undefined;\n    return prepareTokenParams(sdk, options)\n        .then(function (tokenParams) {\n        var sessionTokenOverrides = {\n            prompt: 'none',\n            responseMode: 'okta_post_message',\n            display: null\n        };\n        var idpOverrides = {\n            display: 'popup'\n        };\n        if (options.sessionToken) {\n            Object.assign(tokenParams, sessionTokenOverrides);\n        }\n        else if (options.idp) {\n            Object.assign(tokenParams, idpOverrides);\n        }\n        var requestUrl, endpoint, urls;\n        urls = getOAuthUrls(sdk, tokenParams);\n        endpoint = options.codeVerifier ? urls.tokenUrl : urls.authorizeUrl;\n        requestUrl = endpoint + buildAuthorizeParams(tokenParams);\n        var flowType;\n        if (tokenParams.sessionToken || tokenParams.display === null) {\n            flowType = 'IFRAME';\n        }\n        else if (tokenParams.display === 'popup') {\n            flowType = 'POPUP';\n        }\n        else {\n            flowType = 'IMPLICIT';\n        }\n        switch (flowType) {\n            case 'IFRAME':\n                var iframePromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);\n                var iframeEl = loadFrame(requestUrl);\n                return iframePromise\n                    .then(function (res) {\n                    return handleOAuthResponse(sdk, tokenParams, res, urls);\n                })\n                    .finally(function () {\n                    var _a;\n                    if (document.body.contains(iframeEl)) {\n                        (_a = iframeEl.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(iframeEl);\n                    }\n                });\n            case 'POPUP':\n                var oauthPromise;\n                if (tokenParams.responseMode === 'okta_post_message') {\n                    if (!sdk.features.isPopupPostMessageSupported()) {\n                        throw new AuthSdkError('This browser doesn\\'t have full postMessage support');\n                    }\n                    oauthPromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);\n                }\n                if (popupWindow) {\n                    popupWindow.location.assign(requestUrl);\n                }\n                var popupPromise = new Promise(function (resolve, reject) {\n                    var closePoller = setInterval(function () {\n                        if (!popupWindow || popupWindow.closed) {\n                            clearInterval(closePoller);\n                            reject(new AuthSdkError('Unable to parse OAuth flow response'));\n                        }\n                    }, 100);\n                    oauthPromise\n                        .then(function (res) {\n                        clearInterval(closePoller);\n                        resolve(res);\n                    })\n                        .catch(function (err) {\n                        clearInterval(closePoller);\n                        reject(err);\n                    });\n                });\n                return popupPromise\n                    .then(function (res) {\n                    return handleOAuthResponse(sdk, tokenParams, res, urls);\n                })\n                    .finally(function () {\n                    if (popupWindow && !popupWindow.closed) {\n                        popupWindow.close();\n                    }\n                });\n            default:\n                throw new AuthSdkError('The full page redirect flow is not supported');\n        }\n    });\n}\n\nexport { getToken };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,sBAAsB,EAAEC,SAAS,QAAQ,mBAAmB;AACrE,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,OAAO,qBAAqB;AAC5B,OAAO,uBAAuB;AAC9B,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D,SAASC,QAAQA,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC5B,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACtB,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIV,YAAY,CAAC,kEAAkE,CAAC,CAAC;EAC/G;EACAM,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,MAAMK,WAAW,GAAGL,OAAO,CAACK,WAAW;EACvCL,OAAO,CAACK,WAAW,GAAGC,SAAS;EAC/B,OAAOX,kBAAkB,CAACI,GAAG,EAAEC,OAAO,CAAC,CAClCO,IAAI,CAAC,UAAUC,WAAW,EAAE;IAC7B,IAAIC,qBAAqB,GAAG;MACxBC,MAAM,EAAE,MAAM;MACdC,YAAY,EAAE,mBAAmB;MACjCC,OAAO,EAAE;IACb,CAAC;IACD,IAAIC,YAAY,GAAG;MACfD,OAAO,EAAE;IACb,CAAC;IACD,IAAIZ,OAAO,CAACc,YAAY,EAAE;MACtBC,MAAM,CAACC,MAAM,CAACR,WAAW,EAAEC,qBAAqB,CAAC;IACrD,CAAC,MACI,IAAIT,OAAO,CAACiB,GAAG,EAAE;MAClBF,MAAM,CAACC,MAAM,CAACR,WAAW,EAAEK,YAAY,CAAC;IAC5C;IACA,IAAIK,UAAU,EAAEC,QAAQ,EAAEC,IAAI;IAC9BA,IAAI,GAAG3B,YAAY,CAACM,GAAG,EAAES,WAAW,CAAC;IACrCW,QAAQ,GAAGnB,OAAO,CAACqB,YAAY,GAAGD,IAAI,CAACE,QAAQ,GAAGF,IAAI,CAACG,YAAY;IACnEL,UAAU,GAAGC,QAAQ,GAAGvB,oBAAoB,CAACY,WAAW,CAAC;IACzD,IAAIgB,QAAQ;IACZ,IAAIhB,WAAW,CAACM,YAAY,IAAIN,WAAW,CAACI,OAAO,KAAK,IAAI,EAAE;MAC1DY,QAAQ,GAAG,QAAQ;IACvB,CAAC,MACI,IAAIhB,WAAW,CAACI,OAAO,KAAK,OAAO,EAAE;MACtCY,QAAQ,GAAG,OAAO;IACtB,CAAC,MACI;MACDA,QAAQ,GAAG,UAAU;IACzB;IACA,QAAQA,QAAQ;MACZ,KAAK,QAAQ;QACT,IAAIC,aAAa,GAAGlC,sBAAsB,CAACQ,GAAG,EAAEC,OAAO,CAAC0B,OAAO,EAAElB,WAAW,CAACmB,KAAK,CAAC;QACnF,IAAIC,QAAQ,GAAGpC,SAAS,CAAC0B,UAAU,CAAC;QACpC,OAAOO,aAAa,CACflB,IAAI,CAAC,UAAUsB,GAAG,EAAE;UACrB,OAAOhC,mBAAmB,CAACE,GAAG,EAAES,WAAW,EAAEqB,GAAG,EAAET,IAAI,CAAC;QAC3D,CAAC,CAAC,CACGU,OAAO,CAAC,YAAY;UACrB,IAAIC,EAAE;UACN,IAAIC,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAACN,QAAQ,CAAC,EAAE;YAClC,CAACG,EAAE,GAAGH,QAAQ,CAACO,aAAa,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,WAAW,CAACR,QAAQ,CAAC;UAC/F;QACJ,CAAC,CAAC;MACN,KAAK,OAAO;QACR,IAAIS,YAAY;QAChB,IAAI7B,WAAW,CAACG,YAAY,KAAK,mBAAmB,EAAE;UAClD,IAAI,CAACZ,GAAG,CAACuC,QAAQ,CAACC,2BAA2B,CAAC,CAAC,EAAE;YAC7C,MAAM,IAAI7C,YAAY,CAAC,qDAAqD,CAAC;UACjF;UACA2C,YAAY,GAAG9C,sBAAsB,CAACQ,GAAG,EAAEC,OAAO,CAAC0B,OAAO,EAAElB,WAAW,CAACmB,KAAK,CAAC;QAClF;QACA,IAAItB,WAAW,EAAE;UACbA,WAAW,CAACmC,QAAQ,CAACxB,MAAM,CAACE,UAAU,CAAC;QAC3C;QACA,IAAIuB,YAAY,GAAG,IAAItC,OAAO,CAAC,UAAUuC,OAAO,EAAEtC,MAAM,EAAE;UACtD,IAAIuC,WAAW,GAAGC,WAAW,CAAC,YAAY;YACtC,IAAI,CAACvC,WAAW,IAAIA,WAAW,CAACwC,MAAM,EAAE;cACpCC,aAAa,CAACH,WAAW,CAAC;cAC1BvC,MAAM,CAAC,IAAIV,YAAY,CAAC,qCAAqC,CAAC,CAAC;YACnE;UACJ,CAAC,EAAE,GAAG,CAAC;UACP2C,YAAY,CACP9B,IAAI,CAAC,UAAUsB,GAAG,EAAE;YACrBiB,aAAa,CAACH,WAAW,CAAC;YAC1BD,OAAO,CAACb,GAAG,CAAC;UAChB,CAAC,CAAC,CACGkB,KAAK,CAAC,UAAUC,GAAG,EAAE;YACtBF,aAAa,CAACH,WAAW,CAAC;YAC1BvC,MAAM,CAAC4C,GAAG,CAAC;UACf,CAAC,CAAC;QACN,CAAC,CAAC;QACF,OAAOP,YAAY,CACdlC,IAAI,CAAC,UAAUsB,GAAG,EAAE;UACrB,OAAOhC,mBAAmB,CAACE,GAAG,EAAES,WAAW,EAAEqB,GAAG,EAAET,IAAI,CAAC;QAC3D,CAAC,CAAC,CACGU,OAAO,CAAC,YAAY;UACrB,IAAIzB,WAAW,IAAI,CAACA,WAAW,CAACwC,MAAM,EAAE;YACpCxC,WAAW,CAAC4C,KAAK,CAAC,CAAC;UACvB;QACJ,CAAC,CAAC;MACN;QACI,MAAM,IAAIvD,YAAY,CAAC,8CAA8C,CAAC;IAC9E;EACJ,CAAC,CAAC;AACN;AAEA,SAASI,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}