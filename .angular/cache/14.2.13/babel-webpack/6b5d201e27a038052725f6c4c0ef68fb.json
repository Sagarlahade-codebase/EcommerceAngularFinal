{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { IDX_API_VERSION } from '../../constants.js';\nimport v1 from './v1/parsers.js';\nconst parsersForVersion = function parsersForVersion(version) {\n  switch (version) {\n    case '1.0.0':\n      return v1;\n    case undefined:\n    case null:\n      throw new Error('Api version is required');\n    default:\n      throw new Error(`Unknown api version: ${version}.  Use an exact semver version.`);\n  }\n};\nfunction validateVersionConfig(version) {\n  if (!version) {\n    throw new Error('version is required');\n  }\n  const cleanVersion = (version !== null && version !== void 0 ? version : '').replace(/[^0-9a-zA-Z._-]/, '');\n  if (cleanVersion !== version || !version) {\n    throw new Error('invalid version supplied - version is required and uses semver syntax');\n  }\n  parsersForVersion(version);\n}\nfunction makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed) {\n  var _a;\n  const version = (_a = rawIdxResponse === null || rawIdxResponse === void 0 ? void 0 : rawIdxResponse.version) !== null && _a !== void 0 ? _a : IDX_API_VERSION;\n  validateVersionConfig(version);\n  const {\n    makeIdxState\n  } = parsersForVersion(version);\n  return makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed);\n}\nexport { makeIdxState, parsersForVersion, validateVersionConfig };","map":{"version":3,"names":["IDX_API_VERSION","v1","parsersForVersion","version","undefined","Error","validateVersionConfig","cleanVersion","replace","makeIdxState","authClient","rawIdxResponse","toPersist","requestDidSucceed","_a"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/idxState/index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { IDX_API_VERSION } from '../../constants.js';\nimport v1 from './v1/parsers.js';\n\nconst parsersForVersion = function parsersForVersion(version) {\n    switch (version) {\n        case '1.0.0':\n            return v1;\n        case undefined:\n        case null:\n            throw new Error('Api version is required');\n        default:\n            throw new Error(`Unknown api version: ${version}.  Use an exact semver version.`);\n    }\n};\nfunction validateVersionConfig(version) {\n    if (!version) {\n        throw new Error('version is required');\n    }\n    const cleanVersion = (version !== null && version !== void 0 ? version : '').replace(/[^0-9a-zA-Z._-]/, '');\n    if (cleanVersion !== version || !version) {\n        throw new Error('invalid version supplied - version is required and uses semver syntax');\n    }\n    parsersForVersion(version);\n}\nfunction makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed) {\n    var _a;\n    const version = (_a = rawIdxResponse === null || rawIdxResponse === void 0 ? void 0 : rawIdxResponse.version) !== null && _a !== void 0 ? _a : IDX_API_VERSION;\n    validateVersionConfig(version);\n    const { makeIdxState } = parsersForVersion(version);\n    return makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed);\n}\n\nexport { makeIdxState, parsersForVersion, validateVersionConfig };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,OAAOC,EAAE,MAAM,iBAAiB;AAEhC,MAAMC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACC,OAAO,EAAE;EAC1D,QAAQA,OAAO;IACX,KAAK,OAAO;MACR,OAAOF,EAAE;IACb,KAAKG,SAAS;IACd,KAAK,IAAI;MACL,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC9C;MACI,MAAM,IAAIA,KAAK,CAAC,wBAAwBF,OAAO,iCAAiC,CAAC;EACzF;AACJ,CAAC;AACD,SAASG,qBAAqBA,CAACH,OAAO,EAAE;EACpC,IAAI,CAACA,OAAO,EAAE;IACV,MAAM,IAAIE,KAAK,CAAC,qBAAqB,CAAC;EAC1C;EACA,MAAME,YAAY,GAAG,CAACJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,EAAE,EAAEK,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;EAC3G,IAAID,YAAY,KAAKJ,OAAO,IAAI,CAACA,OAAO,EAAE;IACtC,MAAM,IAAIE,KAAK,CAAC,uEAAuE,CAAC;EAC5F;EACAH,iBAAiB,CAACC,OAAO,CAAC;AAC9B;AACA,SAASM,YAAYA,CAACC,UAAU,EAAEC,cAAc,EAAEC,SAAS,EAAEC,iBAAiB,EAAE;EAC5E,IAAIC,EAAE;EACN,MAAMX,OAAO,GAAG,CAACW,EAAE,GAAGH,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACR,OAAO,MAAM,IAAI,IAAIW,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGd,eAAe;EAC9JM,qBAAqB,CAACH,OAAO,CAAC;EAC9B,MAAM;IAAEM;EAAa,CAAC,GAAGP,iBAAiB,CAACC,OAAO,CAAC;EACnD,OAAOM,YAAY,CAACC,UAAU,EAAEC,cAAc,EAAEC,SAAS,EAAEC,iBAAiB,CAAC;AACjF;AAEA,SAASJ,YAAY,EAAEP,iBAAiB,EAAEI,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module"}