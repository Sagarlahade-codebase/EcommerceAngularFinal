{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticator } from '../../authenticator/getAuthenticator.js';\nclass VerifyAuthenticator extends Remediator {\n  constructor(remediation, values = {}) {\n    super(remediation, values);\n    this.authenticator = getAuthenticator(remediation);\n  }\n  getNextStep(authClient, context) {\n    var _a;\n    const nextStep = super.getNextStep(authClient, context);\n    const authenticatorEnrollments = (_a = context === null || context === void 0 ? void 0 : context.authenticatorEnrollments) === null || _a === void 0 ? void 0 : _a.value;\n    return Object.assign(Object.assign({}, nextStep), {\n      authenticatorEnrollments\n    });\n  }\n  canRemediate() {\n    return this.authenticator.canVerify(this.values);\n  }\n  mapCredentials() {\n    return this.authenticator.mapCredentials(this.values);\n  }\n  getInputCredentials(input) {\n    return this.authenticator.getInputs(input);\n  }\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'credentials');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n}\nexport { VerifyAuthenticator };","map":{"version":3,"names":["Remediator","getAuthenticator","VerifyAuthenticator","constructor","remediation","values","authenticator","getNextStep","authClient","context","_a","nextStep","authenticatorEnrollments","value","Object","assign","canRemediate","canVerify","mapCredentials","getInputCredentials","input","getInputs","getValuesAfterProceed","trimmedValues","keys","filter","valueKey","reduce"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/Base/VerifyAuthenticator.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticator } from '../../authenticator/getAuthenticator.js';\n\nclass VerifyAuthenticator extends Remediator {\n    constructor(remediation, values = {}) {\n        super(remediation, values);\n        this.authenticator = getAuthenticator(remediation);\n    }\n    getNextStep(authClient, context) {\n        var _a;\n        const nextStep = super.getNextStep(authClient, context);\n        const authenticatorEnrollments = (_a = context === null || context === void 0 ? void 0 : context.authenticatorEnrollments) === null || _a === void 0 ? void 0 : _a.value;\n        return Object.assign(Object.assign({}, nextStep), { authenticatorEnrollments });\n    }\n    canRemediate() {\n        return this.authenticator.canVerify(this.values);\n    }\n    mapCredentials() {\n        return this.authenticator.mapCredentials(this.values);\n    }\n    getInputCredentials(input) {\n        return this.authenticator.getInputs(input);\n    }\n    getValuesAfterProceed() {\n        this.values = super.getValuesAfterProceed();\n        let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'credentials');\n        return trimmedValues.reduce((values, valueKey) => (Object.assign(Object.assign({}, values), { [valueKey]: this.values[valueKey] })), {});\n    }\n}\n\nexport { VerifyAuthenticator };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,gBAAgB,QAAQ,yCAAyC;AAE1E,MAAMC,mBAAmB,SAASF,UAAU,CAAC;EACzCG,WAAWA,CAACC,WAAW,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IAClC,KAAK,CAACD,WAAW,EAAEC,MAAM,CAAC;IAC1B,IAAI,CAACC,aAAa,GAAGL,gBAAgB,CAACG,WAAW,CAAC;EACtD;EACAG,WAAWA,CAACC,UAAU,EAAEC,OAAO,EAAE;IAC7B,IAAIC,EAAE;IACN,MAAMC,QAAQ,GAAG,KAAK,CAACJ,WAAW,CAACC,UAAU,EAAEC,OAAO,CAAC;IACvD,MAAMG,wBAAwB,GAAG,CAACF,EAAE,GAAGD,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACG,wBAAwB,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,KAAK;IACxK,OAAOC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,QAAQ,CAAC,EAAE;MAAEC;IAAyB,CAAC,CAAC;EACnF;EACAI,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACV,aAAa,CAACW,SAAS,CAAC,IAAI,CAACZ,MAAM,CAAC;EACpD;EACAa,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACZ,aAAa,CAACY,cAAc,CAAC,IAAI,CAACb,MAAM,CAAC;EACzD;EACAc,mBAAmBA,CAACC,KAAK,EAAE;IACvB,OAAO,IAAI,CAACd,aAAa,CAACe,SAAS,CAACD,KAAK,CAAC;EAC9C;EACAE,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAACjB,MAAM,GAAG,KAAK,CAACiB,qBAAqB,CAAC,CAAC;IAC3C,IAAIC,aAAa,GAAGT,MAAM,CAACU,IAAI,CAAC,IAAI,CAACnB,MAAM,CAAC,CAACoB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,KAAK,aAAa,CAAC;IAC3F,OAAOH,aAAa,CAACI,MAAM,CAAC,CAACtB,MAAM,EAAEqB,QAAQ,KAAMZ,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,MAAM,CAAC,EAAE;MAAE,CAACqB,QAAQ,GAAG,IAAI,CAACrB,MAAM,CAACqB,QAAQ;IAAE,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC;EAC5I;AACJ;AAEA,SAASxB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module"}