{"ast":null,"code":"import '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport { FORMS, AUTHENTICATOR_KEY, IDP_FORM_TYPE } from './RemediationConstants.js';\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n/**\n * Transform the ion spec response into canonical format.\n */\n\n/**\n * Authn V2 response\n * @typedef {Object} AuthnResponse\n */\n\n/**\n * @typedef {Object} AuthnResult\n * @property {Object=} user\n * @property {Object=} authenticator\n */\n\nconst isObject = x => oktaUnderscore.isObject(x);\nconst isError = response => !!response.messages;\n/**\n * Flatten first level objects from response\n */\n\nconst getFirstLevelObjects = resp => {\n  const result = {};\n  oktaUnderscore.each(resp, (val = {}, key) => {\n    // if key is remediation we don't do any transformation\n    if (key === 'remediation') {\n      return;\n    } // for arrays we just want it as a top level object\n    // Example authenticators array in select-authenticator form\n\n    if (val.type === 'array') {\n      result[key] = {\n        value: val.value\n      };\n    } // for handling attributes with type object\n\n    if (val.type === 'object') {\n      result[key] = val.value;\n    }\n  });\n  return result;\n};\nconst getRemediationValues = idx => {\n  const remediationValues = [];\n  const hasSkipRemediationOnly = idx.neededToProceed.length === 1 && idx.neededToProceed[0].name === 'skip';\n  if (oktaUnderscore.isEmpty(idx.neededToProceed) || hasSkipRemediationOnly) {\n    // no remediation or only skip remediation with success\n    if (idx.context.success) {\n      remediationValues.push({\n        name: idx.context.success.name,\n        href: idx.context.success.href,\n        value: []\n      });\n    } else if (idx.context.messages) {\n      // no remediation or only skip remediation with messages\n      remediationValues.push({\n        name: FORMS.TERMINAL,\n        // Using `value` is unnecessary as `messages` will be display via `TerminalView.showMessages`,\n        // even though might sound a little counterintuitive.\n        // The reason being is there is `BaseForm.showMessages` that is intended to handle\n        // messages generically.\n        value: []\n      });\n    } else if (idx.context.deviceEnrollment) {\n      // no remediation or only skip remediation with messages for device enrollment state\n      // and the state is meant to be terminal state with different UI than the regular terminal view\n      remediationValues.push({\n        name: FORMS.DEVICE_ENROLLMENT_TERMINAL,\n        value: []\n      });\n    }\n  }\n  return {\n    remediations: [...remediationValues, ...idx.neededToProceed]\n  };\n};\n/**\n * To support `idps` configuration in OIE.\n * https://github.com/okta/okta-signin-widget#openid-connect\n */\n\nconst injectIdPConfigButtonToRemediation = (settings, idxResp) => {\n  const widgetRemedations = idxResp.remediations;\n  const hasIdentifyRemedation = widgetRemedations.filter(r => r.name === 'identify');\n  if (hasIdentifyRemedation.length === 0) {\n    return idxResp;\n  }\n  const idpsConfig = settings.get('idps');\n  if (Array.isArray(idpsConfig)) {\n    const existsRedirectIdpIds = {};\n    widgetRemedations.forEach(r => {\n      if (r.name === FORMS.REDIRECT_IDP && r.idp) {\n        existsRedirectIdpIds[r.idp.id] = true;\n      }\n    });\n    const baseUrl = settings.get('baseUrl');\n    const stateHandle = idxResp.idx.context.stateHandle;\n    const redirectIdpRemedations = idpsConfig.filter(c => !existsRedirectIdpIds[c.id]) // omit idps that are already in remediation.\n    .map(idpConfig => {\n      const idp = {\n        id: idpConfig.id,\n        name: idpConfig.text\n      };\n      const redirectUri = `${baseUrl}/sso/idps/${idpConfig.id}?stateToken=${stateHandle}`;\n      if (idpConfig.className) {\n        idp.className = idpConfig.className;\n      }\n      return {\n        name: FORMS.REDIRECT_IDP,\n        type: idpConfig.type,\n        idp: idp,\n        href: redirectUri\n      };\n    });\n    idxResp.remediations = widgetRemedations.concat(redirectIdpRemedations);\n  }\n  return idxResp;\n};\n/**\n * IFF there is one `redirect-idp` remediation form, widget will automatically redirect to `redirect-idp.href`.\n *\n * The idea now is to reuse `success-redirect` thus converts `redirect-idp` to `success-redirect` form.\n */\n\nconst convertRedirectIdPToSuccessRedirectIffOneIdp = (settings, result, lastResult) => {\n  if (Array.isArray(result.remediations)) {\n    const redirectIdpRemediations = result.remediations.filter(idp => idp.name === FORMS.REDIRECT_IDP);\n    if (redirectIdpRemediations.length !== 1 || result.remediations.length !== 1) {\n      return;\n    } // Direct auth clients should not redirect on the initial response\n\n    const isDirectAuth = settings.get('oauth2Enabled');\n    if (isDirectAuth && !lastResult) {\n      return;\n    }\n    const successRedirect = {\n      name: FORMS.SUCCESS_REDIRECT,\n      href: redirectIdpRemediations[0].href,\n      value: []\n    };\n    result.remediations = [successRedirect];\n  }\n};\n/**\n * API reuses `redirect-idp` remediation form for PIV IdP and IdP Authenticator.\n * IdP Authenticator becomes outlier comparing with other Authenticators in terms of\n * using `challenge-authenticator` and `enroll-authenticator` remediation form.\n * The UX for PIV IdP is different from other idps in terms of the PIV\n * instructions view that needs to be rendered before we redirect to mtls.\n *\n * This function changes `redirect-idp` to `challenge-authenticator` or `enroll-authenticator`\n * for IdP Authenticator and changes `redirect-idp` to `piv-idp` for PIV IdP.\n */\n\nconst modifyFormNameForIdP = result => {\n  if (Array.isArray(result.remediations)) {\n    result.remediations.forEach(remediation => {\n      var _remediation$relatesT, _remediation$relatesT2;\n      if (remediation.name === FORMS.REDIRECT_IDP && (remediation === null || remediation === void 0 ? void 0 : (_remediation$relatesT = remediation.relatesTo) === null || _remediation$relatesT === void 0 ? void 0 : (_remediation$relatesT2 = _remediation$relatesT.value) === null || _remediation$relatesT2 === void 0 ? void 0 : _remediation$relatesT2.key) === AUTHENTICATOR_KEY.IDP) {\n        // idp authenticator\n        const isVerifyFlow = Object.prototype.hasOwnProperty.call(result, 'currentAuthenticatorEnrollment');\n        remediation.name = isVerifyFlow ? 'challenge-authenticator' : 'enroll-authenticator';\n      }\n      if (remediation.name === FORMS.REDIRECT_IDP && remediation.type === IDP_FORM_TYPE.X509) {\n        // piv idp\n        remediation.name = FORMS.PIV_IDP;\n      }\n    });\n  }\n};\nconst isFailureRedirect = result => {\n  const context = result.idx.context;\n  return context.failure && context.failure.name === 'failure-redirect';\n};\nconst handleFailureRedirect = (settings, result) => {\n  const context = result.idx.context; // Direct auth clients will usually prefer to display the error instead of redirecting\n\n  const isDirectAuth = settings.get('oauth2Enabled');\n  const alwaysRedirect = settings.get('redirect') === 'always'; // redirect option overrides default behavior\n\n  if (isDirectAuth && !alwaysRedirect) {\n    return;\n  }\n  const failureRedirect = {\n    name: FORMS.FAILURE_REDIRECT,\n    href: context.failure.href,\n    value: []\n  };\n  result.remediations = [failureRedirect];\n};\n/**\n * @param {Models.Settings} user configuration\n * @param {idx} idx object\n * @returns {} transformed object with flattened firstlevel objects, idx and remediations array\n * Example: {\n *  idx: {\n *    proceed: ƒ(),\n *    neededToProceed: [],\n *    actions: {cancel: ƒ()},\n *    context: {},\n *  },\n *  remediations: [],\n *  authenticators: {},\n *  authenticator: {},\n *  messages: {},\n *  deviceEnrollment: {},\n * }\n */\n\nconst convert = (settings, idx = {}, lastResult = null) => {\n  if (!isObject(idx.rawIdxState)) {\n    return null;\n  } // build result object\n\n  const firstLevelObjects = getFirstLevelObjects(idx.rawIdxState);\n  const remediationValues = getRemediationValues(idx);\n  const result = Object.assign({}, firstLevelObjects, remediationValues, {\n    idx: idx\n  }); // transform result object\n\n  if (isError(result) && isFailureRedirect(result)) {\n    handleFailureRedirect(settings, result);\n  } // Override the `result` to handle custom IdP login buttons\n  // and update the form for IdP Authenticators.\n\n  injectIdPConfigButtonToRemediation(settings, result);\n  modifyFormNameForIdP(result);\n  if (!isError(result)) {\n    // Only redirect to the IdP if we are not in an error flow\n    convertRedirectIdPToSuccessRedirectIffOneIdp(settings, result, lastResult);\n  }\n  return result;\n};\nexport { convert as default };","map":{"version":3,"names":["oktaUnderscore","FORMS","AUTHENTICATOR_KEY","IDP_FORM_TYPE","isObject","x","isError","response","messages","getFirstLevelObjects","resp","result","each","val","key","type","value","getRemediationValues","idx","remediationValues","hasSkipRemediationOnly","neededToProceed","length","name","isEmpty","context","success","push","href","TERMINAL","deviceEnrollment","DEVICE_ENROLLMENT_TERMINAL","remediations","injectIdPConfigButtonToRemediation","settings","idxResp","widgetRemedations","hasIdentifyRemedation","filter","r","idpsConfig","get","Array","isArray","existsRedirectIdpIds","forEach","REDIRECT_IDP","idp","id","baseUrl","stateHandle","redirectIdpRemedations","c","map","idpConfig","text","redirectUri","className","concat","convertRedirectIdPToSuccessRedirectIffOneIdp","lastResult","redirectIdpRemediations","isDirectAuth","successRedirect","SUCCESS_REDIRECT","modifyFormNameForIdP","remediation","_remediation$relatesT","_remediation$relatesT2","relatesTo","IDP","isVerifyFlow","Object","prototype","hasOwnProperty","call","X509","PIV_IDP","isFailureRedirect","failure","handleFailureRedirect","alwaysRedirect","failureRedirect","FAILURE_REDIRECT","convert","rawIdxState","firstLevelObjects","assign","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/ion/responseTransformer.js"],"sourcesContent":["import '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport { FORMS, AUTHENTICATOR_KEY, IDP_FORM_TYPE } from './RemediationConstants.js';\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n/**\n * Transform the ion spec response into canonical format.\n */\n\n/**\n * Authn V2 response\n * @typedef {Object} AuthnResponse\n */\n\n/**\n * @typedef {Object} AuthnResult\n * @property {Object=} user\n * @property {Object=} authenticator\n */\n\nconst isObject = x => oktaUnderscore.isObject(x);\n\nconst isError = response => !!response.messages;\n/**\n * Flatten first level objects from response\n */\n\n\nconst getFirstLevelObjects = resp => {\n  const result = {};\n\n  oktaUnderscore.each(resp, (val = {}, key) => {\n    // if key is remediation we don't do any transformation\n    if (key === 'remediation') {\n      return;\n    } // for arrays we just want it as a top level object\n    // Example authenticators array in select-authenticator form\n\n\n    if (val.type === 'array') {\n      result[key] = {\n        value: val.value\n      };\n    } // for handling attributes with type object\n\n\n    if (val.type === 'object') {\n      result[key] = val.value;\n    }\n  });\n\n  return result;\n};\n\nconst getRemediationValues = idx => {\n  const remediationValues = [];\n  const hasSkipRemediationOnly = idx.neededToProceed.length === 1 && idx.neededToProceed[0].name === 'skip';\n\n  if (oktaUnderscore.isEmpty(idx.neededToProceed) || hasSkipRemediationOnly) {\n    // no remediation or only skip remediation with success\n    if (idx.context.success) {\n      remediationValues.push({\n        name: idx.context.success.name,\n        href: idx.context.success.href,\n        value: []\n      });\n    } else if (idx.context.messages) {\n      // no remediation or only skip remediation with messages\n      remediationValues.push({\n        name: FORMS.TERMINAL,\n        // Using `value` is unnecessary as `messages` will be display via `TerminalView.showMessages`,\n        // even though might sound a little counterintuitive.\n        // The reason being is there is `BaseForm.showMessages` that is intended to handle\n        // messages generically.\n        value: []\n      });\n    } else if (idx.context.deviceEnrollment) {\n      // no remediation or only skip remediation with messages for device enrollment state\n      // and the state is meant to be terminal state with different UI than the regular terminal view\n      remediationValues.push({\n        name: FORMS.DEVICE_ENROLLMENT_TERMINAL,\n        value: []\n      });\n    }\n  }\n\n  return {\n    remediations: [...remediationValues, ...idx.neededToProceed]\n  };\n};\n/**\n * To support `idps` configuration in OIE.\n * https://github.com/okta/okta-signin-widget#openid-connect\n */\n\n\nconst injectIdPConfigButtonToRemediation = (settings, idxResp) => {\n  const widgetRemedations = idxResp.remediations;\n  const hasIdentifyRemedation = widgetRemedations.filter(r => r.name === 'identify');\n\n  if (hasIdentifyRemedation.length === 0) {\n    return idxResp;\n  }\n\n  const idpsConfig = settings.get('idps');\n\n  if (Array.isArray(idpsConfig)) {\n    const existsRedirectIdpIds = {};\n    widgetRemedations.forEach(r => {\n      if (r.name === FORMS.REDIRECT_IDP && r.idp) {\n        existsRedirectIdpIds[r.idp.id] = true;\n      }\n    });\n    const baseUrl = settings.get('baseUrl');\n    const stateHandle = idxResp.idx.context.stateHandle;\n    const redirectIdpRemedations = idpsConfig.filter(c => !existsRedirectIdpIds[c.id]) // omit idps that are already in remediation.\n    .map(idpConfig => {\n      const idp = {\n        id: idpConfig.id,\n        name: idpConfig.text\n      };\n      const redirectUri = `${baseUrl}/sso/idps/${idpConfig.id}?stateToken=${stateHandle}`;\n\n      if (idpConfig.className) {\n        idp.className = idpConfig.className;\n      }\n\n      return {\n        name: FORMS.REDIRECT_IDP,\n        type: idpConfig.type,\n        idp: idp,\n        href: redirectUri\n      };\n    });\n    idxResp.remediations = widgetRemedations.concat(redirectIdpRemedations);\n  }\n\n  return idxResp;\n};\n/**\n * IFF there is one `redirect-idp` remediation form, widget will automatically redirect to `redirect-idp.href`.\n *\n * The idea now is to reuse `success-redirect` thus converts `redirect-idp` to `success-redirect` form.\n */\n\n\nconst convertRedirectIdPToSuccessRedirectIffOneIdp = (settings, result, lastResult) => {\n  if (Array.isArray(result.remediations)) {\n    const redirectIdpRemediations = result.remediations.filter(idp => idp.name === FORMS.REDIRECT_IDP);\n\n    if (redirectIdpRemediations.length !== 1 || result.remediations.length !== 1) {\n      return;\n    } // Direct auth clients should not redirect on the initial response\n\n\n    const isDirectAuth = settings.get('oauth2Enabled');\n\n    if (isDirectAuth && !lastResult) {\n      return;\n    }\n\n    const successRedirect = {\n      name: FORMS.SUCCESS_REDIRECT,\n      href: redirectIdpRemediations[0].href,\n      value: []\n    };\n    result.remediations = [successRedirect];\n  }\n};\n/**\n * API reuses `redirect-idp` remediation form for PIV IdP and IdP Authenticator.\n * IdP Authenticator becomes outlier comparing with other Authenticators in terms of\n * using `challenge-authenticator` and `enroll-authenticator` remediation form.\n * The UX for PIV IdP is different from other idps in terms of the PIV\n * instructions view that needs to be rendered before we redirect to mtls.\n *\n * This function changes `redirect-idp` to `challenge-authenticator` or `enroll-authenticator`\n * for IdP Authenticator and changes `redirect-idp` to `piv-idp` for PIV IdP.\n */\n\n\nconst modifyFormNameForIdP = result => {\n  if (Array.isArray(result.remediations)) {\n    result.remediations.forEach(remediation => {\n      var _remediation$relatesT, _remediation$relatesT2;\n\n      if (remediation.name === FORMS.REDIRECT_IDP && (remediation === null || remediation === void 0 ? void 0 : (_remediation$relatesT = remediation.relatesTo) === null || _remediation$relatesT === void 0 ? void 0 : (_remediation$relatesT2 = _remediation$relatesT.value) === null || _remediation$relatesT2 === void 0 ? void 0 : _remediation$relatesT2.key) === AUTHENTICATOR_KEY.IDP) {\n        // idp authenticator\n        const isVerifyFlow = Object.prototype.hasOwnProperty.call(result, 'currentAuthenticatorEnrollment');\n        remediation.name = isVerifyFlow ? 'challenge-authenticator' : 'enroll-authenticator';\n      }\n\n      if (remediation.name === FORMS.REDIRECT_IDP && remediation.type === IDP_FORM_TYPE.X509) {\n        // piv idp\n        remediation.name = FORMS.PIV_IDP;\n      }\n    });\n  }\n};\n\nconst isFailureRedirect = result => {\n  const context = result.idx.context;\n  return context.failure && context.failure.name === 'failure-redirect';\n};\n\nconst handleFailureRedirect = (settings, result) => {\n  const context = result.idx.context; // Direct auth clients will usually prefer to display the error instead of redirecting\n\n  const isDirectAuth = settings.get('oauth2Enabled');\n  const alwaysRedirect = settings.get('redirect') === 'always'; // redirect option overrides default behavior\n\n  if (isDirectAuth && !alwaysRedirect) {\n    return;\n  }\n\n  const failureRedirect = {\n    name: FORMS.FAILURE_REDIRECT,\n    href: context.failure.href,\n    value: []\n  };\n  result.remediations = [failureRedirect];\n};\n/**\n * @param {Models.Settings} user configuration\n * @param {idx} idx object\n * @returns {} transformed object with flattened firstlevel objects, idx and remediations array\n * Example: {\n *  idx: {\n *    proceed: ƒ(),\n *    neededToProceed: [],\n *    actions: {cancel: ƒ()},\n *    context: {},\n *  },\n *  remediations: [],\n *  authenticators: {},\n *  authenticator: {},\n *  messages: {},\n *  deviceEnrollment: {},\n * }\n */\n\n\nconst convert = (settings, idx = {}, lastResult = null) => {\n  if (!isObject(idx.rawIdxState)) {\n    return null;\n  } // build result object\n\n\n  const firstLevelObjects = getFirstLevelObjects(idx.rawIdxState);\n  const remediationValues = getRemediationValues(idx);\n  const result = Object.assign({}, firstLevelObjects, remediationValues, {\n    idx: idx\n  }); // transform result object\n\n  if (isError(result) && isFailureRedirect(result)) {\n    handleFailureRedirect(settings, result);\n  } // Override the `result` to handle custom IdP login buttons\n  // and update the form for IdP Authenticators.\n\n\n  injectIdPConfigButtonToRemediation(settings, result);\n  modifyFormNameForIdP(result);\n\n  if (!isError(result)) {\n    // Only redirect to the IdP if we are not in an error flow\n    convertRedirectIdPToSuccessRedirectIffOneIdp(settings, result, lastResult);\n  }\n\n  return result;\n};\n\nexport { convert as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}