{"ast":null,"code":"import Backbone from '../vendor/lib/backbone.js';\nimport ConfirmationDialog from '../../empty.js';\nimport oktaJQueryStatic from './jquery-wrapper.js';\nimport oktaUnderscore from './underscore-wrapper.js';\nimport Logger from './Logger.js';\nimport SettingsModel from './SettingsModel.js';\nimport Notification from '../views/components/Notification.js';\nfunction getRoute(router, route) {\n  const root = oktaUnderscore.result(router, 'root') || '';\n  if (root && oktaUnderscore.isString(route)) {\n    return [root, route].join('/').replace(/\\/{2,}/g, '/');\n  }\n  return route;\n}\n/**\n * BaseRouter is a standard [Backbone.Router](http://backbonejs.org/#Router)\n * with a few additions:\n * - Explicit mapping between routes and controllers\n * - Support for rendering notification and confirmation dialogs\n *\n * Checkout the [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World)\n * for a step-by-step guide to using this.\n *\n * @class module:Okta.Router\n * @extends external:Backbone.Router\n * @param {Object} options options hash\n * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM\n */\n\nconst props = /** @lends module:Okta.Router.prototype */\n{\n  /**\n   * The root URL for the router. When setting {@link http://backbonejs.org/#Router-routes|routes},\n   * it will be prepended to each route.\n   * @type {String|Function}\n   */\n  root: '',\n  listen: Notification.prototype.listen,\n  constructor: function (options = {}) {\n    this.el = options.el;\n    /**\n     * Make sure `this.settings` has been set before invoke super - `Backbone.Router.apply`,\n     * which will invoke `this.initialize`, which could use `this.settings`.\n     *\n     * In theory we can set `this.settings` in `this.initialize` and assume `child.initialize`\n     * will invoke `super.initialize` first. But in reality, `child.initialize` doesn't call\n     * `super.initialize` at all.\n     */\n\n    this.settings = new SettingsModel(oktaUnderscore.omit(options, 'el'));\n    if (options.root) {\n      this.root = options.root;\n    }\n    Backbone.Router.apply(this, arguments);\n    this.listen('notification', this._notify);\n    this.listen('confirmation', this._confirm);\n  },\n  /**\n   * Fires up a confirmation dialog\n   *\n   * @param  {Object} options Options Hash\n   * @param  {String} options.title The title\n   * @param  {Array<string>} buttonOrder The order of the buttons\n   * @param  {String} options.subtitle The explain text\n   * @param  {String} options.save The text for the save button\n   * @param  {Function} options.ok The callback function to run when hitting \"OK\"\n   * @param  {String} options.cancel The text for the cancel button\n   * @param  {Function} options.cancelFn The callback function to run when hitting \"Cancel\"\n   * @param  {Boolean} options.noCancelButton Don't render the cancel button (useful for alert dialogs)\n   * @param  {Boolean} options.noSubmitButton Don't render the primary button (useful for alert dialogs)\n   * @private\n   *\n   * @return {Okta.View} the dialog view\n   */\n  _confirm: function (options = {}) {\n    const Dialog = ConfirmationDialog.extend(oktaUnderscore.pick(options, 'title', 'subtitle', 'save', 'ok', 'cancel', 'cancelFn', 'noCancelButton', 'noSubmitButton', 'content', 'danger', 'type', 'closeOnOverlayClick', 'buttonOrder'));\n    const dialog = new Dialog({\n      model: this.settings\n    }); // The model is here because itsa part of the BaseForm paradigm.\n    // It will be ignored in the context of a confirmation dialog.\n\n    dialog.render();\n    return dialog; // test hook\n  },\n  /**\n   * Fires up a notification banner\n   *\n   * @param  {Object} options Options Hash\n   * @return {Okta.View} the notification view\n   * @private\n   */\n  _notify: function (options) {\n    const notification = new Notification(options);\n    oktaJQueryStatic('#content').prepend(notification.render().el);\n    return notification; // test hook\n  },\n  /**\n   * Renders a Controller\n   * This will initialize new instance of a controller and call render on it\n   *\n   * @param  {Okta.Controller} Controller The controller Class we which to render\n   * @param  {Object} [options] Extra options to the controller constructor\n   */\n  render: function (Controller, options) {\n    this.unload();\n    options = oktaUnderscore.extend(oktaUnderscore.pick(this, 'settings', 'el'), options || {});\n    this.controller = new Controller(options);\n    this.controller.render();\n  },\n  /**\n   * Starts the backbone history object\n   *\n   * Waits for the dom to be ready before calling `Backbone.history.start()` (IE issue).\n   *\n   * See [Backbone History](http://backbonejs.org/#History) for more information.\n   */\n  start: function (...args) {\n    oktaJQueryStatic(function () {\n      if (Backbone.History.started) {\n        Logger.error('History has already been started');\n        return;\n      }\n      Backbone.history.start(...args);\n    });\n  },\n  /**\n   * Removes active controller and frees up event listeners\n   */\n  unload: function () {\n    if (this.controller) {\n      this.stopListening(this.controller);\n      this.stopListening(this.controller.state);\n      this.controller.remove();\n    }\n  },\n  route: function (route, name, callback) {\n    return Backbone.Router.prototype.route.call(this, getRoute(this, route), name, callback);\n  },\n  navigate: function (fragment, options) {\n    return Backbone.Router.prototype.navigate.call(this, getRoute(this, fragment), options);\n  }\n};\nvar BaseRouter = Backbone.Router.extend(props);\nexport { BaseRouter as default };","map":{"version":3,"names":["Backbone","ConfirmationDialog","oktaJQueryStatic","oktaUnderscore","Logger","SettingsModel","Notification","getRoute","router","route","root","result","isString","join","replace","props","listen","prototype","constructor","options","el","settings","omit","Router","apply","arguments","_notify","_confirm","Dialog","extend","pick","dialog","model","render","notification","prepend","Controller","unload","controller","start","args","History","started","error","history","stopListening","state","remove","name","callback","call","navigate","fragment","BaseRouter","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/@okta/courage-dist/esm/src/courage/util/BaseRouter.js"],"sourcesContent":["import Backbone from '../vendor/lib/backbone.js';\nimport ConfirmationDialog from '../../empty.js';\nimport oktaJQueryStatic from './jquery-wrapper.js';\nimport oktaUnderscore from './underscore-wrapper.js';\nimport Logger from './Logger.js';\nimport SettingsModel from './SettingsModel.js';\nimport Notification from '../views/components/Notification.js';\n\nfunction getRoute(router, route) {\n  const root = oktaUnderscore.result(router, 'root') || '';\n\n  if (root && oktaUnderscore.isString(route)) {\n    return [root, route].join('/').replace(/\\/{2,}/g, '/');\n  }\n\n  return route;\n}\n/**\n * BaseRouter is a standard [Backbone.Router](http://backbonejs.org/#Router)\n * with a few additions:\n * - Explicit mapping between routes and controllers\n * - Support for rendering notification and confirmation dialogs\n *\n * Checkout the [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World)\n * for a step-by-step guide to using this.\n *\n * @class module:Okta.Router\n * @extends external:Backbone.Router\n * @param {Object} options options hash\n * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM\n */\n\n\nconst props =\n/** @lends module:Okta.Router.prototype */\n{\n  /**\n   * The root URL for the router. When setting {@link http://backbonejs.org/#Router-routes|routes},\n   * it will be prepended to each route.\n   * @type {String|Function}\n   */\n  root: '',\n  listen: Notification.prototype.listen,\n  constructor: function (options = {}) {\n    this.el = options.el;\n    /**\n     * Make sure `this.settings` has been set before invoke super - `Backbone.Router.apply`,\n     * which will invoke `this.initialize`, which could use `this.settings`.\n     *\n     * In theory we can set `this.settings` in `this.initialize` and assume `child.initialize`\n     * will invoke `super.initialize` first. But in reality, `child.initialize` doesn't call\n     * `super.initialize` at all.\n     */\n\n    this.settings = new SettingsModel(oktaUnderscore.omit(options, 'el'));\n\n    if (options.root) {\n      this.root = options.root;\n    }\n\n    Backbone.Router.apply(this, arguments);\n    this.listen('notification', this._notify);\n    this.listen('confirmation', this._confirm);\n  },\n\n  /**\n   * Fires up a confirmation dialog\n   *\n   * @param  {Object} options Options Hash\n   * @param  {String} options.title The title\n   * @param  {Array<string>} buttonOrder The order of the buttons\n   * @param  {String} options.subtitle The explain text\n   * @param  {String} options.save The text for the save button\n   * @param  {Function} options.ok The callback function to run when hitting \"OK\"\n   * @param  {String} options.cancel The text for the cancel button\n   * @param  {Function} options.cancelFn The callback function to run when hitting \"Cancel\"\n   * @param  {Boolean} options.noCancelButton Don't render the cancel button (useful for alert dialogs)\n   * @param  {Boolean} options.noSubmitButton Don't render the primary button (useful for alert dialogs)\n   * @private\n   *\n   * @return {Okta.View} the dialog view\n   */\n  _confirm: function (options = {}) {\n    const Dialog = ConfirmationDialog.extend(oktaUnderscore.pick(options, 'title', 'subtitle', 'save', 'ok', 'cancel', 'cancelFn', 'noCancelButton', 'noSubmitButton', 'content', 'danger', 'type', 'closeOnOverlayClick', 'buttonOrder'));\n    const dialog = new Dialog({\n      model: this.settings\n    }); // The model is here because itsa part of the BaseForm paradigm.\n    // It will be ignored in the context of a confirmation dialog.\n\n    dialog.render();\n    return dialog; // test hook\n  },\n\n  /**\n   * Fires up a notification banner\n   *\n   * @param  {Object} options Options Hash\n   * @return {Okta.View} the notification view\n   * @private\n   */\n  _notify: function (options) {\n    const notification = new Notification(options);\n    oktaJQueryStatic('#content').prepend(notification.render().el);\n    return notification; // test hook\n  },\n\n  /**\n   * Renders a Controller\n   * This will initialize new instance of a controller and call render on it\n   *\n   * @param  {Okta.Controller} Controller The controller Class we which to render\n   * @param  {Object} [options] Extra options to the controller constructor\n   */\n  render: function (Controller, options) {\n    this.unload();\n    options = oktaUnderscore.extend(oktaUnderscore.pick(this, 'settings', 'el'), options || {});\n    this.controller = new Controller(options);\n    this.controller.render();\n  },\n\n  /**\n   * Starts the backbone history object\n   *\n   * Waits for the dom to be ready before calling `Backbone.history.start()` (IE issue).\n   *\n   * See [Backbone History](http://backbonejs.org/#History) for more information.\n   */\n  start: function (...args) {\n    oktaJQueryStatic(function () {\n      if (Backbone.History.started) {\n        Logger.error('History has already been started');\n        return;\n      }\n\n      Backbone.history.start(...args);\n    });\n  },\n\n  /**\n   * Removes active controller and frees up event listeners\n   */\n  unload: function () {\n    if (this.controller) {\n      this.stopListening(this.controller);\n      this.stopListening(this.controller.state);\n      this.controller.remove();\n    }\n  },\n  route: function (route, name, callback) {\n    return Backbone.Router.prototype.route.call(this, getRoute(this, route), name, callback);\n  },\n  navigate: function (fragment, options) {\n    return Backbone.Router.prototype.navigate.call(this, getRoute(this, fragment), options);\n  }\n};\nvar BaseRouter = Backbone.Router.extend(props);\n\nexport { BaseRouter as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}