{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Enums from '../../util/Enums.js';\nimport { ConfigError } from '../../util/Errors.js';\nimport { toQueryString } from '@okta/okta-auth-js';\nimport { getTypedOAuthError, RecoverableError } from '../../util/OAuthErrors.js';\n\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nfunction interactionCodeFlow(_x, _x2) {\n  return _interactionCodeFlow.apply(this, arguments);\n}\nfunction _interactionCodeFlow() {\n  _interactionCodeFlow = _asyncToGenerator(function* (settings, idxResponse) {\n    const {\n      interactionCode: interactionCode\n    } = idxResponse;\n    const authClient = settings.getAuthClient();\n    const transactionMeta = yield authClient.idx.getSavedTransactionMeta();\n    const state = authClient.options.state || (transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.state); // In remediation mode the transaction is owned by another client.\n\n    const isRemediationMode = settings.get('mode') === 'remediation';\n    if (isRemediationMode) {\n      authClient.idx.clearTransactionMeta();\n    } // server-side applications will want to received interaction_code as a query parameter\n    // this option can also be used to force a redirect for client-side/SPA applications\n\n    const shouldRedirect = settings.get('redirect') === 'always';\n    if (shouldRedirect) {\n      const redirectUri = settings.get('redirectUri');\n      if (!redirectUri) {\n        throw new ConfigError('\"redirectUri\" is required');\n      }\n      const qs = toQueryString({\n        'interaction_code': interactionCode,\n        state: state\n      });\n      window.location.assign(redirectUri + qs);\n      return;\n    } // Return a promise (or call success callback) to client-side apps in remediation mode.\n\n    if (isRemediationMode) {\n      settings.callGlobalSuccess(Enums.SUCCESS, {\n        'interaction_code': interactionCode,\n        state: state\n      });\n      return;\n    } // Operating in \"relying-party\" mode. The widget owns this transaction.\n    // Complete the transaction client-side and call success/resolve promise\n\n    if (!transactionMeta) {\n      throw new ConfigError('Could not load transaction data from storage');\n    }\n    const {\n      codeVerifier: codeVerifier\n    } = transactionMeta;\n    return authClient.token.exchangeCodeForTokens({\n      codeVerifier: codeVerifier,\n      interactionCode: interactionCode\n    }).then(({\n      tokens: tokens\n    }) => {\n      settings.callGlobalSuccess(Enums.SUCCESS, {\n        tokens: tokens\n      });\n    }).catch(err => {\n      const typedError = getTypedOAuthError(err);\n      if (typedError instanceof RecoverableError && typedError.is('terminal')) {\n        throw typedError;\n      }\n      settings.callGlobalError(err);\n    }).finally(() => {\n      // clear all meta related to this transaction\n      authClient.idx.clearTransactionMeta();\n    });\n  });\n  return _interactionCodeFlow.apply(this, arguments);\n}\nexport { interactionCodeFlow };","map":{"version":3,"names":["Enums","ConfigError","toQueryString","getTypedOAuthError","RecoverableError","interactionCodeFlow","_x","_x2","_interactionCodeFlow","apply","arguments","_asyncToGenerator","settings","idxResponse","interactionCode","authClient","getAuthClient","transactionMeta","idx","getSavedTransactionMeta","state","options","isRemediationMode","get","clearTransactionMeta","shouldRedirect","redirectUri","qs","window","location","assign","callGlobalSuccess","SUCCESS","codeVerifier","token","exchangeCodeForTokens","then","tokens","catch","err","typedError","is","callGlobalError","finally"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/client/interactionCodeFlow.js"],"sourcesContent":["import Enums from '../../util/Enums.js';\nimport { ConfigError } from '../../util/Errors.js';\nimport { toQueryString } from '@okta/okta-auth-js';\nimport { getTypedOAuthError, RecoverableError } from '../../util/OAuthErrors.js';\n\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nasync function interactionCodeFlow(settings, idxResponse) {\n  const {\n    interactionCode: interactionCode\n  } = idxResponse;\n  const authClient = settings.getAuthClient();\n  const transactionMeta = await authClient.idx.getSavedTransactionMeta();\n  const state = authClient.options.state || (transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.state); // In remediation mode the transaction is owned by another client.\n\n  const isRemediationMode = settings.get('mode') === 'remediation';\n\n  if (isRemediationMode) {\n    authClient.idx.clearTransactionMeta();\n  } // server-side applications will want to received interaction_code as a query parameter\n  // this option can also be used to force a redirect for client-side/SPA applications\n\n\n  const shouldRedirect = settings.get('redirect') === 'always';\n\n  if (shouldRedirect) {\n    const redirectUri = settings.get('redirectUri');\n\n    if (!redirectUri) {\n      throw new ConfigError('\"redirectUri\" is required');\n    }\n\n    const qs = toQueryString({\n      'interaction_code': interactionCode,\n      state: state\n    });\n    window.location.assign(redirectUri + qs);\n    return;\n  } // Return a promise (or call success callback) to client-side apps in remediation mode.\n\n\n  if (isRemediationMode) {\n    settings.callGlobalSuccess(Enums.SUCCESS, {\n      'interaction_code': interactionCode,\n      state: state\n    });\n    return;\n  } // Operating in \"relying-party\" mode. The widget owns this transaction.\n  // Complete the transaction client-side and call success/resolve promise\n\n\n  if (!transactionMeta) {\n    throw new ConfigError('Could not load transaction data from storage');\n  }\n\n  const {\n    codeVerifier: codeVerifier\n  } = transactionMeta;\n  return authClient.token.exchangeCodeForTokens({\n    codeVerifier: codeVerifier,\n    interactionCode: interactionCode\n  }).then(({\n    tokens: tokens\n  }) => {\n    settings.callGlobalSuccess(Enums.SUCCESS, {\n      tokens: tokens\n    });\n  }).catch(err => {\n    const typedError = getTypedOAuthError(err);\n\n    if (typedError instanceof RecoverableError && typedError.is('terminal')) {\n      throw typedError;\n    }\n\n    settings.callGlobalError(err);\n  }).finally(() => {\n    // clear all meta related to this transaction\n    authClient.idx.clearTransactionMeta();\n  });\n}\n\nexport { interactionCodeFlow };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}