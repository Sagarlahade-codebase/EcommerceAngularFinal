{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nfunction emailVerifyCallback(_x) {\n  return _emailVerifyCallback.apply(this, arguments);\n}\nfunction _emailVerifyCallback() {\n  _emailVerifyCallback = _asyncToGenerator(function* (settings) {\n    const authClient = settings.getAuthClient();\n    const idxOptions = {\n      exchangeCodeForTokens: false,\n      // we handle this in interactionCodeFlow.js\n      shouldProceedWithEmailAuthenticator: false // do not auto-select email authenticator\n    };\n    const meta = yield authClient.idx.getSavedTransactionMeta(); // meta can load in another tab using state if it matches\n\n    if (!meta || !meta.interactionHandle) {\n      // Flow can not continue in this tab. Create a synthetic server response and use it to display a message to the user\n      const messages = {\n        type: 'array',\n        value: [\n        // terminal-return-otp-only-no-location.json\n        {\n          'message': 'Enter the OTP in your original browser or device.',\n          'i18n': {\n            'key': 'idx.enter.otp.in.original.tab'\n          },\n          'class': 'INFO'\n        }]\n      };\n      const resp = {\n        neededToProceed: [],\n        // OKTA-382410 so bad that has to leverage rawIdxState\n        rawIdxState: {\n          messages: messages\n        },\n        context: {\n          messages: messages\n        }\n      };\n      return resp;\n    } // Proceed using the OTP code\n\n    const otp = settings.get('otp');\n    const idxResponse = yield authClient.idx.proceed({\n      ...idxOptions,\n      otp: otp\n    });\n    return idxResponse;\n  });\n  return _emailVerifyCallback.apply(this, arguments);\n}\nexport { emailVerifyCallback };","map":{"version":3,"names":["emailVerifyCallback","_x","_emailVerifyCallback","apply","arguments","_asyncToGenerator","settings","authClient","getAuthClient","idxOptions","exchangeCodeForTokens","shouldProceedWithEmailAuthenticator","meta","idx","getSavedTransactionMeta","interactionHandle","messages","type","value","resp","neededToProceed","rawIdxState","context","otp","get","idxResponse","proceed"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/client/emailVerifyCallback.js"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nasync function emailVerifyCallback(settings) {\n  const authClient = settings.getAuthClient();\n  const idxOptions = {\n    exchangeCodeForTokens: false,\n    // we handle this in interactionCodeFlow.js\n    shouldProceedWithEmailAuthenticator: false // do not auto-select email authenticator\n\n  };\n  const meta = await authClient.idx.getSavedTransactionMeta(); // meta can load in another tab using state if it matches\n\n  if (!meta || !meta.interactionHandle) {\n    // Flow can not continue in this tab. Create a synthetic server response and use it to display a message to the user\n    const messages = {\n      type: 'array',\n      value: [// terminal-return-otp-only-no-location.json\n      {\n        'message': 'Enter the OTP in your original browser or device.',\n        'i18n': {\n          'key': 'idx.enter.otp.in.original.tab'\n        },\n        'class': 'INFO'\n      }]\n    };\n    const resp = {\n      neededToProceed: [],\n      // OKTA-382410 so bad that has to leverage rawIdxState\n      rawIdxState: {\n        messages: messages\n      },\n      context: {\n        messages: messages\n      }\n    };\n    return resp;\n  } // Proceed using the OTP code\n\n\n  const otp = settings.get('otp');\n  const idxResponse = await authClient.idx.proceed({ ...idxOptions,\n    otp: otp\n  });\n  return idxResponse;\n}\n\nexport { emailVerifyCallback };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAWeA,mBAAmBA,CAAAC,EAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,CAAlC,WAAmCC,QAAQ,EAAE;IAC3C,MAAMC,UAAU,GAAGD,QAAQ,CAACE,aAAa,CAAC,CAAC;IAC3C,MAAMC,UAAU,GAAG;MACjBC,qBAAqB,EAAE,KAAK;MAC5B;MACAC,mCAAmC,EAAE,KAAK,CAAC;IAE7C,CAAC;IACD,MAAMC,IAAI,SAASL,UAAU,CAACM,GAAG,CAACC,uBAAuB,CAAC,CAAC,CAAC,CAAC;;IAE7D,IAAI,CAACF,IAAI,IAAI,CAACA,IAAI,CAACG,iBAAiB,EAAE;MACpC;MACA,MAAMC,QAAQ,GAAG;QACfC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE;QAAC;QACR;UACE,SAAS,EAAE,mDAAmD;UAC9D,MAAM,EAAE;YACN,KAAK,EAAE;UACT,CAAC;UACD,OAAO,EAAE;QACX,CAAC;MACH,CAAC;MACD,MAAMC,IAAI,GAAG;QACXC,eAAe,EAAE,EAAE;QACnB;QACAC,WAAW,EAAE;UACXL,QAAQ,EAAEA;QACZ,CAAC;QACDM,OAAO,EAAE;UACPN,QAAQ,EAAEA;QACZ;MACF,CAAC;MACD,OAAOG,IAAI;IACb,CAAC,CAAC;;IAGF,MAAMI,GAAG,GAAGjB,QAAQ,CAACkB,GAAG,CAAC,KAAK,CAAC;IAC/B,MAAMC,WAAW,SAASlB,UAAU,CAACM,GAAG,CAACa,OAAO,CAAC;MAAE,GAAGjB,UAAU;MAC9Dc,GAAG,EAAEA;IACP,CAAC,CAAC;IACF,OAAOE,WAAW;EACpB,CAAC;EAAA,OAAAvB,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASJ,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module"}