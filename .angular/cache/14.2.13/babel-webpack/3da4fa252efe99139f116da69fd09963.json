{"ast":null,"code":"import { FORMS, AUTHENTICATOR_KEY } from './RemediationConstants.js';\n\n/* eslint complexity: [2, 25] */\nconst FORMNAME_CLASSNAME_MAPPINGS = {\n  [FORMS.IDENTIFY]: {\n    [FORMS.IDENTIFY]: 'primary-auth',\n    [AUTHENTICATOR_KEY.PASSWORD]: 'primary-auth'\n  },\n  [FORMS.IDENTIFY_RECOVERY]: {\n    [FORMS.IDENTIFY_RECOVERY]: 'forgot-password'\n  },\n  [FORMS.ENROLL_PROFILE]: {\n    [FORMS.ENROLL_PROFILE]: 'registration'\n  },\n  [FORMS.CHALLENGE_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.EMAIL]: 'mfa-verify-passcode',\n    [AUTHENTICATOR_KEY.PASSWORD]: 'mfa-verify-password',\n    sms: 'mfa-verify-passcode',\n    voice: 'mfa-verify-passcode',\n    [AUTHENTICATOR_KEY.SECURITY_QUESTION]: 'mfa-verify-question',\n    [AUTHENTICATOR_KEY.WEBAUTHN]: 'mfa-verify-webauthn',\n    [AUTHENTICATOR_KEY.ON_PREM]: 'mfa-verify-totp',\n    [AUTHENTICATOR_KEY.RSA]: 'mfa-verify-totp',\n    [AUTHENTICATOR_KEY.OV]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.GOOGLE_OTP]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.DUO]: 'mfa-verify-duo',\n    [AUTHENTICATOR_KEY.SYMANTEC_VIP]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.YUBIKEY]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.CUSTOM_APP]: 'mfa-verify'\n  },\n  [FORMS.CHALLENGE_POLL]: {\n    [AUTHENTICATOR_KEY.OV]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.CUSTOM_APP]: 'mfa-verify'\n  },\n  [FORMS.RESEND_PUSH]: {\n    [AUTHENTICATOR_KEY.OV]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.CUSTOM_APP]: 'mfa-verify'\n  },\n  [FORMS.ENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.EMAIL]: 'enroll-email',\n    [AUTHENTICATOR_KEY.PASSWORD]: 'enroll-password',\n    sms: 'enroll-sms',\n    voice: 'enroll-call',\n    [AUTHENTICATOR_KEY.SECURITY_QUESTION]: 'enroll-question',\n    [AUTHENTICATOR_KEY.WEBAUTHN]: 'enroll-webauthn',\n    [AUTHENTICATOR_KEY.ON_PREM]: 'enroll-onprem',\n    [AUTHENTICATOR_KEY.RSA]: 'enroll-rsa',\n    [AUTHENTICATOR_KEY.DUO]: 'enroll-duo',\n    [AUTHENTICATOR_KEY.SYMANTEC_VIP]: 'enroll-symantec',\n    [AUTHENTICATOR_KEY.YUBIKEY]: 'enroll-yubikey'\n  },\n  [FORMS.SELECT_AUTHENTICATOR_ENROLL]: {\n    'select-authenticator-enroll': 'enroll-choices'\n  },\n  [FORMS.SELECT_AUTHENTICATOR_AUTHENTICATE]: {\n    [AUTHENTICATOR_KEY.PASSWORD]: 'forgot-password'\n  },\n  [FORMS.REENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.PASSWORD]: 'password-expired'\n  },\n  [FORMS.RESET_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.PASSWORD]: 'forgot-password'\n  },\n  [FORMS.CONSENT_ADMIN]: {\n    [FORMS.CONSENT_ADMIN]: 'admin-consent-required'\n  },\n  [FORMS.CONSENT_ENDUSER]: {\n    [FORMS.CONSENT_ENDUSER]: 'consent-required'\n  }\n};\nconst getV1ClassName = (formName, authenticatorKey, methodType, isPasswordRecoveryFlow) => {\n  // if password reset flow from identifier page with recoveryAuthenticator add forgot-password class\n  if (isPasswordRecoveryFlow && formName === FORMS.IDENTIFY) {\n    return 'forgot-password';\n  } else {\n    let key = formName;\n    if (authenticatorKey === AUTHENTICATOR_KEY.PHONE) {\n      // Both sms and call have same type phone\n      // currentAuthenticatorEnrollment is during verify and currentAuthenticator during enroll flows\n      key = `${methodType}`;\n    } else if (authenticatorKey) {\n      key = `${authenticatorKey}`;\n    }\n    if (FORMNAME_CLASSNAME_MAPPINGS[formName] && FORMNAME_CLASSNAME_MAPPINGS[formName][key]) {\n      return FORMNAME_CLASSNAME_MAPPINGS[formName][key];\n    } else {\n      return null;\n    }\n  }\n};\nconst getClassNameMapping = (formName, authenticatorKey, methodType, isPasswordRecoveryFlow) => {\n  // 1. Generates V2 class name\n  // If we have a type which is authenticatorType/methodType use that to generate a V2 className\n  // Otherwise just use formName\n  let v2ClassName = formName;\n  if (authenticatorKey) {\n    v2ClassName = v2ClassName + '--' + authenticatorKey;\n  } // 2. do a lookup for any V1 classNames and concat\n\n  let v1ClassName = getV1ClassName(formName, authenticatorKey, methodType, isPasswordRecoveryFlow);\n  const result = [v2ClassName];\n  if (v1ClassName) {\n    result.push(v1ClassName);\n  }\n  return result;\n};\nexport { getClassNameMapping, getV1ClassName };","map":{"version":3,"names":["FORMS","AUTHENTICATOR_KEY","FORMNAME_CLASSNAME_MAPPINGS","IDENTIFY","PASSWORD","IDENTIFY_RECOVERY","ENROLL_PROFILE","CHALLENGE_AUTHENTICATOR","EMAIL","sms","voice","SECURITY_QUESTION","WEBAUTHN","ON_PREM","RSA","OV","GOOGLE_OTP","DUO","SYMANTEC_VIP","YUBIKEY","CUSTOM_APP","CHALLENGE_POLL","RESEND_PUSH","ENROLL_AUTHENTICATOR","SELECT_AUTHENTICATOR_ENROLL","SELECT_AUTHENTICATOR_AUTHENTICATE","REENROLL_AUTHENTICATOR","RESET_AUTHENTICATOR","CONSENT_ADMIN","CONSENT_ENDUSER","getV1ClassName","formName","authenticatorKey","methodType","isPasswordRecoveryFlow","key","PHONE","getClassNameMapping","v2ClassName","v1ClassName","result","push"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/ion/ViewClassNamesFactory.js"],"sourcesContent":["import { FORMS, AUTHENTICATOR_KEY } from './RemediationConstants.js';\n\n/* eslint complexity: [2, 25] */\nconst FORMNAME_CLASSNAME_MAPPINGS = {\n  [FORMS.IDENTIFY]: {\n    [FORMS.IDENTIFY]: 'primary-auth',\n    [AUTHENTICATOR_KEY.PASSWORD]: 'primary-auth'\n  },\n  [FORMS.IDENTIFY_RECOVERY]: {\n    [FORMS.IDENTIFY_RECOVERY]: 'forgot-password'\n  },\n  [FORMS.ENROLL_PROFILE]: {\n    [FORMS.ENROLL_PROFILE]: 'registration'\n  },\n  [FORMS.CHALLENGE_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.EMAIL]: 'mfa-verify-passcode',\n    [AUTHENTICATOR_KEY.PASSWORD]: 'mfa-verify-password',\n    sms: 'mfa-verify-passcode',\n    voice: 'mfa-verify-passcode',\n    [AUTHENTICATOR_KEY.SECURITY_QUESTION]: 'mfa-verify-question',\n    [AUTHENTICATOR_KEY.WEBAUTHN]: 'mfa-verify-webauthn',\n    [AUTHENTICATOR_KEY.ON_PREM]: 'mfa-verify-totp',\n    [AUTHENTICATOR_KEY.RSA]: 'mfa-verify-totp',\n    [AUTHENTICATOR_KEY.OV]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.GOOGLE_OTP]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.DUO]: 'mfa-verify-duo',\n    [AUTHENTICATOR_KEY.SYMANTEC_VIP]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.YUBIKEY]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.CUSTOM_APP]: 'mfa-verify'\n  },\n  [FORMS.CHALLENGE_POLL]: {\n    [AUTHENTICATOR_KEY.OV]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.CUSTOM_APP]: 'mfa-verify'\n  },\n  [FORMS.RESEND_PUSH]: {\n    [AUTHENTICATOR_KEY.OV]: 'mfa-verify',\n    [AUTHENTICATOR_KEY.CUSTOM_APP]: 'mfa-verify'\n  },\n  [FORMS.ENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.EMAIL]: 'enroll-email',\n    [AUTHENTICATOR_KEY.PASSWORD]: 'enroll-password',\n    sms: 'enroll-sms',\n    voice: 'enroll-call',\n    [AUTHENTICATOR_KEY.SECURITY_QUESTION]: 'enroll-question',\n    [AUTHENTICATOR_KEY.WEBAUTHN]: 'enroll-webauthn',\n    [AUTHENTICATOR_KEY.ON_PREM]: 'enroll-onprem',\n    [AUTHENTICATOR_KEY.RSA]: 'enroll-rsa',\n    [AUTHENTICATOR_KEY.DUO]: 'enroll-duo',\n    [AUTHENTICATOR_KEY.SYMANTEC_VIP]: 'enroll-symantec',\n    [AUTHENTICATOR_KEY.YUBIKEY]: 'enroll-yubikey'\n  },\n  [FORMS.SELECT_AUTHENTICATOR_ENROLL]: {\n    'select-authenticator-enroll': 'enroll-choices'\n  },\n  [FORMS.SELECT_AUTHENTICATOR_AUTHENTICATE]: {\n    [AUTHENTICATOR_KEY.PASSWORD]: 'forgot-password'\n  },\n  [FORMS.REENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.PASSWORD]: 'password-expired'\n  },\n  [FORMS.RESET_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.PASSWORD]: 'forgot-password'\n  },\n  [FORMS.CONSENT_ADMIN]: {\n    [FORMS.CONSENT_ADMIN]: 'admin-consent-required'\n  },\n  [FORMS.CONSENT_ENDUSER]: {\n    [FORMS.CONSENT_ENDUSER]: 'consent-required'\n  }\n};\n\nconst getV1ClassName = (formName, authenticatorKey, methodType, isPasswordRecoveryFlow) => {\n  // if password reset flow from identifier page with recoveryAuthenticator add forgot-password class\n  if (isPasswordRecoveryFlow && formName === FORMS.IDENTIFY) {\n    return 'forgot-password';\n  } else {\n    let key = formName;\n\n    if (authenticatorKey === AUTHENTICATOR_KEY.PHONE) {\n      // Both sms and call have same type phone\n      // currentAuthenticatorEnrollment is during verify and currentAuthenticator during enroll flows\n      key = `${methodType}`;\n    } else if (authenticatorKey) {\n      key = `${authenticatorKey}`;\n    }\n\n    if (FORMNAME_CLASSNAME_MAPPINGS[formName] && FORMNAME_CLASSNAME_MAPPINGS[formName][key]) {\n      return FORMNAME_CLASSNAME_MAPPINGS[formName][key];\n    } else {\n      return null;\n    }\n  }\n};\n\nconst getClassNameMapping = (formName, authenticatorKey, methodType, isPasswordRecoveryFlow) => {\n  // 1. Generates V2 class name\n  // If we have a type which is authenticatorType/methodType use that to generate a V2 className\n  // Otherwise just use formName\n  let v2ClassName = formName;\n\n  if (authenticatorKey) {\n    v2ClassName = v2ClassName + '--' + authenticatorKey;\n  } // 2. do a lookup for any V1 classNames and concat\n\n\n  let v1ClassName = getV1ClassName(formName, authenticatorKey, methodType, isPasswordRecoveryFlow);\n  const result = [v2ClassName];\n\n  if (v1ClassName) {\n    result.push(v1ClassName);\n  }\n\n  return result;\n};\n\nexport { getClassNameMapping, getV1ClassName };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}