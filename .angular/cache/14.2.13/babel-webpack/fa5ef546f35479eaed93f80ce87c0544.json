{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getWithoutPrompt } from './getWithoutPrompt.js';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nfunction renewTokens(_x, _x2) {\n  return _renewTokens.apply(this, arguments);\n}\nfunction _renewTokens() {\n  _renewTokens = _asyncToGenerator(function* (sdk, options) {\n    const tokens = sdk.tokenManager.getTokensSync();\n    if (tokens.refreshToken) {\n      return renewTokensWithRefresh(sdk, options || {}, tokens.refreshToken);\n    }\n    if (!tokens.accessToken && !tokens.idToken) {\n      throw new AuthSdkError('renewTokens() was called but there is no existing token');\n    }\n    const accessToken = tokens.accessToken || {};\n    const idToken = tokens.idToken || {};\n    const scopes = accessToken.scopes || idToken.scopes;\n    if (!scopes) {\n      throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');\n    }\n    const authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;\n    if (!authorizeUrl) {\n      throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');\n    }\n    const userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;\n    const issuer = idToken.issuer || sdk.options.issuer;\n    options = Object.assign({\n      scopes,\n      authorizeUrl,\n      userinfoUrl,\n      issuer\n    }, options);\n    if (sdk.options.pkce) {\n      options.responseType = 'code';\n    } else {\n      const {\n        responseType\n      } = getDefaultTokenParams(sdk);\n      options.responseType = responseType;\n    }\n    return getWithoutPrompt(sdk, options).then(res => res.tokens);\n  });\n  return _renewTokens.apply(this, arguments);\n}\nexport { renewTokens };","map":{"version":3,"names":["AuthSdkError","getWithoutPrompt","renewTokensWithRefresh","getDefaultTokenParams","renewTokens","_x","_x2","_renewTokens","apply","arguments","_asyncToGenerator","sdk","options","tokens","tokenManager","getTokensSync","refreshToken","accessToken","idToken","scopes","authorizeUrl","userinfoUrl","issuer","Object","assign","pkce","responseType","then","res"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/renewTokens.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getWithoutPrompt } from './getWithoutPrompt.js';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\n\nasync function renewTokens(sdk, options) {\n    const tokens = sdk.tokenManager.getTokensSync();\n    if (tokens.refreshToken) {\n        return renewTokensWithRefresh(sdk, options || {}, tokens.refreshToken);\n    }\n    if (!tokens.accessToken && !tokens.idToken) {\n        throw new AuthSdkError('renewTokens() was called but there is no existing token');\n    }\n    const accessToken = tokens.accessToken || {};\n    const idToken = tokens.idToken || {};\n    const scopes = accessToken.scopes || idToken.scopes;\n    if (!scopes) {\n        throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');\n    }\n    const authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;\n    if (!authorizeUrl) {\n        throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');\n    }\n    const userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;\n    const issuer = idToken.issuer || sdk.options.issuer;\n    options = Object.assign({\n        scopes,\n        authorizeUrl,\n        userinfoUrl,\n        issuer\n    }, options);\n    if (sdk.options.pkce) {\n        options.responseType = 'code';\n    }\n    else {\n        const { responseType } = getDefaultTokenParams(sdk);\n        options.responseType = responseType;\n    }\n    return getWithoutPrompt(sdk, options)\n        .then(res => res.tokens);\n}\n\nexport { renewTokens };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,YAAY,MAAM,2BAA2B;AACpD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,qBAAqB,QAAQ,8BAA8B;AACpE,OAAO,qBAAqB;AAC5B,OAAO,uBAAuB;AAAC,SAEhBC,WAAWA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,aAAA;EAAAA,YAAA,GAAAG,iBAAA,CAA1B,WAA2BC,GAAG,EAAEC,OAAO,EAAE;IACrC,MAAMC,MAAM,GAAGF,GAAG,CAACG,YAAY,CAACC,aAAa,CAAC,CAAC;IAC/C,IAAIF,MAAM,CAACG,YAAY,EAAE;MACrB,OAAOd,sBAAsB,CAACS,GAAG,EAAEC,OAAO,IAAI,CAAC,CAAC,EAAEC,MAAM,CAACG,YAAY,CAAC;IAC1E;IACA,IAAI,CAACH,MAAM,CAACI,WAAW,IAAI,CAACJ,MAAM,CAACK,OAAO,EAAE;MACxC,MAAM,IAAIlB,YAAY,CAAC,yDAAyD,CAAC;IACrF;IACA,MAAMiB,WAAW,GAAGJ,MAAM,CAACI,WAAW,IAAI,CAAC,CAAC;IAC5C,MAAMC,OAAO,GAAGL,MAAM,CAACK,OAAO,IAAI,CAAC,CAAC;IACpC,MAAMC,MAAM,GAAGF,WAAW,CAACE,MAAM,IAAID,OAAO,CAACC,MAAM;IACnD,IAAI,CAACA,MAAM,EAAE;MACT,MAAM,IAAInB,YAAY,CAAC,oDAAoD,CAAC;IAChF;IACA,MAAMoB,YAAY,GAAGH,WAAW,CAACG,YAAY,IAAIF,OAAO,CAACE,YAAY;IACrE,IAAI,CAACA,YAAY,EAAE;MACf,MAAM,IAAIpB,YAAY,CAAC,0DAA0D,CAAC;IACtF;IACA,MAAMqB,WAAW,GAAGJ,WAAW,CAACI,WAAW,IAAIV,GAAG,CAACC,OAAO,CAACS,WAAW;IACtE,MAAMC,MAAM,GAAGJ,OAAO,CAACI,MAAM,IAAIX,GAAG,CAACC,OAAO,CAACU,MAAM;IACnDV,OAAO,GAAGW,MAAM,CAACC,MAAM,CAAC;MACpBL,MAAM;MACNC,YAAY;MACZC,WAAW;MACXC;IACJ,CAAC,EAAEV,OAAO,CAAC;IACX,IAAID,GAAG,CAACC,OAAO,CAACa,IAAI,EAAE;MAClBb,OAAO,CAACc,YAAY,GAAG,MAAM;IACjC,CAAC,MACI;MACD,MAAM;QAAEA;MAAa,CAAC,GAAGvB,qBAAqB,CAACQ,GAAG,CAAC;MACnDC,OAAO,CAACc,YAAY,GAAGA,YAAY;IACvC;IACA,OAAOzB,gBAAgB,CAACU,GAAG,EAAEC,OAAO,CAAC,CAChCe,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACf,MAAM,CAAC;EAChC,CAAC;EAAA,OAAAN,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASL,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}