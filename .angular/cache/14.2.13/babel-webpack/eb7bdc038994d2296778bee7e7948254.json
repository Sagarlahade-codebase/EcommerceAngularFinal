{"ast":null,"code":"import oktaJQueryStatic from './jquery-wrapper.js';\nimport oktaUnderscore from './underscore-wrapper.js';\nimport BaseRouter from './BaseRouter.js';\nimport SettingsModel from './SettingsModel.js';\nimport StateMachine from './StateMachine.js';\nimport BaseView from '../views/BaseView.js';\nfunction clean(obj) {\n  const res = {};\n  oktaUnderscore.each(obj, function (value, key) {\n    if (!oktaUnderscore.isNull(value)) {\n      res[key] = value;\n    }\n  });\n  return res;\n}\nconst proto = /** @lends module:Okta.Controller.prototype */\n{\n  preinitialize: function (options = {}) {\n    // If 'state' is passed down as options, use it, else create a 'new StateMachine()'\n    this.state = oktaUnderscore.result(this, 'state');\n    const hasStateBeenInitialized = this.state instanceof StateMachine || options.state instanceof StateMachine;\n    if (!hasStateBeenInitialized) {\n      const stateData = oktaUnderscore.defaults(clean(options.state), this.state || {}); // TODO:\n      // `framework/View.js set `this.state = options.state.`.\n      // Therefore we could consider to do\n      // 1. `options.state = new StateMachine()`\n      // 2. remove `delete options.state`\n\n      this.state = new StateMachine(stateData);\n      delete options.state;\n    }\n    if (!options.settings) {\n      // allow the controller to live without a router\n      options.settings = new SettingsModel(oktaUnderscore.omit(options || {}, 'el'));\n      this.listen('notification', BaseRouter.prototype._notify);\n      this.listen('confirmation', BaseRouter.prototype._confirm);\n    }\n    BaseView.prototype.preinitialize.call(this, options);\n  },\n  constructor: function (options = {}) {\n    BaseView.call(this, options);\n    this.listenTo(this.state, '__invoke__', function () {\n      const args = oktaUnderscore.toArray(arguments);\n      const method = args.shift();\n      if (oktaUnderscore.isFunction(this[method])) {\n        this[method].apply(this, args);\n      }\n    });\n    let MainView; // if `this.View` is already a Backbone View\n\n    if (this.View && this.View.isCourageView) {\n      MainView = this.View;\n    } // if `this.View` is a pure function that returns a Backbone View\n    else if (oktaUnderscore.result(this, 'View') && oktaUnderscore.result(this, 'View').isCourageView) {\n      MainView = oktaUnderscore.result(this, 'View');\n    }\n    if (MainView) {\n      this.add(new MainView(this.toJSON()));\n    }\n  },\n  /**\n   * The default values of our application state\n   * @type {Object}\n   * @default {}\n   */\n  state: {},\n  /**\n   * The main view this controller operate on\n   * @type {module:Okta.View}\n   * @default null\n   */\n  View: null,\n  /**\n   * Renders the {@link module:Okta.Controller#View|main view} after the DOM is ready\n   * in case the controller is the root component of the page (e.g there's no router)\n   */\n  render: function () {\n    const args = arguments;\n    const self = this;\n    oktaJQueryStatic(function () {\n      BaseView.prototype.render.apply(self, args);\n    });\n    return this;\n  },\n  /**\n   * Creates the view constructor options\n   * @param {Object} [options] Extra options\n   * @return {Object} The view constructor options\n   */\n  toJSON: function (options) {\n    return oktaUnderscore.extend(oktaUnderscore.pick(this, 'state', 'settings', 'collection', 'model'), options || {});\n  },\n  /**\n   * Removes the child views, empty the DOM element and stop listening to events\n   */\n  remove: function () {\n    this.removeChildren();\n    this.stopListening();\n    this.$el.empty();\n    return this;\n  }\n};\n/**\n * A Controller is our application control flow component.\n *\n * Typically it will:\n * - Initialize the models, controller and main views\n * - Listen to events\n * - Create, read, update and delete models\n * - Create modal dialogs, confirmation dialogs and alert dialogs\n * - Control the application flow\n *\n * The constructor is responsible for:\n * - Create the application state object\n * - Assign or creates the application settings object\n * - Create an instance of the main view with the relevant parameters\n *\n * See:\n * [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World),\n * [Test Spec](https://github.com/okta/okta-ui/blob/master/packages/courage/test/spec/util/BaseController_spec.js)\n *\n * @class module:Okta.Controller\n * @param {Object} options Options Hash\n * @param {SettingsModel} [options.settings] Application Settings Model\n * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM\n */\n\nvar BaseController = BaseView.extend(proto);\nexport { BaseController as default };","map":{"version":3,"names":["oktaJQueryStatic","oktaUnderscore","BaseRouter","SettingsModel","StateMachine","BaseView","clean","obj","res","each","value","key","isNull","proto","preinitialize","options","state","result","hasStateBeenInitialized","stateData","defaults","settings","omit","listen","prototype","_notify","_confirm","call","constructor","listenTo","args","toArray","arguments","method","shift","isFunction","apply","MainView","View","isCourageView","add","toJSON","render","self","extend","pick","remove","removeChildren","stopListening","$el","empty","BaseController","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/@okta/courage-dist/esm/src/courage/util/BaseController.js"],"sourcesContent":["import oktaJQueryStatic from './jquery-wrapper.js';\nimport oktaUnderscore from './underscore-wrapper.js';\nimport BaseRouter from './BaseRouter.js';\nimport SettingsModel from './SettingsModel.js';\nimport StateMachine from './StateMachine.js';\nimport BaseView from '../views/BaseView.js';\n\nfunction clean(obj) {\n  const res = {};\n  oktaUnderscore.each(obj, function (value, key) {\n    if (!oktaUnderscore.isNull(value)) {\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nconst proto =\n/** @lends module:Okta.Controller.prototype */\n{\n  preinitialize: function (options = {}) {\n    // If 'state' is passed down as options, use it, else create a 'new StateMachine()'\n    this.state = oktaUnderscore.result(this, 'state');\n    const hasStateBeenInitialized = this.state instanceof StateMachine || options.state instanceof StateMachine;\n\n    if (!hasStateBeenInitialized) {\n      const stateData = oktaUnderscore.defaults(clean(options.state), this.state || {}); // TODO:\n      // `framework/View.js set `this.state = options.state.`.\n      // Therefore we could consider to do\n      // 1. `options.state = new StateMachine()`\n      // 2. remove `delete options.state`\n\n      this.state = new StateMachine(stateData);\n      delete options.state;\n    }\n\n    if (!options.settings) {\n      // allow the controller to live without a router\n      options.settings = new SettingsModel(oktaUnderscore.omit(options || {}, 'el'));\n      this.listen('notification', BaseRouter.prototype._notify);\n      this.listen('confirmation', BaseRouter.prototype._confirm);\n    }\n\n    BaseView.prototype.preinitialize.call(this, options);\n  },\n  constructor: function (options = {}) {\n    BaseView.call(this, options);\n    this.listenTo(this.state, '__invoke__', function () {\n      const args = oktaUnderscore.toArray(arguments);\n      const method = args.shift();\n\n      if (oktaUnderscore.isFunction(this[method])) {\n        this[method].apply(this, args);\n      }\n    });\n    let MainView; // if `this.View` is already a Backbone View\n\n    if (this.View && this.View.isCourageView) {\n      MainView = this.View;\n    } // if `this.View` is a pure function that returns a Backbone View\n    else if (oktaUnderscore.result(this, 'View') && oktaUnderscore.result(this, 'View').isCourageView) {\n      MainView = oktaUnderscore.result(this, 'View');\n    }\n\n    if (MainView) {\n      this.add(new MainView(this.toJSON()));\n    }\n  },\n\n  /**\n   * The default values of our application state\n   * @type {Object}\n   * @default {}\n   */\n  state: {},\n\n  /**\n   * The main view this controller operate on\n   * @type {module:Okta.View}\n   * @default null\n   */\n  View: null,\n\n  /**\n   * Renders the {@link module:Okta.Controller#View|main view} after the DOM is ready\n   * in case the controller is the root component of the page (e.g there's no router)\n   */\n  render: function () {\n    const args = arguments;\n    const self = this;\n    oktaJQueryStatic(function () {\n      BaseView.prototype.render.apply(self, args);\n    });\n    return this;\n  },\n\n  /**\n   * Creates the view constructor options\n   * @param {Object} [options] Extra options\n   * @return {Object} The view constructor options\n   */\n  toJSON: function (options) {\n    return oktaUnderscore.extend(oktaUnderscore.pick(this, 'state', 'settings', 'collection', 'model'), options || {});\n  },\n\n  /**\n   * Removes the child views, empty the DOM element and stop listening to events\n   */\n  remove: function () {\n    this.removeChildren();\n    this.stopListening();\n    this.$el.empty();\n    return this;\n  }\n};\n/**\n * A Controller is our application control flow component.\n *\n * Typically it will:\n * - Initialize the models, controller and main views\n * - Listen to events\n * - Create, read, update and delete models\n * - Create modal dialogs, confirmation dialogs and alert dialogs\n * - Control the application flow\n *\n * The constructor is responsible for:\n * - Create the application state object\n * - Assign or creates the application settings object\n * - Create an instance of the main view with the relevant parameters\n *\n * See:\n * [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World),\n * [Test Spec](https://github.com/okta/okta-ui/blob/master/packages/courage/test/spec/util/BaseController_spec.js)\n *\n * @class module:Okta.Controller\n * @param {Object} options Options Hash\n * @param {SettingsModel} [options.settings] Application Settings Model\n * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM\n */\n\nvar BaseController = BaseView.extend(proto);\n\nexport { BaseController as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}