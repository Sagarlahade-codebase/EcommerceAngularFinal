{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\nimport { getAuthenticatorFromRemediation } from './util.js';\nclass AuthenticatorEnrollmentData extends AuthenticatorData {\n  mapAuthenticator() {\n    const authenticatorData = this.getAuthenticatorData();\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    return {\n      id: authenticatorFromRemediation.form.value.find(({\n        name\n      }) => name === 'id').value,\n      methodType: authenticatorData.methodType,\n      phoneNumber: authenticatorData.phoneNumber\n    };\n  }\n  getInputAuthenticator(remediation) {\n    return [{\n      name: 'methodType',\n      type: 'string'\n    }, {\n      name: 'phoneNumber',\n      label: 'Phone Number',\n      type: 'string'\n    }].map(item => {\n      const value = remediation.form.value.find(val => val.name === item.name);\n      return Object.assign(Object.assign({}, value), item);\n    });\n  }\n  mapAuthenticatorDataFromValues(data) {\n    data = super.mapAuthenticatorDataFromValues(data);\n    const {\n      phoneNumber\n    } = this.values;\n    if (!data && !phoneNumber) {\n      return;\n    }\n    return Object.assign(Object.assign({}, data && data), phoneNumber && {\n      phoneNumber\n    });\n  }\n}\nAuthenticatorEnrollmentData.remediationName = 'authenticator-enrollment-data';\nexport { AuthenticatorEnrollmentData };","map":{"version":3,"names":["AuthenticatorData","getAuthenticatorFromRemediation","AuthenticatorEnrollmentData","mapAuthenticator","authenticatorData","getAuthenticatorData","authenticatorFromRemediation","remediation","id","form","value","find","name","methodType","phoneNumber","getInputAuthenticator","type","label","map","item","val","Object","assign","mapAuthenticatorDataFromValues","data","values","remediationName"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/AuthenticatorEnrollmentData.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\nimport { getAuthenticatorFromRemediation } from './util.js';\n\nclass AuthenticatorEnrollmentData extends AuthenticatorData {\n    mapAuthenticator() {\n        const authenticatorData = this.getAuthenticatorData();\n        const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n        return {\n            id: authenticatorFromRemediation.form.value\n                .find(({ name }) => name === 'id').value,\n            methodType: authenticatorData.methodType,\n            phoneNumber: authenticatorData.phoneNumber,\n        };\n    }\n    getInputAuthenticator(remediation) {\n        return [\n            { name: 'methodType', type: 'string' },\n            { name: 'phoneNumber', label: 'Phone Number', type: 'string' }\n        ].map(item => {\n            const value = remediation.form.value.find(val => val.name === item.name);\n            return Object.assign(Object.assign({}, value), item);\n        });\n    }\n    mapAuthenticatorDataFromValues(data) {\n        data = super.mapAuthenticatorDataFromValues(data);\n        const { phoneNumber } = this.values;\n        if (!data && !phoneNumber) {\n            return;\n        }\n        return Object.assign(Object.assign({}, (data && data)), (phoneNumber && { phoneNumber }));\n    }\n}\nAuthenticatorEnrollmentData.remediationName = 'authenticator-enrollment-data';\n\nexport { AuthenticatorEnrollmentData };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,+BAA+B,QAAQ,WAAW;AAE3D,MAAMC,2BAA2B,SAASF,iBAAiB,CAAC;EACxDG,gBAAgBA,CAAA,EAAG;IACf,MAAMC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,CAAC,CAAC;IACrD,MAAMC,4BAA4B,GAAGL,+BAA+B,CAAC,IAAI,CAACM,WAAW,CAAC;IACtF,OAAO;MACHC,EAAE,EAAEF,4BAA4B,CAACG,IAAI,CAACC,KAAK,CACtCC,IAAI,CAAC,CAAC;QAAEC;MAAK,CAAC,KAAKA,IAAI,KAAK,IAAI,CAAC,CAACF,KAAK;MAC5CG,UAAU,EAAET,iBAAiB,CAACS,UAAU;MACxCC,WAAW,EAAEV,iBAAiB,CAACU;IACnC,CAAC;EACL;EACAC,qBAAqBA,CAACR,WAAW,EAAE;IAC/B,OAAO,CACH;MAAEK,IAAI,EAAE,YAAY;MAAEI,IAAI,EAAE;IAAS,CAAC,EACtC;MAAEJ,IAAI,EAAE,aAAa;MAAEK,KAAK,EAAE,cAAc;MAAED,IAAI,EAAE;IAAS,CAAC,CACjE,CAACE,GAAG,CAACC,IAAI,IAAI;MACV,MAAMT,KAAK,GAAGH,WAAW,CAACE,IAAI,CAACC,KAAK,CAACC,IAAI,CAACS,GAAG,IAAIA,GAAG,CAACR,IAAI,KAAKO,IAAI,CAACP,IAAI,CAAC;MACxE,OAAOS,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEZ,KAAK,CAAC,EAAES,IAAI,CAAC;IACxD,CAAC,CAAC;EACN;EACAI,8BAA8BA,CAACC,IAAI,EAAE;IACjCA,IAAI,GAAG,KAAK,CAACD,8BAA8B,CAACC,IAAI,CAAC;IACjD,MAAM;MAAEV;IAAY,CAAC,GAAG,IAAI,CAACW,MAAM;IACnC,IAAI,CAACD,IAAI,IAAI,CAACV,WAAW,EAAE;MACvB;IACJ;IACA,OAAOO,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAGE,IAAI,IAAIA,IAAK,CAAC,EAAGV,WAAW,IAAI;MAAEA;IAAY,CAAE,CAAC;EAC7F;AACJ;AACAZ,2BAA2B,CAACwB,eAAe,GAAG,+BAA+B;AAE7E,SAASxB,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module"}