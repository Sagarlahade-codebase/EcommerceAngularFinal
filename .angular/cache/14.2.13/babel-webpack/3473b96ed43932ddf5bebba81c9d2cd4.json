{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { removeNils } from '../../util/object.js';\nimport { isString } from '../../util/types.js';\nimport { toQueryString } from '../../util/url.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nfunction convertTokenParamsToOAuthParams(tokenParams) {\n  if (!tokenParams.clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n  }\n  if (isString(tokenParams.responseType) && tokenParams.responseType.indexOf(' ') !== -1) {\n    throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');\n  }\n  var oauthParams = {\n    'client_id': tokenParams.clientId,\n    'code_challenge': tokenParams.codeChallenge,\n    'code_challenge_method': tokenParams.codeChallengeMethod,\n    'display': tokenParams.display,\n    'idp': tokenParams.idp,\n    'idp_scope': tokenParams.idpScope,\n    'login_hint': tokenParams.loginHint,\n    'max_age': tokenParams.maxAge,\n    'nonce': tokenParams.nonce,\n    'prompt': tokenParams.prompt,\n    'redirect_uri': tokenParams.redirectUri,\n    'response_mode': tokenParams.responseMode,\n    'response_type': tokenParams.responseType,\n    'sessionToken': tokenParams.sessionToken,\n    'state': tokenParams.state\n  };\n  oauthParams = removeNils(oauthParams);\n  ['idp_scope', 'response_type'].forEach(function (mayBeArray) {\n    if (Array.isArray(oauthParams[mayBeArray])) {\n      oauthParams[mayBeArray] = oauthParams[mayBeArray].join(' ');\n    }\n  });\n  if (tokenParams.responseType.indexOf('id_token') !== -1 && tokenParams.scopes.indexOf('openid') === -1) {\n    throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');\n  } else {\n    oauthParams.scope = tokenParams.scopes.join(' ');\n  }\n  return oauthParams;\n}\nfunction buildAuthorizeParams(tokenParams) {\n  var oauthQueryParams = convertTokenParamsToOAuthParams(tokenParams);\n  return toQueryString(Object.assign(Object.assign({}, oauthQueryParams), tokenParams.extraParams && Object.assign({}, tokenParams.extraParams)));\n}\nexport { buildAuthorizeParams, convertTokenParamsToOAuthParams };","map":{"version":3,"names":["removeNils","isString","toQueryString","AuthSdkError","convertTokenParamsToOAuthParams","tokenParams","clientId","responseType","indexOf","oauthParams","codeChallenge","codeChallengeMethod","display","idp","idpScope","loginHint","maxAge","nonce","prompt","redirectUri","responseMode","sessionToken","state","forEach","mayBeArray","Array","isArray","join","scopes","scope","buildAuthorizeParams","oauthQueryParams","Object","assign","extraParams"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/endpoints/authorize.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { removeNils } from '../../util/object.js';\nimport { isString } from '../../util/types.js';\nimport { toQueryString } from '../../util/url.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\n\nfunction convertTokenParamsToOAuthParams(tokenParams) {\n    if (!tokenParams.clientId) {\n        throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n    }\n    if (isString(tokenParams.responseType) && tokenParams.responseType.indexOf(' ') !== -1) {\n        throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');\n    }\n    var oauthParams = {\n        'client_id': tokenParams.clientId,\n        'code_challenge': tokenParams.codeChallenge,\n        'code_challenge_method': tokenParams.codeChallengeMethod,\n        'display': tokenParams.display,\n        'idp': tokenParams.idp,\n        'idp_scope': tokenParams.idpScope,\n        'login_hint': tokenParams.loginHint,\n        'max_age': tokenParams.maxAge,\n        'nonce': tokenParams.nonce,\n        'prompt': tokenParams.prompt,\n        'redirect_uri': tokenParams.redirectUri,\n        'response_mode': tokenParams.responseMode,\n        'response_type': tokenParams.responseType,\n        'sessionToken': tokenParams.sessionToken,\n        'state': tokenParams.state,\n    };\n    oauthParams = removeNils(oauthParams);\n    ['idp_scope', 'response_type'].forEach(function (mayBeArray) {\n        if (Array.isArray(oauthParams[mayBeArray])) {\n            oauthParams[mayBeArray] = oauthParams[mayBeArray].join(' ');\n        }\n    });\n    if (tokenParams.responseType.indexOf('id_token') !== -1 &&\n        tokenParams.scopes.indexOf('openid') === -1) {\n        throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');\n    }\n    else {\n        oauthParams.scope = tokenParams.scopes.join(' ');\n    }\n    return oauthParams;\n}\nfunction buildAuthorizeParams(tokenParams) {\n    var oauthQueryParams = convertTokenParamsToOAuthParams(tokenParams);\n    return toQueryString(Object.assign(Object.assign({}, oauthQueryParams), (tokenParams.extraParams && Object.assign({}, tokenParams.extraParams))));\n}\n\nexport { buildAuthorizeParams, convertTokenParamsToOAuthParams };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,sBAAsB;AACjD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,aAAa,QAAQ,mBAAmB;AACjD,OAAOC,YAAY,MAAM,8BAA8B;AAEvD,SAASC,+BAA+BA,CAACC,WAAW,EAAE;EAClD,IAAI,CAACA,WAAW,CAACC,QAAQ,EAAE;IACvB,MAAM,IAAIH,YAAY,CAAC,yEAAyE,CAAC;EACrG;EACA,IAAIF,QAAQ,CAACI,WAAW,CAACE,YAAY,CAAC,IAAIF,WAAW,CAACE,YAAY,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IACpF,MAAM,IAAIL,YAAY,CAAC,0DAA0D,CAAC;EACtF;EACA,IAAIM,WAAW,GAAG;IACd,WAAW,EAAEJ,WAAW,CAACC,QAAQ;IACjC,gBAAgB,EAAED,WAAW,CAACK,aAAa;IAC3C,uBAAuB,EAAEL,WAAW,CAACM,mBAAmB;IACxD,SAAS,EAAEN,WAAW,CAACO,OAAO;IAC9B,KAAK,EAAEP,WAAW,CAACQ,GAAG;IACtB,WAAW,EAAER,WAAW,CAACS,QAAQ;IACjC,YAAY,EAAET,WAAW,CAACU,SAAS;IACnC,SAAS,EAAEV,WAAW,CAACW,MAAM;IAC7B,OAAO,EAAEX,WAAW,CAACY,KAAK;IAC1B,QAAQ,EAAEZ,WAAW,CAACa,MAAM;IAC5B,cAAc,EAAEb,WAAW,CAACc,WAAW;IACvC,eAAe,EAAEd,WAAW,CAACe,YAAY;IACzC,eAAe,EAAEf,WAAW,CAACE,YAAY;IACzC,cAAc,EAAEF,WAAW,CAACgB,YAAY;IACxC,OAAO,EAAEhB,WAAW,CAACiB;EACzB,CAAC;EACDb,WAAW,GAAGT,UAAU,CAACS,WAAW,CAAC;EACrC,CAAC,WAAW,EAAE,eAAe,CAAC,CAACc,OAAO,CAAC,UAAUC,UAAU,EAAE;IACzD,IAAIC,KAAK,CAACC,OAAO,CAACjB,WAAW,CAACe,UAAU,CAAC,CAAC,EAAE;MACxCf,WAAW,CAACe,UAAU,CAAC,GAAGf,WAAW,CAACe,UAAU,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC;IAC/D;EACJ,CAAC,CAAC;EACF,IAAItB,WAAW,CAACE,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IACnDH,WAAW,CAACuB,MAAM,CAACpB,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;IAC7C,MAAM,IAAIL,YAAY,CAAC,mFAAmF,CAAC;EAC/G,CAAC,MACI;IACDM,WAAW,CAACoB,KAAK,GAAGxB,WAAW,CAACuB,MAAM,CAACD,IAAI,CAAC,GAAG,CAAC;EACpD;EACA,OAAOlB,WAAW;AACtB;AACA,SAASqB,oBAAoBA,CAACzB,WAAW,EAAE;EACvC,IAAI0B,gBAAgB,GAAG3B,+BAA+B,CAACC,WAAW,CAAC;EACnE,OAAOH,aAAa,CAAC8B,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,gBAAgB,CAAC,EAAG1B,WAAW,CAAC6B,WAAW,IAAIF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE5B,WAAW,CAAC6B,WAAW,CAAE,CAAC,CAAC;AACrJ;AAEA,SAASJ,oBAAoB,EAAE1B,+BAA+B","ignoreList":[]},"metadata":{},"sourceType":"module"}