{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from './errors/AuthSdkError.js';\nimport { REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_NONCE_COOKIE_NAME, REDIRECT_STATE_COOKIE_NAME } from './constants.js';\nimport { isTransactionMeta, isOAuthTransactionMeta } from './types/Transaction.js';\nimport './idx/types/api.js';\nimport { warn } from './util/console.js';\nimport './myaccount/types.js';\nimport { isRawIdxResponse } from './idx/types/idx-js.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\nclass TransactionManager {\n  constructor(options) {\n    this.storageManager = options.storageManager;\n    this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;\n    this.saveNonceCookie = options.saveNonceCookie === false ? false : true;\n    this.saveStateCookie = options.saveStateCookie === false ? false : true;\n    this.saveParamsCookie = options.saveParamsCookie === false ? false : true;\n    this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n    this.saveLastResponse = options.saveLastResponse === false ? false : true;\n    this.options = options;\n  }\n  clear(options = {}) {\n    const transactionStorage = this.storageManager.getTransactionStorage();\n    const meta = transactionStorage.getStorage();\n    transactionStorage.clearStorage();\n    if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n      const state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n      if (state) {\n        clearTransactionFromSharedStorage(this.storageManager, state);\n      }\n    }\n    if (options.clearIdxResponse !== false) {\n      this.clearIdxResponse();\n    }\n    if (!this.legacyWidgetSupport) {\n      return;\n    }\n    if (options.oauth) {\n      this.clearLegacyOAuthParams();\n    }\n    if (options.pkce) {\n      this.clearLegacyPKCE();\n    }\n  }\n  save(meta, options = {}) {\n    let storage = this.storageManager.getTransactionStorage();\n    const obj = storage.getStorage();\n    if (isTransactionMeta(obj) && !options.muteWarning) {\n      warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n    }\n    storage.setStorage(meta);\n    if (this.enableSharedStorage && meta.state) {\n      saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n    }\n    if (!options.oauth) {\n      return;\n    }\n    if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {\n      const cookieStorage = this.storageManager.getStorage({\n        storageType: 'cookie'\n      });\n      if (this.saveParamsCookie) {\n        const {\n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        } = meta;\n        const oauthParams = {\n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        };\n        cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);\n      }\n      if (this.saveNonceCookie && meta.nonce) {\n        cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);\n      }\n      if (this.saveStateCookie && meta.state) {\n        cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);\n      }\n    }\n  }\n  exists(options = {}) {\n    try {\n      const meta = this.load(options);\n      return !!meta;\n    } catch (_a) {\n      return false;\n    }\n  }\n  load(options = {}) {\n    let meta;\n    if (this.enableSharedStorage && options.state) {\n      pruneSharedStorage(this.storageManager);\n      meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n    }\n    let storage = this.storageManager.getTransactionStorage();\n    meta = storage.getStorage();\n    if (isTransactionMeta(meta)) {\n      return meta;\n    }\n    if (!this.legacyWidgetSupport) {\n      return null;\n    }\n    if (options.oauth) {\n      try {\n        const oauthParams = this.loadLegacyOAuthParams();\n        Object.assign(meta, oauthParams);\n      } finally {\n        this.clearLegacyOAuthParams();\n      }\n    }\n    if (options.pkce) {\n      try {\n        const pkceMeta = this.loadLegacyPKCE();\n        Object.assign(meta, pkceMeta);\n      } finally {\n        this.clearLegacyPKCE();\n      }\n    }\n    if (isTransactionMeta(meta)) {\n      return meta;\n    }\n    return null;\n  }\n  clearLegacyPKCE() {\n    let storage;\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'localStorage'\n      });\n      storage.clearStorage();\n    }\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'sessionStorage'\n      });\n      storage.clearStorage();\n    }\n  }\n  loadLegacyPKCE() {\n    let storage;\n    let obj;\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'localStorage'\n      });\n      obj = storage.getStorage();\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'sessionStorage'\n      });\n      obj = storage.getStorage();\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n    throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', undefined);\n  }\n  clearLegacyOAuthParams() {\n    let storage;\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'sessionStorage'\n      });\n      storage.clearStorage();\n    }\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'cookie'\n      });\n      storage.clearStorage();\n    }\n  }\n  loadLegacyOAuthParams() {\n    let storage;\n    let oauthParams;\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'sessionStorage'\n      });\n      oauthParams = storage.getStorage();\n    }\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'cookie'\n      });\n      oauthParams = storage.getStorage();\n    }\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n    throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');\n  }\n  saveIdxResponse(data) {\n    if (!this.saveLastResponse) {\n      return;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    if (!storage) {\n      return;\n    }\n    storage.setStorage(data);\n  }\n  loadIdxResponse(options) {\n    if (!this.saveLastResponse) {\n      return null;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    if (!storage) {\n      return null;\n    }\n    const storedValue = storage.getStorage();\n    if (!storedValue || !isRawIdxResponse(storedValue.rawIdxResponse)) {\n      return null;\n    }\n    if (options) {\n      const {\n        stateHandle,\n        interactionHandle\n      } = options;\n      if (stateHandle && storedValue.stateHandle !== stateHandle) {\n        return null;\n      }\n      if (interactionHandle && storedValue.interactionHandle !== interactionHandle) {\n        return null;\n      }\n    }\n    return storedValue;\n  }\n  clearIdxResponse() {\n    if (!this.saveLastResponse) {\n      return;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    storage === null || storage === void 0 ? void 0 : storage.clearStorage();\n  }\n}\nexport { TransactionManager as default };","map":{"version":3,"names":["AuthSdkError","REDIRECT_OAUTH_PARAMS_NAME","REDIRECT_NONCE_COOKIE_NAME","REDIRECT_STATE_COOKIE_NAME","isTransactionMeta","isOAuthTransactionMeta","warn","isRawIdxResponse","clearTransactionFromSharedStorage","saveTransactionToSharedStorage","pruneSharedStorage","loadTransactionFromSharedStorage","TransactionManager","constructor","options","storageManager","legacyWidgetSupport","saveNonceCookie","saveStateCookie","saveParamsCookie","enableSharedStorage","saveLastResponse","clear","transactionStorage","getTransactionStorage","meta","getStorage","clearStorage","clearSharedStorage","state","clearIdxResponse","oauth","clearLegacyOAuthParams","pkce","clearLegacyPKCE","save","storage","obj","muteWarning","setStorage","cookieStorage","storageType","responseType","nonce","scopes","clientId","urls","ignoreSignature","oauthParams","setItem","JSON","stringify","exists","load","_a","loadLegacyOAuthParams","Object","assign","pkceMeta","loadLegacyPKCE","storageUtil","testStorageType","getLegacyPKCEStorage","codeVerifier","undefined","getLegacyOAuthParamsStorage","saveIdxResponse","data","getIdxResponseStorage","loadIdxResponse","storedValue","rawIdxResponse","stateHandle","interactionHandle","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/TransactionManager.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from './errors/AuthSdkError.js';\nimport { REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_NONCE_COOKIE_NAME, REDIRECT_STATE_COOKIE_NAME } from './constants.js';\nimport { isTransactionMeta, isOAuthTransactionMeta } from './types/Transaction.js';\nimport './idx/types/api.js';\nimport { warn } from './util/console.js';\nimport './myaccount/types.js';\nimport { isRawIdxResponse } from './idx/types/idx-js.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\n\nclass TransactionManager {\n    constructor(options) {\n        this.storageManager = options.storageManager;\n        this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;\n        this.saveNonceCookie = options.saveNonceCookie === false ? false : true;\n        this.saveStateCookie = options.saveStateCookie === false ? false : true;\n        this.saveParamsCookie = options.saveParamsCookie === false ? false : true;\n        this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n        this.saveLastResponse = options.saveLastResponse === false ? false : true;\n        this.options = options;\n    }\n    clear(options = {}) {\n        const transactionStorage = this.storageManager.getTransactionStorage();\n        const meta = transactionStorage.getStorage();\n        transactionStorage.clearStorage();\n        if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n            const state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n            if (state) {\n                clearTransactionFromSharedStorage(this.storageManager, state);\n            }\n        }\n        if (options.clearIdxResponse !== false) {\n            this.clearIdxResponse();\n        }\n        if (!this.legacyWidgetSupport) {\n            return;\n        }\n        if (options.oauth) {\n            this.clearLegacyOAuthParams();\n        }\n        if (options.pkce) {\n            this.clearLegacyPKCE();\n        }\n    }\n    save(meta, options = {}) {\n        let storage = this.storageManager.getTransactionStorage();\n        const obj = storage.getStorage();\n        if (isTransactionMeta(obj) && !options.muteWarning) {\n            warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n        }\n        storage.setStorage(meta);\n        if (this.enableSharedStorage && meta.state) {\n            saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n        }\n        if (!options.oauth) {\n            return;\n        }\n        if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {\n            const cookieStorage = this.storageManager.getStorage({ storageType: 'cookie' });\n            if (this.saveParamsCookie) {\n                const { responseType, state, nonce, scopes, clientId, urls, ignoreSignature } = meta;\n                const oauthParams = {\n                    responseType,\n                    state,\n                    nonce,\n                    scopes,\n                    clientId,\n                    urls,\n                    ignoreSignature\n                };\n                cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);\n            }\n            if (this.saveNonceCookie && meta.nonce) {\n                cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);\n            }\n            if (this.saveStateCookie && meta.state) {\n                cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);\n            }\n        }\n    }\n    exists(options = {}) {\n        try {\n            const meta = this.load(options);\n            return !!meta;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    load(options = {}) {\n        let meta;\n        if (this.enableSharedStorage && options.state) {\n            pruneSharedStorage(this.storageManager);\n            meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n            if (isTransactionMeta(meta)) {\n                return meta;\n            }\n        }\n        let storage = this.storageManager.getTransactionStorage();\n        meta = storage.getStorage();\n        if (isTransactionMeta(meta)) {\n            return meta;\n        }\n        if (!this.legacyWidgetSupport) {\n            return null;\n        }\n        if (options.oauth) {\n            try {\n                const oauthParams = this.loadLegacyOAuthParams();\n                Object.assign(meta, oauthParams);\n            }\n            finally {\n                this.clearLegacyOAuthParams();\n            }\n        }\n        if (options.pkce) {\n            try {\n                const pkceMeta = this.loadLegacyPKCE();\n                Object.assign(meta, pkceMeta);\n            }\n            finally {\n                this.clearLegacyPKCE();\n            }\n        }\n        if (isTransactionMeta(meta)) {\n            return meta;\n        }\n        return null;\n    }\n    clearLegacyPKCE() {\n        let storage;\n        if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n            storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'localStorage' });\n            storage.clearStorage();\n        }\n        if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n            storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'sessionStorage' });\n            storage.clearStorage();\n        }\n    }\n    loadLegacyPKCE() {\n        let storage;\n        let obj;\n        if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n            storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'localStorage' });\n            obj = storage.getStorage();\n            if (obj && obj.codeVerifier) {\n                return obj;\n            }\n        }\n        if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n            storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'sessionStorage' });\n            obj = storage.getStorage();\n            if (obj && obj.codeVerifier) {\n                return obj;\n            }\n        }\n        throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', undefined);\n    }\n    clearLegacyOAuthParams() {\n        let storage;\n        if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n            storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'sessionStorage' });\n            storage.clearStorage();\n        }\n        if (this.storageManager.storageUtil.testStorageType('cookie')) {\n            storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'cookie' });\n            storage.clearStorage();\n        }\n    }\n    loadLegacyOAuthParams() {\n        let storage;\n        let oauthParams;\n        if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n            storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'sessionStorage' });\n            oauthParams = storage.getStorage();\n        }\n        if (isOAuthTransactionMeta(oauthParams)) {\n            return oauthParams;\n        }\n        if (this.storageManager.storageUtil.testStorageType('cookie')) {\n            storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'cookie' });\n            oauthParams = storage.getStorage();\n        }\n        if (isOAuthTransactionMeta(oauthParams)) {\n            return oauthParams;\n        }\n        throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');\n    }\n    saveIdxResponse(data) {\n        if (!this.saveLastResponse) {\n            return;\n        }\n        const storage = this.storageManager.getIdxResponseStorage();\n        if (!storage) {\n            return;\n        }\n        storage.setStorage(data);\n    }\n    loadIdxResponse(options) {\n        if (!this.saveLastResponse) {\n            return null;\n        }\n        const storage = this.storageManager.getIdxResponseStorage();\n        if (!storage) {\n            return null;\n        }\n        const storedValue = storage.getStorage();\n        if (!storedValue || !isRawIdxResponse(storedValue.rawIdxResponse)) {\n            return null;\n        }\n        if (options) {\n            const { stateHandle, interactionHandle } = options;\n            if (stateHandle && storedValue.stateHandle !== stateHandle) {\n                return null;\n            }\n            if (interactionHandle && storedValue.interactionHandle !== interactionHandle) {\n                return null;\n            }\n        }\n        return storedValue;\n    }\n    clearIdxResponse() {\n        if (!this.saveLastResponse) {\n            return;\n        }\n        const storage = this.storageManager.getIdxResponseStorage();\n        storage === null || storage === void 0 ? void 0 : storage.clearStorage();\n    }\n}\n\nexport { TransactionManager as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}