{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\nclass AuthenticatorVerificationData extends AuthenticatorData {\n  constructor(remediation, values = {}, options = {}) {\n    super(remediation, values);\n    this.shouldProceedWithEmailAuthenticator = options.shouldProceedWithEmailAuthenticator !== false && this.authenticator.methods.length === 1 && this.authenticator.methods[0].type === 'email';\n  }\n  canRemediate() {\n    if (this.shouldProceedWithEmailAuthenticator !== false) {\n      return true;\n    }\n    return super.canRemediate();\n  }\n  mapAuthenticator() {\n    var _a;\n    if (this.shouldProceedWithEmailAuthenticator !== false) {\n      const authenticatorFromRemediation = this.getAuthenticatorFromRemediation();\n      return (_a = authenticatorFromRemediation.form) === null || _a === void 0 ? void 0 : _a.value.reduce((acc, curr) => {\n        if (curr.value) {\n          acc[curr.name] = curr.value;\n        } else if (curr.options) {\n          acc[curr.name] = curr.options[0].value;\n        } else {\n          throw new AuthSdkError(`Unsupported authenticator data type: ${curr}`);\n        }\n        return acc;\n      }, {});\n    }\n    return this.getAuthenticatorData();\n  }\n  getInputAuthenticator() {\n    const authenticator = this.getAuthenticatorFromRemediation();\n    const methodType = authenticator.form.value.find(({\n      name\n    }) => name === 'methodType');\n    if (methodType && methodType.options) {\n      return {\n        name: 'methodType',\n        type: 'string',\n        required: true,\n        options: methodType.options\n      };\n    }\n    const inputs = [...authenticator.form.value];\n    return inputs;\n  }\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n}\nAuthenticatorVerificationData.remediationName = 'authenticator-verification-data';\nexport { AuthenticatorVerificationData };","map":{"version":3,"names":["AuthSdkError","AuthenticatorData","AuthenticatorVerificationData","constructor","remediation","values","options","shouldProceedWithEmailAuthenticator","authenticator","methods","length","type","canRemediate","mapAuthenticator","_a","authenticatorFromRemediation","getAuthenticatorFromRemediation","form","value","reduce","acc","curr","name","getAuthenticatorData","getInputAuthenticator","methodType","find","required","inputs","getValuesAfterProceed","trimmedValues","Object","keys","filter","valueKey","assign","remediationName"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/AuthenticatorVerificationData.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\n\nclass AuthenticatorVerificationData extends AuthenticatorData {\n    constructor(remediation, values = {}, options = {}) {\n        super(remediation, values);\n        this.shouldProceedWithEmailAuthenticator = options.shouldProceedWithEmailAuthenticator !== false\n            && this.authenticator.methods.length === 1\n            && this.authenticator.methods[0].type === 'email';\n    }\n    canRemediate() {\n        if (this.shouldProceedWithEmailAuthenticator !== false) {\n            return true;\n        }\n        return super.canRemediate();\n    }\n    mapAuthenticator() {\n        var _a;\n        if (this.shouldProceedWithEmailAuthenticator !== false) {\n            const authenticatorFromRemediation = this.getAuthenticatorFromRemediation();\n            return (_a = authenticatorFromRemediation.form) === null || _a === void 0 ? void 0 : _a.value.reduce((acc, curr) => {\n                if (curr.value) {\n                    acc[curr.name] = curr.value;\n                }\n                else if (curr.options) {\n                    acc[curr.name] = curr.options[0].value;\n                }\n                else {\n                    throw new AuthSdkError(`Unsupported authenticator data type: ${curr}`);\n                }\n                return acc;\n            }, {});\n        }\n        return this.getAuthenticatorData();\n    }\n    getInputAuthenticator() {\n        const authenticator = this.getAuthenticatorFromRemediation();\n        const methodType = authenticator.form.value.find(({ name }) => name === 'methodType');\n        if (methodType && methodType.options) {\n            return {\n                name: 'methodType',\n                type: 'string',\n                required: true,\n                options: methodType.options\n            };\n        }\n        const inputs = [...authenticator.form.value];\n        return inputs;\n    }\n    getValuesAfterProceed() {\n        this.values = super.getValuesAfterProceed();\n        let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n        return trimmedValues.reduce((values, valueKey) => (Object.assign(Object.assign({}, values), { [valueKey]: this.values[valueKey] })), {});\n    }\n}\nAuthenticatorVerificationData.remediationName = 'authenticator-verification-data';\n\nexport { AuthenticatorVerificationData };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}