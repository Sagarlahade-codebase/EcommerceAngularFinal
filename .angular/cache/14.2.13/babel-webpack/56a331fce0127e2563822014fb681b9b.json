{"ast":null,"code":"import oktaUnderscore from './underscore-wrapper.js';\nimport BaseView from '../views/BaseView.js';\nvar Util = {\n  redirect: function (url) {\n    window.location = url;\n  },\n  reloadPage: function () {\n    window.location.reload();\n  },\n  constantError: function (errorMessage) {\n    return function () {\n      throw new Error(errorMessage);\n    };\n  },\n  /**\n   * Simply convert an URL query key value pair object into an URL query string.\n   * Remember NOT to escape the query string when using this util.\n   * example:\n   * input: {userId: 123, instanceId: undefined, expand: 'schema,app'}\n   * output: '?userId=123&expand=schema,app'\n   */\n  getUrlQueryString: function (queries) {\n    oktaUnderscore.isObject(queries) || (queries = {});\n    const queriesString = oktaUnderscore.without(oktaUnderscore.map(queries, function (value, key) {\n      if (value !== undefined && value !== null) {\n        return key + '=' + encodeURIComponent(value);\n      }\n    }), undefined).join('&');\n    return oktaUnderscore.isEmpty(queriesString) ? '' : '?' + queriesString;\n  },\n  isABaseView: function (obj) {\n    return obj instanceof BaseView || obj.prototype instanceof BaseView || obj === BaseView;\n  },\n  isSafari: function () {\n    // All native, android and iOS chrome browsers has \"Safari\" in their userAgent string, so this regex should\n    // evaluate to true for only Safari browser and not any chrome browsers.\n    // https://stackoverflow.com/questions/7944460/detect-safari-browser\n    // https://stackoverflow.com/questions/13807810/ios-chrome-detection/13808053#13808053\n    return /^((?!chrome|android|crios).)*safari/i.test(navigator.userAgent);\n  }\n};\nexport { Util as default };","map":{"version":3,"names":["oktaUnderscore","BaseView","Util","redirect","url","window","location","reloadPage","reload","constantError","errorMessage","Error","getUrlQueryString","queries","isObject","queriesString","without","map","value","key","undefined","encodeURIComponent","join","isEmpty","isABaseView","obj","prototype","isSafari","test","navigator","userAgent","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/@okta/courage-dist/esm/src/courage/util/Util.js"],"sourcesContent":["import oktaUnderscore from './underscore-wrapper.js';\nimport BaseView from '../views/BaseView.js';\n\nvar Util = {\n  redirect: function (url) {\n    window.location = url;\n  },\n  reloadPage: function () {\n    window.location.reload();\n  },\n  constantError: function (errorMessage) {\n    return function () {\n      throw new Error(errorMessage);\n    };\n  },\n\n  /**\n   * Simply convert an URL query key value pair object into an URL query string.\n   * Remember NOT to escape the query string when using this util.\n   * example:\n   * input: {userId: 123, instanceId: undefined, expand: 'schema,app'}\n   * output: '?userId=123&expand=schema,app'\n   */\n  getUrlQueryString: function (queries) {\n    oktaUnderscore.isObject(queries) || (queries = {});\n    const queriesString = oktaUnderscore.without(oktaUnderscore.map(queries, function (value, key) {\n      if (value !== undefined && value !== null) {\n        return key + '=' + encodeURIComponent(value);\n      }\n    }), undefined).join('&');\n    return oktaUnderscore.isEmpty(queriesString) ? '' : '?' + queriesString;\n  },\n  isABaseView: function (obj) {\n    return obj instanceof BaseView || obj.prototype instanceof BaseView || obj === BaseView;\n  },\n  isSafari: function () {\n    // All native, android and iOS chrome browsers has \"Safari\" in their userAgent string, so this regex should\n    // evaluate to true for only Safari browser and not any chrome browsers.\n    // https://stackoverflow.com/questions/7944460/detect-safari-browser\n    // https://stackoverflow.com/questions/13807810/ios-chrome-detection/13808053#13808053\n    return /^((?!chrome|android|crios).)*safari/i.test(navigator.userAgent);\n  }\n};\n\nexport { Util as default };\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,yBAAyB;AACpD,OAAOC,QAAQ,MAAM,sBAAsB;AAE3C,IAAIC,IAAI,GAAG;EACTC,QAAQ,EAAE,SAAAA,CAAUC,GAAG,EAAE;IACvBC,MAAM,CAACC,QAAQ,GAAGF,GAAG;EACvB,CAAC;EACDG,UAAU,EAAE,SAAAA,CAAA,EAAY;IACtBF,MAAM,CAACC,QAAQ,CAACE,MAAM,CAAC,CAAC;EAC1B,CAAC;EACDC,aAAa,EAAE,SAAAA,CAAUC,YAAY,EAAE;IACrC,OAAO,YAAY;MACjB,MAAM,IAAIC,KAAK,CAACD,YAAY,CAAC;IAC/B,CAAC;EACH,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,iBAAiB,EAAE,SAAAA,CAAUC,OAAO,EAAE;IACpCb,cAAc,CAACc,QAAQ,CAACD,OAAO,CAAC,KAAKA,OAAO,GAAG,CAAC,CAAC,CAAC;IAClD,MAAME,aAAa,GAAGf,cAAc,CAACgB,OAAO,CAAChB,cAAc,CAACiB,GAAG,CAACJ,OAAO,EAAE,UAAUK,KAAK,EAAEC,GAAG,EAAE;MAC7F,IAAID,KAAK,KAAKE,SAAS,IAAIF,KAAK,KAAK,IAAI,EAAE;QACzC,OAAOC,GAAG,GAAG,GAAG,GAAGE,kBAAkB,CAACH,KAAK,CAAC;MAC9C;IACF,CAAC,CAAC,EAAEE,SAAS,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;IACxB,OAAOtB,cAAc,CAACuB,OAAO,CAACR,aAAa,CAAC,GAAG,EAAE,GAAG,GAAG,GAAGA,aAAa;EACzE,CAAC;EACDS,WAAW,EAAE,SAAAA,CAAUC,GAAG,EAAE;IAC1B,OAAOA,GAAG,YAAYxB,QAAQ,IAAIwB,GAAG,CAACC,SAAS,YAAYzB,QAAQ,IAAIwB,GAAG,KAAKxB,QAAQ;EACzF,CAAC;EACD0B,QAAQ,EAAE,SAAAA,CAAA,EAAY;IACpB;IACA;IACA;IACA;IACA,OAAO,sCAAsC,CAACC,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC;EACzE;AACF,CAAC;AAED,SAAS5B,IAAI,IAAI6B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}