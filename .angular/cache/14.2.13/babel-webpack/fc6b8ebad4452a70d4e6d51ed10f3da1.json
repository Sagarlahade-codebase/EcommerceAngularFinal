{"ast":null,"code":"import { commonjsGlobal } from '../../../_virtual/_commonjsHelpers.js';\nimport { d as duo_web_sdk } from '../../../_virtual/index.js';\n\n/**\n * \n * This file has been modified to override doPostBack\n * Check out the doPostBack function below for more details.\n * Override the doPostBack function when upgrading.\n * Unable to make a wrapper because it is invoked using an internal name within \n * this library.\n * \n * Current Verison = https://github.com/duosecurity/duo_web_sdk/blob/7aec8dd895ea4bd4549069e76076850eccfe07f2/index.js\n * PS: they dont seem to version correctly hence using commit.\n */\n\n/**\n * Duo Web SDK v2\n * Copyright 2019, Duo Security\n */\n// Modified to remove AMD and support ESM transform - OKTA-369648\n(function (root, factory) {\n  duo_web_sdk.exports = factory();\n})(commonjsGlobal, function () {\n  var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\\|[A-Za-z0-9\\+\\/=]+\\|[A-Za-z0-9\\+\\/=]+$/;\n  var DUO_ERROR_FORMAT = /^ERR\\|[\\w\\s\\.\\(\\)]+$/;\n  var DUO_OPEN_WINDOW_FORMAT = /^DUO_OPEN_WINDOW\\|/;\n  var VALID_OPEN_WINDOW_DOMAINS = ['duo.com', 'duosecurity.com', 'duomobile.s3-us-west-1.amazonaws.com'];\n  var postAction, postArgument, host, duoSig, appSig, iframe; // We use this function instead of setting initial values in the var\n  // declarations to make sure the initial values and subsequent\n  // re-initializations are always the same.\n\n  initializeStatefulVariables();\n  /**\n   * Set local variables to whatever they should be before you call init().\n   */\n\n  function initializeStatefulVariables() {\n    postAction = '';\n    postArgument = 'sig_response';\n    host = undefined;\n    duoSig = undefined;\n    appSig = undefined;\n    iframe = undefined;\n  }\n  function throwError(message, givenUrl) {\n    var url = givenUrl || 'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe';\n    throw new Error('Duo Web SDK error: ' + message + (url ? '\\n' + 'See ' + url + ' for more information' : ''));\n  }\n  function hyphenize(str) {\n    return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();\n  } // cross-browser data attributes\n\n  function getDataAttribute(element, name) {\n    if ('dataset' in element) {\n      return element.dataset[name];\n    } else {\n      return element.getAttribute('data-' + hyphenize(name));\n    }\n  } // cross-browser event binding/unbinding\n\n  function on(context, event, fallbackEvent, callback) {\n    if ('addEventListener' in window) {\n      context.addEventListener(event, callback, false);\n    } else {\n      context.attachEvent(fallbackEvent, callback);\n    }\n  }\n  function off(context, event, fallbackEvent, callback) {\n    if ('removeEventListener' in window) {\n      context.removeEventListener(event, callback, false);\n    } else {\n      context.detachEvent(fallbackEvent, callback);\n    }\n  }\n  function onReady(callback) {\n    on(document, 'DOMContentLoaded', 'onreadystatechange', callback);\n  }\n  function offReady(callback) {\n    off(document, 'DOMContentLoaded', 'onreadystatechange', callback);\n  }\n  function onMessage(callback) {\n    on(window, 'message', 'onmessage', callback);\n  }\n  function offMessage(callback) {\n    off(window, 'message', 'onmessage', callback);\n  }\n  /**\n   * Parse the sig_request parameter, throwing errors if the token contains\n   * a server error or if the token is invalid.\n   *\n   * @param {String} sig Request token\n   */\n\n  function parseSigRequest(sig) {\n    if (!sig) {\n      // nothing to do\n      return;\n    } // see if the token contains an error, throwing it if it does\n\n    if (sig.indexOf('ERR|') === 0) {\n      throwError(sig.split('|')[1]);\n    } // validate the token\n\n    if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {\n      throwError('Duo was given a bad token.  This might indicate a configuration ' + 'problem with one of Duo\\'s client libraries.');\n    }\n    var sigParts = sig.split(':'); // hang on to the token, and the parsed duo and app sigs\n    duoSig = sigParts[0];\n    appSig = sigParts[1];\n    return {\n      sigRequest: sig,\n      duoSig: sigParts[0],\n      appSig: sigParts[1]\n    };\n  }\n  /**\n   * Validate that a MessageEvent came from the Duo service, and that it\n   * is a properly formatted payload.\n   *\n   * The Google Chrome sign-in page injects some JS into pages that also\n   * make use of postMessage, so we need to do additional validation above\n   * and beyond the origin.\n   *\n   * @param {MessageEvent} event Message received via postMessage\n   */\n\n  function isDuoMessage(event) {\n    return Boolean(event.origin === 'https://' + host && typeof event.data === 'string' && (event.data.match(DUO_MESSAGE_FORMAT) || event.data.match(DUO_ERROR_FORMAT) || event.data.match(DUO_OPEN_WINDOW_FORMAT)));\n  }\n  /**\n   * Validate the request token and prepare for the iframe to become ready.\n   *\n   * All options below can be passed into an options hash to `Duo.init`, or\n   * specified on the iframe using `data-` attributes.\n   *\n   * Options specified using the options hash will take precedence over\n   * `data-` attributes.\n   *\n   * Example using options hash:\n   * ```javascript\n   * Duo.init({\n   *     iframe: \"some_other_id\",\n   *     host: \"api-main.duo.test\",\n   *     sig_request: \"...\",\n   *     post_action: \"/auth\",\n   *     post_argument: \"resp\"\n   * });\n   * ```\n   *\n   * Example using `data-` attributes:\n   * ```html\n   * <iframe id=\"duo_iframe\"\n   *         data-host=\"api-main.duo.test\"\n   *         data-sig-request=\"...\"\n   *         data-post-action=\"/auth\"\n   *         data-post-argument=\"resp\"\n   *         >\n   * </iframe>\n   * ```\n   *\n   * Some browsers (especially embedded browsers) don't like it when the Duo\n   * Web SDK changes the `src` attribute on the iframe. To prevent this, there\n   * is an alternative way to use the Duo Web SDK:\n   *\n   * Add a div (or any other container element) instead of an iframe to the\n   * DOM with an id of \"duo_iframe\", or pass that element to the\n   * `iframeContainer` parameter of `Duo.init`. An iframe will be created and\n   * inserted into that container element, preventing `src` change related\n   * bugs. WARNING: All other elements in the container will be deleted.\n   *\n   * The `iframeAttributes` parameter of `Duo.init` is available to set any\n   * attributes on the inserted iframe if the Duo Web SDK is inserting the\n   * iframe. For details, see the parameter documentation below.\n   *\n   * @param {Object} options\n   * @param {String} options.host - Hostname for the Duo Prompt.\n   * @param {String} options.sig_request - Request token.\n   * @param {String|HTMLElement} [options.iframe] - The iframe, or id of an\n   *     iframe that will be used for the Duo Prompt. If you don't provide\n   *     this or the `iframeContainer` parameter the Duo Web SDK will default\n   *     to using whatever element has an id of \"duo_iframe\".\n   * @param {String|HTMLElement} [options.iframeContainer] - The element you\n   *     want the Duo Prompt inserted into, or the id of that element.\n   *     Anything inside this element will be deleted and replaced with an\n   *     iframe hosting the Duo prompt. If you don't provide this or the\n   *     `iframe` parameter the Duo Web SDK will default to using whatever\n   *     element has an id of \"duo_iframe\".\n   * @param {Object} [options.iframeAttributes] - Object with  names and\n   *     values coresponding to attributes you want added to the  Duo Prompt\n   *     iframe, like `title`, `width` and `allow`. WARNING: this parameter\n   *     only works if you use the `iframeContainer` parameter or add an id\n   *     of \"duo_iframe\" to an element that isn't an iframe. If you have\n   *     added an iframe to the DOM yourself, you should set those attributes\n   *     directly on the iframe.\n   * @param {String} [options.post_action=''] - URL to POST back to after a\n   *     successful auth.\n   * @param {String} [options.post_argument='sig_response'] - Parameter name\n   *     to use for response token.\n   * @param {Function} [options.submit_callback] - If provided, the Duo Web\n   *     SDK will not submit the form. Instead it will execute this callback\n   *     function passing in a reference to the \"duo_form\" form object.\n   *     `submit_callback`` can be used to prevent the webpage from reloading.\n   */\n\n  function init(options) {\n    // If init() is called more than once we have to reset all the local\n    // variables to ensure init() will work the same way every time. This\n    // helps people making single page applications. SPAs may periodically\n    // remove the iframe and add a new one that has to be initialized.\n    initializeStatefulVariables();\n    if (options) {\n      if (options.host) {\n        host = options.host;\n      }\n      if (options.sig_request) {\n        parseSigRequest(options.sig_request);\n      }\n      if (options.post_action) {\n        postAction = options.post_action;\n      }\n      if (options.post_argument) {\n        postArgument = options.post_argument;\n      }\n      if (typeof options.submit_callback === 'function') ;\n    }\n    var promptElement = getPromptElement(options);\n    if (promptElement) {\n      // If we can get the element that will host the prompt, set it.\n      ready(promptElement, options.iframeAttributes || {});\n    } else {\n      // If the element that will host the prompt isn't available yet, set\n      // it up after the DOM finishes loading.\n      asyncReady(options);\n    } // always clean up after yourself!\n\n    offReady(init);\n  }\n  /**\n   * Given the options from init(), get the iframe or iframe container that\n   * should be used for the Duo Prompt. Returns `null` if nothing was found.\n   */\n\n  function getPromptElement(options) {\n    var result;\n    if (options.iframe && options.iframeContainer) {\n      throwError('Passing both `iframe` and `iframeContainer` arguments at the' + ' same time is not allowed.');\n    } else if (options.iframe) {\n      // If we are getting an iframe, try to get it and raise if the\n      // element we find is NOT an iframe.\n      result = getUserDefinedElement(options.iframe);\n      validateIframe(result);\n    } else if (options.iframeContainer) {\n      result = getUserDefinedElement(options.iframeContainer);\n      validateIframeContainer(result);\n    } else {\n      result = document.getElementById('duo_iframe');\n    }\n    return result;\n  }\n  /**\n   * When given an HTMLElement, return it. When given a string, get an element\n   * with that id, else return null.\n   */\n\n  function getUserDefinedElement(object) {\n    if (object.tagName) {\n      return object;\n    } else if (typeof object == 'string') {\n      return document.getElementById(object);\n    }\n    return null;\n  }\n  /**\n   * Check if the given thing is an iframe.\n   */\n\n  function isIframe(element) {\n    return element && element.tagName && element.tagName.toLowerCase() === 'iframe';\n  }\n  /**\n   * Throw an error if we are given an element that is NOT an iframe.\n   */\n\n  function validateIframe(element) {\n    if (element && !isIframe(element)) {\n      throwError('`iframe` only accepts an iframe element or the id of an' + ' iframe. To use a non-iframe element, use the' + ' `iframeContainer` argument.');\n    }\n  }\n  /**\n   * Throw an error if we are given an element that IS an iframe instead of an\n   * element that we can insert an iframe into.\n   */\n\n  function validateIframeContainer(element) {\n    if (element && isIframe(element)) {\n      throwError('`iframeContainer` only accepts a non-iframe element or the' + ' id of a non-iframe. To use a non-iframe element, use the' + ' `iframeContainer` argument on Duo.init().');\n    }\n  }\n  /**\n   * Generate the URL that goes to the Duo Prompt.\n   */\n\n  function generateIframeSrc() {\n    return ['https://', host, '/frame/web/v1/auth?tx=', duoSig, '&parent=', encodeURIComponent(document.location.href), '&v=2.8'].join('');\n  }\n  /**\n   * This function is called when a message was received from another domain\n   * using the `postMessage` API.  Check that the event came from the Duo\n   * service domain, and that the message is a properly formatted payload,\n   * then perform the post back to the primary service.\n   *\n   * @param event Event object (contains origin and data)\n   */\n\n  function onReceivedMessage(event) {\n    if (isDuoMessage(event)) {\n      if (event.data.match(DUO_OPEN_WINDOW_FORMAT)) {\n        var url = event.data.substring(\"DUO_OPEN_WINDOW|\".length);\n        if (isValidUrlToOpen(url)) {\n          // Open the URL that comes after the DUO_WINDOW_OPEN token.\n          window.open(url, \"_self\");\n        }\n      } else {\n        // the event came from duo, do the post back\n        doPostBack(event.data); // always clean up after yourself!\n\n        offMessage(onReceivedMessage);\n      }\n    }\n  }\n  /**\n   * Validate that this passed in URL is one that we will actually allow to\n   * be opened.\n   * @param url String URL that the message poster wants to open\n   * @returns {boolean} true if we allow this url to be opened in the window\n   */\n\n  function isValidUrlToOpen(url) {\n    if (!url) {\n      return false;\n    }\n    var parser = document.createElement('a');\n    parser.href = url;\n    if (parser.protocol === \"duotrustedendpoints:\") {\n      return true;\n    } else if (parser.protocol !== \"https:\") {\n      return false;\n    }\n    for (var i = 0; i < VALID_OPEN_WINDOW_DOMAINS.length; i++) {\n      if (parser.hostname.endsWith(\".\" + VALID_OPEN_WINDOW_DOMAINS[i]) || parser.hostname === VALID_OPEN_WINDOW_DOMAINS[i]) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Register a callback to call ready() after the DOM has loaded.\n   */\n\n  function asyncReady(options) {\n    var callback = function () {\n      var promptElement = getPromptElement(options);\n      if (!promptElement) {\n        throwError('This page does not contain an iframe for Duo to use.' + ' Add an element like' + ' <iframe id=\"duo_iframe\"></iframe> to this page.');\n      }\n      ready(promptElement, options.iframeAttributes || {}); // Always clean up after yourself.\n\n      offReady(callback);\n    };\n    onReady(callback);\n  }\n  /**\n   * Point the iframe at Duo, then wait for it to postMessage back to us.\n   */\n\n  function ready(promptElement, iframeAttributes) {\n    if (!host) {\n      host = getDataAttribute(promptElement, 'host');\n      if (!host) {\n        throwError('No API hostname is given for Duo to use.  Be sure to pass ' + 'a `host` parameter to Duo.init, or through the `data-host` ' + 'attribute on the iframe element.');\n      }\n    }\n    if (!duoSig || !appSig) {\n      parseSigRequest(getDataAttribute(promptElement, 'sigRequest'));\n      if (!duoSig || !appSig) {\n        throwError('No valid signed request is given.  Be sure to give the ' + '`sig_request` parameter to Duo.init, or use the ' + '`data-sig-request` attribute on the iframe element.');\n      }\n    } // if postAction/Argument are defaults, see if they are specified\n    // as data attributes on the iframe\n\n    if (postAction === '') {\n      postAction = getDataAttribute(promptElement, 'postAction') || postAction;\n    }\n    if (postArgument === 'sig_response') {\n      postArgument = getDataAttribute(promptElement, 'postArgument') || postArgument;\n    }\n    if (isIframe(promptElement)) {\n      iframe = promptElement;\n      iframe.src = generateIframeSrc();\n    } else {\n      // If given a container to put an iframe in, clean out any children\n      // child elements in case `init()` was called more than once.\n      while (promptElement.firstChild) {\n        // We call `removeChild()` instead of doing `innerHTML = \"\"`\n        // to make sure we unbind any events.\n        promptElement.removeChild(promptElement.firstChild);\n      }\n      iframe = document.createElement('iframe'); // Set the src and all other attributes on the new iframe.\n\n      iframeAttributes['src'] = generateIframeSrc();\n      for (var name in iframeAttributes) {\n        iframe.setAttribute(name, iframeAttributes[name]);\n      }\n      promptElement.appendChild(iframe);\n    } // listen for the 'message' event\n\n    onMessage(onReceivedMessage);\n  }\n  /**\n   * We received a postMessage from Duo.  POST back to the primary service\n   * with the response token, and any additional user-supplied parameters\n   * given in form#duo_form.\n   */\n  // function doPostBack(response) {\n  //     // create a hidden input to contain the response token\n  //     var input = document.createElement('input');\n  //     input.type = 'hidden';\n  //     input.name = postArgument;\n  //     input.value = response + ':' + appSig;\n  //     // user may supply their own form with additional inputs\n  //     var form = document.getElementById('duo_form');\n  //     // if the form doesn't exist, create one\n  //     if (!form) {\n  //         form = document.createElement('form');\n  //         // insert the new form after the iframe\n  //         iframe.parentElement.insertBefore(form, iframe.nextSibling);\n  //     }\n  //     // make sure we are actually posting to the right place\n  //     form.method = 'POST';\n  //     form.action = postAction;\n  //     // add the response token input to the form\n  //     form.appendChild(input);\n  //     // away we go!\n  //     if (typeof submitCallback === \"function\") {\n  //         submitCallback.call(null, form);\n  //     } else {\n  //         form.submit();\n  //     }\n  // }\n  // OKTA: Overriding their doPostBack logic because we want to submit this\n  // through ajax, not a postBack\n\n  function doPostBack(response) {\n    postAction(response + ':' + appSig);\n  }\n  return {\n    init: init,\n    _onReady: onReady,\n    _parseSigRequest: parseSigRequest,\n    _isDuoMessage: isDuoMessage,\n    _doPostBack: doPostBack\n  };\n});\nvar Duo = duo_web_sdk.exports;\nexport { Duo as default };","map":{"version":3,"names":["commonjsGlobal","d","duo_web_sdk","root","factory","exports","DUO_MESSAGE_FORMAT","DUO_ERROR_FORMAT","DUO_OPEN_WINDOW_FORMAT","VALID_OPEN_WINDOW_DOMAINS","postAction","postArgument","host","duoSig","appSig","iframe","initializeStatefulVariables","undefined","throwError","message","givenUrl","url","Error","hyphenize","str","replace","toLowerCase","getDataAttribute","element","name","dataset","getAttribute","on","context","event","fallbackEvent","callback","window","addEventListener","attachEvent","off","removeEventListener","detachEvent","onReady","document","offReady","onMessage","offMessage","parseSigRequest","sig","indexOf","split","length","sigParts","sigRequest","isDuoMessage","Boolean","origin","data","match","init","options","sig_request","post_action","post_argument","submit_callback","promptElement","getPromptElement","ready","iframeAttributes","asyncReady","result","iframeContainer","getUserDefinedElement","validateIframe","validateIframeContainer","getElementById","object","tagName","isIframe","generateIframeSrc","encodeURIComponent","location","href","join","onReceivedMessage","substring","isValidUrlToOpen","open","doPostBack","parser","createElement","protocol","i","hostname","endsWith","src","firstChild","removeChild","setAttribute","appendChild","response","_onReady","_parseSigRequest","_isDuoMessage","_doPostBack","Duo","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/vendor/duo_web_sdk/index.js"],"sourcesContent":["import { commonjsGlobal } from '../../../_virtual/_commonjsHelpers.js';\nimport { d as duo_web_sdk } from '../../../_virtual/index.js';\n\n/**\n * \n * This file has been modified to override doPostBack\n * Check out the doPostBack function below for more details.\n * Override the doPostBack function when upgrading.\n * Unable to make a wrapper because it is invoked using an internal name within \n * this library.\n * \n * Current Verison = https://github.com/duosecurity/duo_web_sdk/blob/7aec8dd895ea4bd4549069e76076850eccfe07f2/index.js\n * PS: they dont seem to version correctly hence using commit.\n */\n\n/**\n * Duo Web SDK v2\n * Copyright 2019, Duo Security\n */\n// Modified to remove AMD and support ESM transform - OKTA-369648\n(function (root, factory) {\n  duo_web_sdk.exports = factory();\n})(commonjsGlobal, function () {\n  var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\\|[A-Za-z0-9\\+\\/=]+\\|[A-Za-z0-9\\+\\/=]+$/;\n  var DUO_ERROR_FORMAT = /^ERR\\|[\\w\\s\\.\\(\\)]+$/;\n  var DUO_OPEN_WINDOW_FORMAT = /^DUO_OPEN_WINDOW\\|/;\n  var VALID_OPEN_WINDOW_DOMAINS = ['duo.com', 'duosecurity.com', 'duomobile.s3-us-west-1.amazonaws.com'];\n  var postAction, postArgument, host, duoSig, appSig, iframe; // We use this function instead of setting initial values in the var\n  // declarations to make sure the initial values and subsequent\n  // re-initializations are always the same.\n\n  initializeStatefulVariables();\n  /**\n   * Set local variables to whatever they should be before you call init().\n   */\n\n  function initializeStatefulVariables() {\n    postAction = '';\n    postArgument = 'sig_response';\n    host = undefined;\n    duoSig = undefined;\n    appSig = undefined;\n    iframe = undefined;\n  }\n\n  function throwError(message, givenUrl) {\n    var url = givenUrl || 'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe';\n    throw new Error('Duo Web SDK error: ' + message + (url ? '\\n' + 'See ' + url + ' for more information' : ''));\n  }\n\n  function hyphenize(str) {\n    return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();\n  } // cross-browser data attributes\n\n\n  function getDataAttribute(element, name) {\n    if ('dataset' in element) {\n      return element.dataset[name];\n    } else {\n      return element.getAttribute('data-' + hyphenize(name));\n    }\n  } // cross-browser event binding/unbinding\n\n\n  function on(context, event, fallbackEvent, callback) {\n    if ('addEventListener' in window) {\n      context.addEventListener(event, callback, false);\n    } else {\n      context.attachEvent(fallbackEvent, callback);\n    }\n  }\n\n  function off(context, event, fallbackEvent, callback) {\n    if ('removeEventListener' in window) {\n      context.removeEventListener(event, callback, false);\n    } else {\n      context.detachEvent(fallbackEvent, callback);\n    }\n  }\n\n  function onReady(callback) {\n    on(document, 'DOMContentLoaded', 'onreadystatechange', callback);\n  }\n\n  function offReady(callback) {\n    off(document, 'DOMContentLoaded', 'onreadystatechange', callback);\n  }\n\n  function onMessage(callback) {\n    on(window, 'message', 'onmessage', callback);\n  }\n\n  function offMessage(callback) {\n    off(window, 'message', 'onmessage', callback);\n  }\n  /**\n   * Parse the sig_request parameter, throwing errors if the token contains\n   * a server error or if the token is invalid.\n   *\n   * @param {String} sig Request token\n   */\n\n\n  function parseSigRequest(sig) {\n    if (!sig) {\n      // nothing to do\n      return;\n    } // see if the token contains an error, throwing it if it does\n\n\n    if (sig.indexOf('ERR|') === 0) {\n      throwError(sig.split('|')[1]);\n    } // validate the token\n\n\n    if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {\n      throwError('Duo was given a bad token.  This might indicate a configuration ' + 'problem with one of Duo\\'s client libraries.');\n    }\n\n    var sigParts = sig.split(':'); // hang on to the token, and the parsed duo and app sigs\n    duoSig = sigParts[0];\n    appSig = sigParts[1];\n    return {\n      sigRequest: sig,\n      duoSig: sigParts[0],\n      appSig: sigParts[1]\n    };\n  }\n  /**\n   * Validate that a MessageEvent came from the Duo service, and that it\n   * is a properly formatted payload.\n   *\n   * The Google Chrome sign-in page injects some JS into pages that also\n   * make use of postMessage, so we need to do additional validation above\n   * and beyond the origin.\n   *\n   * @param {MessageEvent} event Message received via postMessage\n   */\n\n\n  function isDuoMessage(event) {\n    return Boolean(event.origin === 'https://' + host && typeof event.data === 'string' && (event.data.match(DUO_MESSAGE_FORMAT) || event.data.match(DUO_ERROR_FORMAT) || event.data.match(DUO_OPEN_WINDOW_FORMAT)));\n  }\n  /**\n   * Validate the request token and prepare for the iframe to become ready.\n   *\n   * All options below can be passed into an options hash to `Duo.init`, or\n   * specified on the iframe using `data-` attributes.\n   *\n   * Options specified using the options hash will take precedence over\n   * `data-` attributes.\n   *\n   * Example using options hash:\n   * ```javascript\n   * Duo.init({\n   *     iframe: \"some_other_id\",\n   *     host: \"api-main.duo.test\",\n   *     sig_request: \"...\",\n   *     post_action: \"/auth\",\n   *     post_argument: \"resp\"\n   * });\n   * ```\n   *\n   * Example using `data-` attributes:\n   * ```html\n   * <iframe id=\"duo_iframe\"\n   *         data-host=\"api-main.duo.test\"\n   *         data-sig-request=\"...\"\n   *         data-post-action=\"/auth\"\n   *         data-post-argument=\"resp\"\n   *         >\n   * </iframe>\n   * ```\n   *\n   * Some browsers (especially embedded browsers) don't like it when the Duo\n   * Web SDK changes the `src` attribute on the iframe. To prevent this, there\n   * is an alternative way to use the Duo Web SDK:\n   *\n   * Add a div (or any other container element) instead of an iframe to the\n   * DOM with an id of \"duo_iframe\", or pass that element to the\n   * `iframeContainer` parameter of `Duo.init`. An iframe will be created and\n   * inserted into that container element, preventing `src` change related\n   * bugs. WARNING: All other elements in the container will be deleted.\n   *\n   * The `iframeAttributes` parameter of `Duo.init` is available to set any\n   * attributes on the inserted iframe if the Duo Web SDK is inserting the\n   * iframe. For details, see the parameter documentation below.\n   *\n   * @param {Object} options\n   * @param {String} options.host - Hostname for the Duo Prompt.\n   * @param {String} options.sig_request - Request token.\n   * @param {String|HTMLElement} [options.iframe] - The iframe, or id of an\n   *     iframe that will be used for the Duo Prompt. If you don't provide\n   *     this or the `iframeContainer` parameter the Duo Web SDK will default\n   *     to using whatever element has an id of \"duo_iframe\".\n   * @param {String|HTMLElement} [options.iframeContainer] - The element you\n   *     want the Duo Prompt inserted into, or the id of that element.\n   *     Anything inside this element will be deleted and replaced with an\n   *     iframe hosting the Duo prompt. If you don't provide this or the\n   *     `iframe` parameter the Duo Web SDK will default to using whatever\n   *     element has an id of \"duo_iframe\".\n   * @param {Object} [options.iframeAttributes] - Object with  names and\n   *     values coresponding to attributes you want added to the  Duo Prompt\n   *     iframe, like `title`, `width` and `allow`. WARNING: this parameter\n   *     only works if you use the `iframeContainer` parameter or add an id\n   *     of \"duo_iframe\" to an element that isn't an iframe. If you have\n   *     added an iframe to the DOM yourself, you should set those attributes\n   *     directly on the iframe.\n   * @param {String} [options.post_action=''] - URL to POST back to after a\n   *     successful auth.\n   * @param {String} [options.post_argument='sig_response'] - Parameter name\n   *     to use for response token.\n   * @param {Function} [options.submit_callback] - If provided, the Duo Web\n   *     SDK will not submit the form. Instead it will execute this callback\n   *     function passing in a reference to the \"duo_form\" form object.\n   *     `submit_callback`` can be used to prevent the webpage from reloading.\n   */\n\n\n  function init(options) {\n    // If init() is called more than once we have to reset all the local\n    // variables to ensure init() will work the same way every time. This\n    // helps people making single page applications. SPAs may periodically\n    // remove the iframe and add a new one that has to be initialized.\n    initializeStatefulVariables();\n\n    if (options) {\n      if (options.host) {\n        host = options.host;\n      }\n\n      if (options.sig_request) {\n        parseSigRequest(options.sig_request);\n      }\n\n      if (options.post_action) {\n        postAction = options.post_action;\n      }\n\n      if (options.post_argument) {\n        postArgument = options.post_argument;\n      }\n\n      if (typeof options.submit_callback === 'function') ;\n    }\n\n    var promptElement = getPromptElement(options);\n\n    if (promptElement) {\n      // If we can get the element that will host the prompt, set it.\n      ready(promptElement, options.iframeAttributes || {});\n    } else {\n      // If the element that will host the prompt isn't available yet, set\n      // it up after the DOM finishes loading.\n      asyncReady(options);\n    } // always clean up after yourself!\n\n\n    offReady(init);\n  }\n  /**\n   * Given the options from init(), get the iframe or iframe container that\n   * should be used for the Duo Prompt. Returns `null` if nothing was found.\n   */\n\n\n  function getPromptElement(options) {\n    var result;\n\n    if (options.iframe && options.iframeContainer) {\n      throwError('Passing both `iframe` and `iframeContainer` arguments at the' + ' same time is not allowed.');\n    } else if (options.iframe) {\n      // If we are getting an iframe, try to get it and raise if the\n      // element we find is NOT an iframe.\n      result = getUserDefinedElement(options.iframe);\n      validateIframe(result);\n    } else if (options.iframeContainer) {\n      result = getUserDefinedElement(options.iframeContainer);\n      validateIframeContainer(result);\n    } else {\n      result = document.getElementById('duo_iframe');\n    }\n\n    return result;\n  }\n  /**\n   * When given an HTMLElement, return it. When given a string, get an element\n   * with that id, else return null.\n   */\n\n\n  function getUserDefinedElement(object) {\n    if (object.tagName) {\n      return object;\n    } else if (typeof object == 'string') {\n      return document.getElementById(object);\n    }\n\n    return null;\n  }\n  /**\n   * Check if the given thing is an iframe.\n   */\n\n\n  function isIframe(element) {\n    return element && element.tagName && element.tagName.toLowerCase() === 'iframe';\n  }\n  /**\n   * Throw an error if we are given an element that is NOT an iframe.\n   */\n\n\n  function validateIframe(element) {\n    if (element && !isIframe(element)) {\n      throwError('`iframe` only accepts an iframe element or the id of an' + ' iframe. To use a non-iframe element, use the' + ' `iframeContainer` argument.');\n    }\n  }\n  /**\n   * Throw an error if we are given an element that IS an iframe instead of an\n   * element that we can insert an iframe into.\n   */\n\n\n  function validateIframeContainer(element) {\n    if (element && isIframe(element)) {\n      throwError('`iframeContainer` only accepts a non-iframe element or the' + ' id of a non-iframe. To use a non-iframe element, use the' + ' `iframeContainer` argument on Duo.init().');\n    }\n  }\n  /**\n   * Generate the URL that goes to the Duo Prompt.\n   */\n\n\n  function generateIframeSrc() {\n    return ['https://', host, '/frame/web/v1/auth?tx=', duoSig, '&parent=', encodeURIComponent(document.location.href), '&v=2.8'].join('');\n  }\n  /**\n   * This function is called when a message was received from another domain\n   * using the `postMessage` API.  Check that the event came from the Duo\n   * service domain, and that the message is a properly formatted payload,\n   * then perform the post back to the primary service.\n   *\n   * @param event Event object (contains origin and data)\n   */\n\n\n  function onReceivedMessage(event) {\n    if (isDuoMessage(event)) {\n      if (event.data.match(DUO_OPEN_WINDOW_FORMAT)) {\n        var url = event.data.substring(\"DUO_OPEN_WINDOW|\".length);\n\n        if (isValidUrlToOpen(url)) {\n          // Open the URL that comes after the DUO_WINDOW_OPEN token.\n          window.open(url, \"_self\");\n        }\n      } else {\n        // the event came from duo, do the post back\n        doPostBack(event.data); // always clean up after yourself!\n\n        offMessage(onReceivedMessage);\n      }\n    }\n  }\n  /**\n   * Validate that this passed in URL is one that we will actually allow to\n   * be opened.\n   * @param url String URL that the message poster wants to open\n   * @returns {boolean} true if we allow this url to be opened in the window\n   */\n\n\n  function isValidUrlToOpen(url) {\n    if (!url) {\n      return false;\n    }\n\n    var parser = document.createElement('a');\n    parser.href = url;\n\n    if (parser.protocol === \"duotrustedendpoints:\") {\n      return true;\n    } else if (parser.protocol !== \"https:\") {\n      return false;\n    }\n\n    for (var i = 0; i < VALID_OPEN_WINDOW_DOMAINS.length; i++) {\n      if (parser.hostname.endsWith(\".\" + VALID_OPEN_WINDOW_DOMAINS[i]) || parser.hostname === VALID_OPEN_WINDOW_DOMAINS[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Register a callback to call ready() after the DOM has loaded.\n   */\n\n\n  function asyncReady(options) {\n    var callback = function () {\n      var promptElement = getPromptElement(options);\n\n      if (!promptElement) {\n        throwError('This page does not contain an iframe for Duo to use.' + ' Add an element like' + ' <iframe id=\"duo_iframe\"></iframe> to this page.');\n      }\n\n      ready(promptElement, options.iframeAttributes || {}); // Always clean up after yourself.\n\n      offReady(callback);\n    };\n\n    onReady(callback);\n  }\n  /**\n   * Point the iframe at Duo, then wait for it to postMessage back to us.\n   */\n\n\n  function ready(promptElement, iframeAttributes) {\n    if (!host) {\n      host = getDataAttribute(promptElement, 'host');\n\n      if (!host) {\n        throwError('No API hostname is given for Duo to use.  Be sure to pass ' + 'a `host` parameter to Duo.init, or through the `data-host` ' + 'attribute on the iframe element.');\n      }\n    }\n\n    if (!duoSig || !appSig) {\n      parseSigRequest(getDataAttribute(promptElement, 'sigRequest'));\n\n      if (!duoSig || !appSig) {\n        throwError('No valid signed request is given.  Be sure to give the ' + '`sig_request` parameter to Duo.init, or use the ' + '`data-sig-request` attribute on the iframe element.');\n      }\n    } // if postAction/Argument are defaults, see if they are specified\n    // as data attributes on the iframe\n\n\n    if (postAction === '') {\n      postAction = getDataAttribute(promptElement, 'postAction') || postAction;\n    }\n\n    if (postArgument === 'sig_response') {\n      postArgument = getDataAttribute(promptElement, 'postArgument') || postArgument;\n    }\n\n    if (isIframe(promptElement)) {\n      iframe = promptElement;\n      iframe.src = generateIframeSrc();\n    } else {\n      // If given a container to put an iframe in, clean out any children\n      // child elements in case `init()` was called more than once.\n      while (promptElement.firstChild) {\n        // We call `removeChild()` instead of doing `innerHTML = \"\"`\n        // to make sure we unbind any events.\n        promptElement.removeChild(promptElement.firstChild);\n      }\n\n      iframe = document.createElement('iframe'); // Set the src and all other attributes on the new iframe.\n\n      iframeAttributes['src'] = generateIframeSrc();\n\n      for (var name in iframeAttributes) {\n        iframe.setAttribute(name, iframeAttributes[name]);\n      }\n\n      promptElement.appendChild(iframe);\n    } // listen for the 'message' event\n\n\n    onMessage(onReceivedMessage);\n  }\n  /**\n   * We received a postMessage from Duo.  POST back to the primary service\n   * with the response token, and any additional user-supplied parameters\n   * given in form#duo_form.\n   */\n  // function doPostBack(response) {\n  //     // create a hidden input to contain the response token\n  //     var input = document.createElement('input');\n  //     input.type = 'hidden';\n  //     input.name = postArgument;\n  //     input.value = response + ':' + appSig;\n  //     // user may supply their own form with additional inputs\n  //     var form = document.getElementById('duo_form');\n  //     // if the form doesn't exist, create one\n  //     if (!form) {\n  //         form = document.createElement('form');\n  //         // insert the new form after the iframe\n  //         iframe.parentElement.insertBefore(form, iframe.nextSibling);\n  //     }\n  //     // make sure we are actually posting to the right place\n  //     form.method = 'POST';\n  //     form.action = postAction;\n  //     // add the response token input to the form\n  //     form.appendChild(input);\n  //     // away we go!\n  //     if (typeof submitCallback === \"function\") {\n  //         submitCallback.call(null, form);\n  //     } else {\n  //         form.submit();\n  //     }\n  // }\n  // OKTA: Overriding their doPostBack logic because we want to submit this\n  // through ajax, not a postBack\n\n\n  function doPostBack(response) {\n    postAction(response + ':' + appSig);\n  }\n\n  return {\n    init: init,\n    _onReady: onReady,\n    _parseSigRequest: parseSigRequest,\n    _isDuoMessage: isDuoMessage,\n    _doPostBack: doPostBack\n  };\n});\n\nvar Duo = duo_web_sdk.exports;\n\nexport { Duo as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}