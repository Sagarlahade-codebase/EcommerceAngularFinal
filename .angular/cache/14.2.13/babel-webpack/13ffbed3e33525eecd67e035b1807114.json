{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getWellKnown, getKey } from './endpoints/well-known.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOidcHash } from '../crypto/oidcHash.js';\nimport { verifyToken as verifyToken$1 } from '../crypto/verifyToken.js';\nimport { validateClaims } from './util/validateClaims.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nimport { decodeToken } from './decodeToken.js';\nfunction verifyToken(_x, _x2, _x3) {\n  return _verifyToken.apply(this, arguments);\n}\nfunction _verifyToken() {\n  _verifyToken = _asyncToGenerator(function* (sdk, token, validationParams) {\n    if (!token || !token.idToken) {\n      throw new AuthSdkError('Only idTokens may be verified');\n    }\n    var jwt = decodeToken(token.idToken);\n    const configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;\n    const {\n      issuer\n    } = yield getWellKnown(sdk, configuredIssuer);\n    var validationOptions = Object.assign({\n      clientId: sdk.options.clientId,\n      ignoreSignature: sdk.options.ignoreSignature\n    }, validationParams, {\n      issuer\n    });\n    validateClaims(sdk, jwt.payload, validationOptions);\n    if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n      return token;\n    }\n    const key = yield getKey(sdk, token.issuer, jwt.header.kid);\n    const valid = yield verifyToken$1(token.idToken, key);\n    if (!valid) {\n      throw new AuthSdkError('The token signature is not valid');\n    }\n    if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n      const hash = yield getOidcHash(validationParams.accessToken);\n      if (hash !== token.claims.at_hash) {\n        throw new AuthSdkError('Token hash verification failed');\n      }\n    }\n    return token;\n  });\n  return _verifyToken.apply(this, arguments);\n}\nexport { verifyToken };","map":{"version":3,"names":["getWellKnown","getKey","AuthSdkError","getOidcHash","verifyToken","verifyToken$1","validateClaims","decodeToken","_x","_x2","_x3","_verifyToken","apply","arguments","_asyncToGenerator","sdk","token","validationParams","idToken","jwt","configuredIssuer","issuer","options","validationOptions","Object","assign","clientId","ignoreSignature","payload","features","isTokenVerifySupported","key","header","kid","valid","accessToken","claims","at_hash","hash"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/verifyToken.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getWellKnown, getKey } from './endpoints/well-known.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOidcHash } from '../crypto/oidcHash.js';\nimport { verifyToken as verifyToken$1 } from '../crypto/verifyToken.js';\nimport { validateClaims } from './util/validateClaims.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nimport { decodeToken } from './decodeToken.js';\n\nasync function verifyToken(sdk, token, validationParams) {\n    if (!token || !token.idToken) {\n        throw new AuthSdkError('Only idTokens may be verified');\n    }\n    var jwt = decodeToken(token.idToken);\n    const configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;\n    const { issuer } = await getWellKnown(sdk, configuredIssuer);\n    var validationOptions = Object.assign({\n        clientId: sdk.options.clientId,\n        ignoreSignature: sdk.options.ignoreSignature\n    }, validationParams, {\n        issuer\n    });\n    validateClaims(sdk, jwt.payload, validationOptions);\n    if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n        return token;\n    }\n    const key = await getKey(sdk, token.issuer, jwt.header.kid);\n    const valid = await verifyToken$1(token.idToken, key);\n    if (!valid) {\n        throw new AuthSdkError('The token signature is not valid');\n    }\n    if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n        const hash = await getOidcHash(validationParams.accessToken);\n        if (hash !== token.claims.at_hash) {\n            throw new AuthSdkError('Token hash verification failed');\n        }\n    }\n    return token;\n}\n\nexport { verifyToken };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,EAAEC,MAAM,QAAQ,2BAA2B;AAChE,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,WAAW,IAAIC,aAAa,QAAQ,0BAA0B;AACvE,SAASC,cAAc,QAAQ,0BAA0B;AACzD,OAAO,qBAAqB;AAC5B,OAAO,uBAAuB;AAC9B,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAEhCH,WAAWA,CAAAI,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,aAAA;EAAAA,YAAA,GAAAG,iBAAA,CAA1B,WAA2BC,GAAG,EAAEC,KAAK,EAAEC,gBAAgB,EAAE;IACrD,IAAI,CAACD,KAAK,IAAI,CAACA,KAAK,CAACE,OAAO,EAAE;MAC1B,MAAM,IAAIhB,YAAY,CAAC,+BAA+B,CAAC;IAC3D;IACA,IAAIiB,GAAG,GAAGZ,WAAW,CAACS,KAAK,CAACE,OAAO,CAAC;IACpC,MAAME,gBAAgB,GAAG,CAACH,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACI,MAAM,KAAKN,GAAG,CAACO,OAAO,CAACD,MAAM;IAC5I,MAAM;MAAEA;IAAO,CAAC,SAASrB,YAAY,CAACe,GAAG,EAAEK,gBAAgB,CAAC;IAC5D,IAAIG,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC;MAClCC,QAAQ,EAAEX,GAAG,CAACO,OAAO,CAACI,QAAQ;MAC9BC,eAAe,EAAEZ,GAAG,CAACO,OAAO,CAACK;IACjC,CAAC,EAAEV,gBAAgB,EAAE;MACjBI;IACJ,CAAC,CAAC;IACFf,cAAc,CAACS,GAAG,EAAEI,GAAG,CAACS,OAAO,EAAEL,iBAAiB,CAAC;IACnD,IAAIA,iBAAiB,CAACI,eAAe,IAAI,IAAI,IAAI,CAACZ,GAAG,CAACc,QAAQ,CAACC,sBAAsB,CAAC,CAAC,EAAE;MACrF,OAAOd,KAAK;IAChB;IACA,MAAMe,GAAG,SAAS9B,MAAM,CAACc,GAAG,EAAEC,KAAK,CAACK,MAAM,EAAEF,GAAG,CAACa,MAAM,CAACC,GAAG,CAAC;IAC3D,MAAMC,KAAK,SAAS7B,aAAa,CAACW,KAAK,CAACE,OAAO,EAAEa,GAAG,CAAC;IACrD,IAAI,CAACG,KAAK,EAAE;MACR,MAAM,IAAIhC,YAAY,CAAC,kCAAkC,CAAC;IAC9D;IACA,IAAIe,gBAAgB,IAAIA,gBAAgB,CAACkB,WAAW,IAAInB,KAAK,CAACoB,MAAM,CAACC,OAAO,EAAE;MAC1E,MAAMC,IAAI,SAASnC,WAAW,CAACc,gBAAgB,CAACkB,WAAW,CAAC;MAC5D,IAAIG,IAAI,KAAKtB,KAAK,CAACoB,MAAM,CAACC,OAAO,EAAE;QAC/B,MAAM,IAAInC,YAAY,CAAC,gCAAgC,CAAC;MAC5D;IACJ;IACA,OAAOc,KAAK;EAChB,CAAC;EAAA,OAAAL,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAAST,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}