{"ast":null,"code":"import { loc } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport oktaJQueryStatic from '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport Bundles from '../../util/Bundles.js';\nimport { getAuthenticatorDisplayName } from '../view-builder/utils/AuthenticatorUtil.js';\nimport { AUTHENTICATOR_KEY, FORMS } from './RemediationConstants.js';\nimport { I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS } from '../view-builder/views/enroll-profile/i18nBaseAttributeMappings.js';\n\n/* eslint-disable max-len */\nconst WEBAUTHN_API_GENERIC_ERROR_KEY = 'authfactor.webauthn.error';\nconst SECURITY_QUESTION_PREFIXES = ['enroll-authenticator.security_question.credentials.questionKey.', 'challenge-authenticator.security_question.credentials.questionKey.'];\nconst I18N_OVERRIDE_MAPPINGS = {\n  'identify.identifier': 'primaryauth.username.placeholder',\n  'select-authenticator-unlock-account.identifier': 'primaryauth.username.placeholder',\n  'identify.credentials.passcode': 'primaryauth.password.placeholder',\n  'identify.rememberMe': 'oie.remember',\n  'enroll-profile.userProfile.rememberMe': 'oie.remember',\n  'identify-recovery.identifier': 'password.forgot.email.or.username.placeholder',\n  'select-authenticator-enroll.authenticator.duo': 'factor.duo',\n  'select-authenticator-enroll.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-enroll.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-enroll.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-enroll.authenticator.okta_verify': 'oie.okta_verify.label',\n  'select-authenticator-enroll.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-enroll.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-enroll.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-enroll.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-enroll.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-enroll.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.duo': 'factor.duo',\n  'select-authenticator-authenticate.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-authenticate.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-authenticate.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'select-authenticator-authenticate.authenticator.okta_verify.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.totp': 'oie.okta_verify.totp.title',\n  'select-authenticator-authenticate.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-authenticate.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-authenticate.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-authenticate.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-authenticate.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-authenticate.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.custom_app': 'oie.custom.app.authenticator.title',\n  'select-authenticator-unlock-account.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-unlock-account.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-unlock-account.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.totp': 'oie.okta_verify.totp.title',\n  'authenticator-enrollment-data.phone_number.authenticator.phoneNumber': 'mfa.phoneNumber.placeholder',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.sms': 'oie.phone.enroll.sms.label',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.voice': 'oie.phone.enroll.voice.label',\n  'enroll-authenticator.okta_password.credentials.passcode': 'oie.password.passwordLabel',\n  'enroll-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.0': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.1': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'enroll-authenticator.security_question.credentials.question': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.questionKey': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'enroll-authenticator.onprem_mfa.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.onprem_mfa.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.rsa_token.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.rsa_token.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.credentialId': 'enroll.symantecVip.credentialId.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.passcode': 'enroll.symantecVip.passcode1.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.nextPasscode': 'enroll.symantecVip.passcode2.placeholder',\n  'enroll-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'enrollment-channel-data.email': 'oie.enroll.okta_verify.channel.email.label',\n  'select-enrollment-channel.authenticator.channel.qrcode': 'oie.enroll.okta_verify.select.channel.qrcode.label',\n  'select-enrollment-channel.authenticator.channel.email': 'oie.enroll.okta_verify.select.channel.email.label',\n  'select-enrollment-channel.authenticator.channel.sms': 'oie.enroll.okta_verify.select.channel.sms.label',\n  'challenge-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.okta_password.credentials.passcode': 'mfa.challenge.password.placeholder',\n  'challenge-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'challenge-authenticator.okta_verify.credentials.totp': 'oie.okta_verify.totp.enterCodeText',\n  'challenge-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'challenge-authenticator.onprem_mfa.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.rsa_token.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.custom_otp.credentials.passcode': 'oie.custom_otp.verify.passcode.label',\n  'challenge-authenticator.symantec_vip.credentials.passcode': 'oie.symantecVip.verify.passcode.label',\n  'challenge-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'challenge-authenticator.credentials.passcode': 'oie.password.label',\n  'reset-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator-warning.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'incorrectPassword': 'oie.password.incorrect.message',\n  'profile-update.userProfile.secondEmail': 'oie.user.profile.secondary.email',\n  'user-code.userCode': 'device.code.activate.label',\n  // Remap authn API errors to OIE\n  'api.authn.poll.error.push_rejected': 'oktaverify.rejected',\n  // Remap duo API errors to OIE\n  'oie.authenticator.duo.method.duo.verification_timeout': 'oie.authenticator.duo.error',\n  'oie.authenticator.duo.method.duo.verification_failed': 'oie.authenticator.duo.error',\n  'idx.email.verification.required': 'registration.complete.confirm.text',\n  'tooManyRequests': 'oie.tooManyRequests',\n  'api.users.auth.error.POST_PASSWORD_UPDATE_AUTH_FAILURE': 'oie.post.password.update.auth.failure.error',\n  'security.access_denied': 'errors.E0000006',\n  'E0000009': 'errors.E0000009',\n  'api.factors.error.sms.invalid_phone': 'oie.phone.invalid',\n  'app.ldap.password.reset.failed': 'errors.E0000017',\n  'oie.selfservice.unlock_user.challenge.failed.permissions': 'errors.E0000006',\n  'core.auth.factor.signedNonce.error.invalidEnrollment': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidFactor': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.deletedDevice': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidDeviceStatus': 'core.auth.factor.signedNonce.error.invalidDevice',\n  // re-map autoPush: \"Send push automatically\"\n  'challenge-poll.custom_app.autoChallenge': 'autoPush',\n  // authenticator-verification-custom-app-push-autochallenge\n  'challenge-poll.okta_verify.autoChallenge': 'autoPush',\n  // authenticator-verification-okta-verify-push-autoChallenge-on\n  'authenticator-verification-data.authenticator.autoChallenge': 'autoPush',\n  // authenticator-verification-data-okta-verify-push-autoChallenge-off.json\n  'authenticator-verification-data.okta_verify.authenticator.autoChallenge': 'autoPush',\n  'authenticator-verification-data.custom_app.authenticator.autoChallenge': 'autoPush',\n  // Existing overrides\n  ...I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS //enroll-profile strings\n};\nconst I18N_PARAMS_MAPPING = {\n  [FORMS.ENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.ON_PREM]: {\n      getParam: getAuthenticatorDisplayName\n    },\n    [AUTHENTICATOR_KEY.RSA]: {\n      getParam: getAuthenticatorDisplayName\n    }\n  }\n};\n/**\n * For i18n keys that require string interpolation using values from \"params\".\n * {baseKey} : {params}\n */\n\nconst I18N_OVERRIDE_WITH_PARAMS_MAP = {\n  'registration.error.invalidLoginEmail': {\n    Email: 'Email'\n  },\n  'registration.error.doesNotMatchPattern': {\n    Email: 'Email'\n  },\n  'registration.error.notUniqueWithinOrg': {\n    Email: 'Email'\n  }\n};\n/**\n * For messages that need to be interpolated with param values.\n *\n * Enumerate each possible param interpolation and hardcode that into properties file.\n * This is to ensure proper translation.\n *\n * Example - a known param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Email\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.Email\n *\n * Example - an unknown param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Custom Property\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.custom\n *\n * @param {String} key\n * @param {String} param\n * @returns {String}\n */\n\nconst getI8nKeyUsingParams = (key, param) => {\n  let i18nKey = key;\n  if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey][param]) {\n    i18nKey += `.${param}`;\n  } else {\n    i18nKey += '.custom';\n  }\n  return i18nKey;\n};\nconst getI18NParams = (remediation, authenticatorKey) => {\n  const params = [];\n  const formName = remediation.name;\n  if (I18N_PARAMS_MAPPING[formName] && I18N_PARAMS_MAPPING[formName][authenticatorKey]) {\n    const config = I18N_PARAMS_MAPPING[formName][authenticatorKey];\n    const param = config.getParam(remediation);\n    params.push(param);\n  }\n  return params;\n};\nconst getI18nKey = i18nPath => {\n  let i18nKey; // Extract security question value from i18nPath\n\n  SECURITY_QUESTION_PREFIXES.forEach(prefix => {\n    if (i18nPath.indexOf(prefix) === 0) {\n      const securityQuestionValue = i18nPath.replace(prefix, '');\n      i18nKey = `security.${securityQuestionValue}`;\n    }\n  });\n  if (I18N_OVERRIDE_MAPPINGS[i18nPath]) {\n    i18nKey = I18N_OVERRIDE_MAPPINGS[i18nPath];\n  }\n  if (i18nKey && !Bundles.login[i18nKey]) {\n    i18nKey = null;\n  }\n  return i18nKey;\n};\nconst doesI18NKeyExist = i18nKey => {\n  return !!Bundles.login[i18nKey];\n};\n/**\n * Find i18n value using {@code i18nPath} if it exists.\n * Otherwise return {@code defaultValue}.\n *\n * @param {string} i18nPath\n * @param {string} defaultValue\n * @param {string[]} params\n */\n\nconst getI18NValue = (i18nPath, defaultValue, params = []) => {\n  const i18nKey = getI18nKey(i18nPath); // TODO : OKTA-397225\n  // here defaultValue is uiSchema label or placeholders, some lables may be customized by \n  // admin to anything string. We should not localize and replace these customized labels even if i18nkey exists\n\n  if (i18nKey) {\n    return loc(i18nKey, 'login', params);\n  } else {\n    return defaultValue;\n  }\n};\nconst updateLabelForUiSchema = (remediation, uiSchema) => {\n  var _remediation$relatesT, _remediation$relatesT2;\n  if (uiSchema.mutable === false && uiSchema.name.indexOf('questionKey') < 0) {\n    return;\n  }\n  const authenticatorKey = (_remediation$relatesT = remediation.relatesTo) === null || _remediation$relatesT === void 0 ? void 0 : (_remediation$relatesT2 = _remediation$relatesT.value) === null || _remediation$relatesT2 === void 0 ? void 0 : _remediation$relatesT2.key;\n  const authenticatorKeyPath = authenticatorKey ? `.${remediation.relatesTo.value.key}` : '';\n  const i18nPrefix = `${remediation.name}${authenticatorKeyPath}.`;\n  let i18nPath = `${i18nPrefix}${uiSchema.name}`;\n  if (uiSchema.type === 'text' && uiSchema.name.indexOf('questionKey') >= 0 && uiSchema.value !== 'custom') {\n    i18nPath = `${i18nPath}.${uiSchema.value}`;\n  }\n  if (uiSchema.type === 'checkbox' && uiSchema.placeholder) {\n    uiSchema.placeholder = getI18NValue(i18nPath, uiSchema.placeholder);\n  }\n  if (uiSchema.label) {\n    const params = getI18NParams(remediation, authenticatorKey);\n    uiSchema.label = getI18NValue(i18nPath, uiSchema.label, params);\n  }\n  if (oktaJQueryStatic.isPlainObject(uiSchema.options)) {\n    uiSchema.options = oktaUnderscore.mapObject(uiSchema.options, (value, key) => {\n      const i18nPathOption = `${i18nPath}.${key}`;\n      return getI18NValue(i18nPathOption, value);\n    });\n  }\n  if (Array.isArray(uiSchema.options)) {\n    uiSchema.options.forEach(o => {\n      if (!o.label) {\n        return;\n      }\n      let i18nPathOption;\n      if (o.authenticatorKey) {\n        var _o$value;\n        i18nPathOption = `${i18nPath}.${o.authenticatorKey}`;\n        const methodType = (_o$value = o.value) === null || _o$value === void 0 ? void 0 : _o$value.methodType;\n        if (o.authenticatorKey === AUTHENTICATOR_KEY.OV && methodType) {\n          i18nPathOption = `${i18nPathOption}.${methodType}`;\n        }\n      } else if (typeof o.value === 'string' || typeof o.value === 'number') {\n        // value could be string, number, object or undefined.\n        i18nPathOption = `${i18nPath}.${o.value}`;\n      } else {\n        i18nPathOption = i18nPath;\n      }\n      o.label = getI18NValue(i18nPathOption, o.label);\n    });\n  }\n  if (Array.isArray(uiSchema.optionsUiSchemas)) {\n    uiSchema.optionsUiSchemas.forEach(optionsUiSchema => {\n      optionsUiSchema.forEach(uiSchema => updateLabelForUiSchema(remediation, uiSchema));\n    });\n  }\n};\nconst isWebAuthnAPIError = i18nKey => i18nKey.startsWith(WEBAUTHN_API_GENERIC_ERROR_KEY);\n/**\n * @typedef {Object} Message\n * @property {string} message\n * @property {Object=} i18n\n * @property {string} i18n.key\n * @property {string[]} i18n.params\n */\n\n/**\n * - If `message.i18n.key` exists and has a value in 'login.properties'\n *   through the given key or via I18N_OVERRIDE_MAPPINGS, return the value.\n *\n * - returns `message.message` otherwise\n *\n * @param {Message} message\n */\n\nconst getMessage = message => {\n  var _message$i18n;\n  if ((_message$i18n = message.i18n) !== null && _message$i18n !== void 0 && _message$i18n.key) {\n    var _message$i18n2;\n    let i18nKey = message.i18n.key;\n    let i18nParams = message.i18n.params || []; // TODO - remove this block once API fix is done - OKTA-398080\n    // Sometimes API sends params: [\"\"] an array with empty string.\n    // example - error-authenticator-enroll-password-common mock\n\n    if (i18nParams.length === 1 && i18nParams[0] === '') {\n      i18nParams = [];\n    }\n    if (I18N_OVERRIDE_MAPPINGS[(_message$i18n2 = message.i18n) === null || _message$i18n2 === void 0 ? void 0 : _message$i18n2.key]) {\n      var _message$i18n3;\n      i18nKey = I18N_OVERRIDE_MAPPINGS[(_message$i18n3 = message.i18n) === null || _message$i18n3 === void 0 ? void 0 : _message$i18n3.key];\n    } else if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey]) {\n      var _message$i18n$params;\n      const param = (_message$i18n$params = message.i18n.params) === null || _message$i18n$params === void 0 ? void 0 : _message$i18n$params[0];\n      i18nKey = getI8nKeyUsingParams(i18nKey, param);\n      i18nParams = i18nKey.endsWith('custom') ? [param] : [];\n    }\n    if (Bundles.login[i18nKey]) {\n      // expect user config i18n properly.\n      // e.g. the i18n value shall have placeholders like `{0}`, when params is not empty.\n\n      return loc(i18nKey, 'login', i18nParams);\n    }\n    if (isWebAuthnAPIError(i18nKey)) {\n      // The WebAuthn api error doesn't make much sense to a typical end user, but useful for developer.\n      // So keep the api message in response, but show a generic error message on UI.\n      return loc(WEBAUTHN_API_GENERIC_ERROR_KEY, 'login');\n    }\n  }\n  return message.message;\n};\n/**\n * @param {Object} error\n */\n\nconst getMessageFromBrowserError = error => {\n  if (error.name) {\n    const key = `oie.browser.error.${error.name}`;\n    if (Bundles.login[key]) {\n      // expect user config i18n properly.\n\n      return loc(key, 'login');\n    }\n  }\n  return error.message;\n};\n/**\n * - iff `message.i18n.key` exists return the key.\n *\n * @param {Message} message\n */\n\nconst getMessageKey = message => {\n  var _message$i18n4;\n  return (message === null || message === void 0 ? void 0 : (_message$i18n4 = message.i18n) === null || _message$i18n4 === void 0 ? void 0 : _message$i18n4.key) || '';\n};\nconst uiSchemaLabelTransformer = transformedResp => {\n  var _transformedResp$mess;\n\n  // Try to override label using i18n value\n  if (Array.isArray(transformedResp.remediations)) {\n    transformedResp.remediations.filter(remediation => Array.isArray(remediation.uiSchema) && remediation.uiSchema.length).forEach(remediation => {\n      remediation.uiSchema.forEach(uiSchema => updateLabelForUiSchema(remediation, uiSchema));\n    });\n  } // Try to override `messages` using i18n value.\n  // 1. This is only handling top level `messages` object when response status is 200.\n  // 2. See `IonResponseHelper.js` where handle `messages` object when none 200 response.\n  // 3. Handling `messages` in remediation forms on 200 response is not considered yet.\n  //    Is that possible?\n\n  if (Array.isArray((_transformedResp$mess = transformedResp.messages) === null || _transformedResp$mess === void 0 ? void 0 : _transformedResp$mess.value)) {\n    transformedResp.messages.value.forEach(message => {\n      message.message = getMessage(message);\n    });\n  }\n  return transformedResp;\n};\n/**\n * Has this i18n key been overridden for customization?\n * @param {String} i18nKey\n * @param {Object} settings\n * @returns Boolean\n */\n\nconst isCustomizedI18nKey = (i18nKey, settings) => {\n  const language = settings.get('languageCode');\n  const i18n = settings.get('i18n');\n  const customizedProperty = i18n && i18n[language] && i18n[language][i18nKey];\n  return !!customizedProperty;\n};\nexport { uiSchemaLabelTransformer as default, doesI18NKeyExist, getI18NParams, getMessage, getMessageFromBrowserError, getMessageKey, isCustomizedI18nKey };","map":{"version":3,"names":["loc","oktaJQueryStatic","oktaUnderscore","Bundles","getAuthenticatorDisplayName","AUTHENTICATOR_KEY","FORMS","I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS","WEBAUTHN_API_GENERIC_ERROR_KEY","SECURITY_QUESTION_PREFIXES","I18N_OVERRIDE_MAPPINGS","I18N_PARAMS_MAPPING","ENROLL_AUTHENTICATOR","ON_PREM","getParam","RSA","I18N_OVERRIDE_WITH_PARAMS_MAP","Email","getI8nKeyUsingParams","key","param","i18nKey","getI18NParams","remediation","authenticatorKey","params","formName","name","config","push","getI18nKey","i18nPath","forEach","prefix","indexOf","securityQuestionValue","replace","login","doesI18NKeyExist","getI18NValue","defaultValue","updateLabelForUiSchema","uiSchema","_remediation$relatesT","_remediation$relatesT2","mutable","relatesTo","value","authenticatorKeyPath","i18nPrefix","type","placeholder","label","isPlainObject","options","mapObject","i18nPathOption","Array","isArray","o","_o$value","methodType","OV","optionsUiSchemas","optionsUiSchema","isWebAuthnAPIError","startsWith","getMessage","message","_message$i18n","i18n","_message$i18n2","i18nParams","length","_message$i18n3","_message$i18n$params","endsWith","getMessageFromBrowserError","error","getMessageKey","_message$i18n4","uiSchemaLabelTransformer","transformedResp","_transformedResp$mess","remediations","filter","messages","isCustomizedI18nKey","settings","language","get","customizedProperty","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/ion/i18nTransformer.js"],"sourcesContent":["import { loc } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport oktaJQueryStatic from '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport Bundles from '../../util/Bundles.js';\nimport { getAuthenticatorDisplayName } from '../view-builder/utils/AuthenticatorUtil.js';\nimport { AUTHENTICATOR_KEY, FORMS } from './RemediationConstants.js';\nimport { I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS } from '../view-builder/views/enroll-profile/i18nBaseAttributeMappings.js';\n\n/* eslint-disable max-len */\nconst WEBAUTHN_API_GENERIC_ERROR_KEY = 'authfactor.webauthn.error';\nconst SECURITY_QUESTION_PREFIXES = ['enroll-authenticator.security_question.credentials.questionKey.', 'challenge-authenticator.security_question.credentials.questionKey.'];\nconst I18N_OVERRIDE_MAPPINGS = {\n  'identify.identifier': 'primaryauth.username.placeholder',\n  'select-authenticator-unlock-account.identifier': 'primaryauth.username.placeholder',\n  'identify.credentials.passcode': 'primaryauth.password.placeholder',\n  'identify.rememberMe': 'oie.remember',\n  'enroll-profile.userProfile.rememberMe': 'oie.remember',\n  'identify-recovery.identifier': 'password.forgot.email.or.username.placeholder',\n  'select-authenticator-enroll.authenticator.duo': 'factor.duo',\n  'select-authenticator-enroll.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-enroll.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-enroll.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-enroll.authenticator.okta_verify': 'oie.okta_verify.label',\n  'select-authenticator-enroll.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-enroll.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-enroll.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-enroll.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-enroll.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-enroll.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.duo': 'factor.duo',\n  'select-authenticator-authenticate.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-authenticate.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-authenticate.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'select-authenticator-authenticate.authenticator.okta_verify.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.totp': 'oie.okta_verify.totp.title',\n  'select-authenticator-authenticate.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-authenticate.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-authenticate.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-authenticate.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-authenticate.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-authenticate.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.custom_app': 'oie.custom.app.authenticator.title',\n  'select-authenticator-unlock-account.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-unlock-account.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-unlock-account.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.totp': 'oie.okta_verify.totp.title',\n  'authenticator-enrollment-data.phone_number.authenticator.phoneNumber': 'mfa.phoneNumber.placeholder',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.sms': 'oie.phone.enroll.sms.label',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.voice': 'oie.phone.enroll.voice.label',\n  'enroll-authenticator.okta_password.credentials.passcode': 'oie.password.passwordLabel',\n  'enroll-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.0': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.1': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'enroll-authenticator.security_question.credentials.question': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.questionKey': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'enroll-authenticator.onprem_mfa.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.onprem_mfa.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.rsa_token.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.rsa_token.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.credentialId': 'enroll.symantecVip.credentialId.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.passcode': 'enroll.symantecVip.passcode1.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.nextPasscode': 'enroll.symantecVip.passcode2.placeholder',\n  'enroll-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'enrollment-channel-data.email': 'oie.enroll.okta_verify.channel.email.label',\n  'select-enrollment-channel.authenticator.channel.qrcode': 'oie.enroll.okta_verify.select.channel.qrcode.label',\n  'select-enrollment-channel.authenticator.channel.email': 'oie.enroll.okta_verify.select.channel.email.label',\n  'select-enrollment-channel.authenticator.channel.sms': 'oie.enroll.okta_verify.select.channel.sms.label',\n  'challenge-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.okta_password.credentials.passcode': 'mfa.challenge.password.placeholder',\n  'challenge-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'challenge-authenticator.okta_verify.credentials.totp': 'oie.okta_verify.totp.enterCodeText',\n  'challenge-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'challenge-authenticator.onprem_mfa.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.rsa_token.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.custom_otp.credentials.passcode': 'oie.custom_otp.verify.passcode.label',\n  'challenge-authenticator.symantec_vip.credentials.passcode': 'oie.symantecVip.verify.passcode.label',\n  'challenge-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'challenge-authenticator.credentials.passcode': 'oie.password.label',\n  'reset-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator-warning.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'incorrectPassword': 'oie.password.incorrect.message',\n  'profile-update.userProfile.secondEmail': 'oie.user.profile.secondary.email',\n  'user-code.userCode': 'device.code.activate.label',\n  // Remap authn API errors to OIE\n  'api.authn.poll.error.push_rejected': 'oktaverify.rejected',\n  // Remap duo API errors to OIE\n  'oie.authenticator.duo.method.duo.verification_timeout': 'oie.authenticator.duo.error',\n  'oie.authenticator.duo.method.duo.verification_failed': 'oie.authenticator.duo.error',\n  'idx.email.verification.required': 'registration.complete.confirm.text',\n  'tooManyRequests': 'oie.tooManyRequests',\n  'api.users.auth.error.POST_PASSWORD_UPDATE_AUTH_FAILURE': 'oie.post.password.update.auth.failure.error',\n  'security.access_denied': 'errors.E0000006',\n  'E0000009': 'errors.E0000009',\n  'api.factors.error.sms.invalid_phone': 'oie.phone.invalid',\n  'app.ldap.password.reset.failed': 'errors.E0000017',\n  'oie.selfservice.unlock_user.challenge.failed.permissions': 'errors.E0000006',\n  'core.auth.factor.signedNonce.error.invalidEnrollment': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidFactor': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.deletedDevice': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidDeviceStatus': 'core.auth.factor.signedNonce.error.invalidDevice',\n  // re-map autoPush: \"Send push automatically\"\n  'challenge-poll.custom_app.autoChallenge': 'autoPush',\n  // authenticator-verification-custom-app-push-autochallenge\n  'challenge-poll.okta_verify.autoChallenge': 'autoPush',\n  // authenticator-verification-okta-verify-push-autoChallenge-on\n  'authenticator-verification-data.authenticator.autoChallenge': 'autoPush',\n  // authenticator-verification-data-okta-verify-push-autoChallenge-off.json\n  'authenticator-verification-data.okta_verify.authenticator.autoChallenge': 'autoPush',\n  'authenticator-verification-data.custom_app.authenticator.autoChallenge': 'autoPush',\n  // Existing overrides\n  ...I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS //enroll-profile strings\n\n};\nconst I18N_PARAMS_MAPPING = {\n  [FORMS.ENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.ON_PREM]: {\n      getParam: getAuthenticatorDisplayName\n    },\n    [AUTHENTICATOR_KEY.RSA]: {\n      getParam: getAuthenticatorDisplayName\n    }\n  }\n};\n/**\n * For i18n keys that require string interpolation using values from \"params\".\n * {baseKey} : {params}\n */\n\nconst I18N_OVERRIDE_WITH_PARAMS_MAP = {\n  'registration.error.invalidLoginEmail': {\n    Email: 'Email'\n  },\n  'registration.error.doesNotMatchPattern': {\n    Email: 'Email'\n  },\n  'registration.error.notUniqueWithinOrg': {\n    Email: 'Email'\n  }\n};\n/**\n * For messages that need to be interpolated with param values.\n *\n * Enumerate each possible param interpolation and hardcode that into properties file.\n * This is to ensure proper translation.\n *\n * Example - a known param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Email\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.Email\n *\n * Example - an unknown param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Custom Property\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.custom\n *\n * @param {String} key\n * @param {String} param\n * @returns {String}\n */\n\nconst getI8nKeyUsingParams = (key, param) => {\n  let i18nKey = key;\n\n  if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey][param]) {\n    i18nKey += `.${param}`;\n  } else {\n    i18nKey += '.custom';\n  }\n\n  return i18nKey;\n};\n\nconst getI18NParams = (remediation, authenticatorKey) => {\n  const params = [];\n  const formName = remediation.name;\n\n  if (I18N_PARAMS_MAPPING[formName] && I18N_PARAMS_MAPPING[formName][authenticatorKey]) {\n    const config = I18N_PARAMS_MAPPING[formName][authenticatorKey];\n    const param = config.getParam(remediation);\n    params.push(param);\n  }\n\n  return params;\n};\n\nconst getI18nKey = i18nPath => {\n  let i18nKey; // Extract security question value from i18nPath\n\n  SECURITY_QUESTION_PREFIXES.forEach(prefix => {\n    if (i18nPath.indexOf(prefix) === 0) {\n      const securityQuestionValue = i18nPath.replace(prefix, '');\n      i18nKey = `security.${securityQuestionValue}`;\n    }\n  });\n\n  if (I18N_OVERRIDE_MAPPINGS[i18nPath]) {\n    i18nKey = I18N_OVERRIDE_MAPPINGS[i18nPath];\n  }\n\n  if (i18nKey && !Bundles.login[i18nKey]) {\n    i18nKey = null;\n  }\n\n  return i18nKey;\n};\n\nconst doesI18NKeyExist = i18nKey => {\n  return !!Bundles.login[i18nKey];\n};\n/**\n * Find i18n value using {@code i18nPath} if it exists.\n * Otherwise return {@code defaultValue}.\n *\n * @param {string} i18nPath\n * @param {string} defaultValue\n * @param {string[]} params\n */\n\n\nconst getI18NValue = (i18nPath, defaultValue, params = []) => {\n  const i18nKey = getI18nKey(i18nPath); // TODO : OKTA-397225\n  // here defaultValue is uiSchema label or placeholders, some lables may be customized by \n  // admin to anything string. We should not localize and replace these customized labels even if i18nkey exists\n\n  if (i18nKey) {\n    return loc(i18nKey, 'login', params);\n  } else {\n    return defaultValue;\n  }\n};\n\nconst updateLabelForUiSchema = (remediation, uiSchema) => {\n  var _remediation$relatesT, _remediation$relatesT2;\n\n  if (uiSchema.mutable === false && uiSchema.name.indexOf('questionKey') < 0) {\n    return;\n  }\n  const authenticatorKey = (_remediation$relatesT = remediation.relatesTo) === null || _remediation$relatesT === void 0 ? void 0 : (_remediation$relatesT2 = _remediation$relatesT.value) === null || _remediation$relatesT2 === void 0 ? void 0 : _remediation$relatesT2.key;\n  const authenticatorKeyPath = authenticatorKey ? `.${remediation.relatesTo.value.key}` : '';\n  const i18nPrefix = `${remediation.name}${authenticatorKeyPath}.`;\n  let i18nPath = `${i18nPrefix}${uiSchema.name}`;\n\n  if (uiSchema.type === 'text' && uiSchema.name.indexOf('questionKey') >= 0 && uiSchema.value !== 'custom') {\n    i18nPath = `${i18nPath}.${uiSchema.value}`;\n  }\n\n  if (uiSchema.type === 'checkbox' && uiSchema.placeholder) {\n    uiSchema.placeholder = getI18NValue(i18nPath, uiSchema.placeholder);\n  }\n\n  if (uiSchema.label) {\n    const params = getI18NParams(remediation, authenticatorKey);\n    uiSchema.label = getI18NValue(i18nPath, uiSchema.label, params);\n  }\n\n  if (oktaJQueryStatic.isPlainObject(uiSchema.options)) {\n    uiSchema.options = oktaUnderscore.mapObject(uiSchema.options, (value, key) => {\n      const i18nPathOption = `${i18nPath}.${key}`;\n      return getI18NValue(i18nPathOption, value);\n    });\n  }\n\n  if (Array.isArray(uiSchema.options)) {\n    uiSchema.options.forEach(o => {\n      if (!o.label) {\n        return;\n      }\n\n      let i18nPathOption;\n\n      if (o.authenticatorKey) {\n        var _o$value;\n\n        i18nPathOption = `${i18nPath}.${o.authenticatorKey}`;\n        const methodType = (_o$value = o.value) === null || _o$value === void 0 ? void 0 : _o$value.methodType;\n\n        if (o.authenticatorKey === AUTHENTICATOR_KEY.OV && methodType) {\n          i18nPathOption = `${i18nPathOption}.${methodType}`;\n        }\n      } else if (typeof o.value === 'string' || typeof o.value === 'number') {\n        // value could be string, number, object or undefined.\n        i18nPathOption = `${i18nPath}.${o.value}`;\n      } else {\n        i18nPathOption = i18nPath;\n      }\n      o.label = getI18NValue(i18nPathOption, o.label);\n    });\n  }\n\n  if (Array.isArray(uiSchema.optionsUiSchemas)) {\n    uiSchema.optionsUiSchemas.forEach(optionsUiSchema => {\n      optionsUiSchema.forEach(uiSchema => updateLabelForUiSchema(remediation, uiSchema));\n    });\n  }\n};\n\nconst isWebAuthnAPIError = i18nKey => i18nKey.startsWith(WEBAUTHN_API_GENERIC_ERROR_KEY);\n/**\n * @typedef {Object} Message\n * @property {string} message\n * @property {Object=} i18n\n * @property {string} i18n.key\n * @property {string[]} i18n.params\n */\n\n/**\n * - If `message.i18n.key` exists and has a value in 'login.properties'\n *   through the given key or via I18N_OVERRIDE_MAPPINGS, return the value.\n *\n * - returns `message.message` otherwise\n *\n * @param {Message} message\n */\n\n\nconst getMessage = message => {\n  var _message$i18n;\n\n  if ((_message$i18n = message.i18n) !== null && _message$i18n !== void 0 && _message$i18n.key) {\n    var _message$i18n2;\n\n    let i18nKey = message.i18n.key;\n    let i18nParams = message.i18n.params || []; // TODO - remove this block once API fix is done - OKTA-398080\n    // Sometimes API sends params: [\"\"] an array with empty string.\n    // example - error-authenticator-enroll-password-common mock\n\n    if (i18nParams.length === 1 && i18nParams[0] === '') {\n      i18nParams = [];\n    }\n\n    if (I18N_OVERRIDE_MAPPINGS[(_message$i18n2 = message.i18n) === null || _message$i18n2 === void 0 ? void 0 : _message$i18n2.key]) {\n      var _message$i18n3;\n\n      i18nKey = I18N_OVERRIDE_MAPPINGS[(_message$i18n3 = message.i18n) === null || _message$i18n3 === void 0 ? void 0 : _message$i18n3.key];\n    } else if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey]) {\n      var _message$i18n$params;\n\n      const param = (_message$i18n$params = message.i18n.params) === null || _message$i18n$params === void 0 ? void 0 : _message$i18n$params[0];\n      i18nKey = getI8nKeyUsingParams(i18nKey, param);\n      i18nParams = i18nKey.endsWith('custom') ? [param] : [];\n    }\n\n    if (Bundles.login[i18nKey]) { // expect user config i18n properly.\n      // e.g. the i18n value shall have placeholders like `{0}`, when params is not empty.\n\n      return loc(i18nKey, 'login', i18nParams);\n    }\n\n    if (isWebAuthnAPIError(i18nKey)) {\n      // The WebAuthn api error doesn't make much sense to a typical end user, but useful for developer.\n      // So keep the api message in response, but show a generic error message on UI.\n      return loc(WEBAUTHN_API_GENERIC_ERROR_KEY, 'login');\n    }\n  }\n  return message.message;\n};\n/**\n * @param {Object} error\n */\n\n\nconst getMessageFromBrowserError = error => {\n  if (error.name) {\n    const key = `oie.browser.error.${error.name}`;\n\n    if (Bundles.login[key]) { // expect user config i18n properly.\n\n      return loc(key, 'login');\n    }\n  }\n\n  return error.message;\n};\n/**\n * - iff `message.i18n.key` exists return the key.\n *\n * @param {Message} message\n */\n\n\nconst getMessageKey = message => {\n  var _message$i18n4;\n\n  return (message === null || message === void 0 ? void 0 : (_message$i18n4 = message.i18n) === null || _message$i18n4 === void 0 ? void 0 : _message$i18n4.key) || '';\n};\n\nconst uiSchemaLabelTransformer = transformedResp => {\n  var _transformedResp$mess;\n\n  // Try to override label using i18n value\n  if (Array.isArray(transformedResp.remediations)) {\n    transformedResp.remediations.filter(remediation => Array.isArray(remediation.uiSchema) && remediation.uiSchema.length).forEach(remediation => {\n      remediation.uiSchema.forEach(uiSchema => updateLabelForUiSchema(remediation, uiSchema));\n    });\n  } // Try to override `messages` using i18n value.\n  // 1. This is only handling top level `messages` object when response status is 200.\n  // 2. See `IonResponseHelper.js` where handle `messages` object when none 200 response.\n  // 3. Handling `messages` in remediation forms on 200 response is not considered yet.\n  //    Is that possible?\n\n\n  if (Array.isArray((_transformedResp$mess = transformedResp.messages) === null || _transformedResp$mess === void 0 ? void 0 : _transformedResp$mess.value)) {\n    transformedResp.messages.value.forEach(message => {\n      message.message = getMessage(message);\n    });\n  }\n\n  return transformedResp;\n};\n/**\n * Has this i18n key been overridden for customization?\n * @param {String} i18nKey\n * @param {Object} settings\n * @returns Boolean\n */\n\n\nconst isCustomizedI18nKey = (i18nKey, settings) => {\n  const language = settings.get('languageCode');\n  const i18n = settings.get('i18n');\n  const customizedProperty = i18n && i18n[language] && i18n[language][i18nKey];\n  return !!customizedProperty;\n};\n\nexport { uiSchemaLabelTransformer as default, doesI18NKeyExist, getI18NParams, getMessage, getMessageFromBrowserError, getMessageKey, isCustomizedI18nKey };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}