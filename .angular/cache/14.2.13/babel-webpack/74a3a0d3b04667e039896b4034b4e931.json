{"ast":null,"code":"import _asyncToGenerator from \"/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AutoRenewService } from './services/AutoRenewService.js';\nimport { SyncStorageService } from './services/SyncStorageService.js';\nimport { LeaderElectionService } from './services/LeaderElectionService.js';\nimport { removeNils } from './util/object.js';\nconst AUTO_RENEW = 'autoRenew';\nconst SYNC_STORAGE = 'syncStorage';\nconst LEADER_ELECTION = 'leaderElection';\nclass ServiceManager {\n  constructor(sdk, options = {}) {\n    this.sdk = sdk;\n    this.onLeader = this.onLeader.bind(this);\n    const {\n      autoRenew,\n      autoRemove,\n      syncStorage\n    } = sdk.tokenManager.getOptions();\n    options.electionChannelName = options.electionChannelName || options.broadcastChannelName;\n    this.options = Object.assign({}, ServiceManager.defaultOptions, {\n      autoRenew,\n      autoRemove,\n      syncStorage\n    }, {\n      electionChannelName: `${sdk.options.clientId}-election`,\n      syncChannelName: `${sdk.options.clientId}-sync`\n    }, removeNils(options));\n    this.started = false;\n    this.services = new Map();\n    ServiceManager.knownServices.forEach(name => {\n      const svc = this.createService(name);\n      if (svc) {\n        this.services.set(name, svc);\n      }\n    });\n  }\n  onLeader() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.started) {\n        yield _this.startServices();\n      }\n    })();\n  }\n  isLeader() {\n    var _a;\n    return (_a = this.getService(LEADER_ELECTION)) === null || _a === void 0 ? void 0 : _a.isLeader();\n  }\n  isLeaderRequired() {\n    return [...this.services.values()].some(srv => srv.canStart() && srv.requiresLeadership());\n  }\n  start() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.started) {\n        return;\n      }\n      yield _this2.startServices();\n      _this2.started = true;\n    })();\n  }\n  stop() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3.stopServices();\n      _this3.started = false;\n    })();\n  }\n  getService(name) {\n    return this.services.get(name);\n  }\n  startServices() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      for (const [name, srv] of _this4.services.entries()) {\n        if (_this4.canStartService(name, srv)) {\n          yield srv.start();\n        }\n      }\n    })();\n  }\n  stopServices() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      for (const srv of _this5.services.values()) {\n        yield srv.stop();\n      }\n    })();\n  }\n  canStartService(name, srv) {\n    let canStart = srv.canStart() && !srv.isStarted();\n    if (name === LEADER_ELECTION) {\n      canStart && (canStart = this.isLeaderRequired());\n    } else if (srv.requiresLeadership()) {\n      canStart && (canStart = this.isLeader());\n    }\n    return canStart;\n  }\n  createService(name) {\n    const tokenManager = this.sdk.tokenManager;\n    let service;\n    switch (name) {\n      case LEADER_ELECTION:\n        service = new LeaderElectionService(Object.assign(Object.assign({}, this.options), {\n          onLeader: this.onLeader\n        }));\n        break;\n      case AUTO_RENEW:\n        service = new AutoRenewService(tokenManager, Object.assign({}, this.options));\n        break;\n      case SYNC_STORAGE:\n        service = new SyncStorageService(tokenManager, Object.assign({}, this.options));\n        break;\n      default:\n        throw new Error(`Unknown service ${name}`);\n    }\n    return service;\n  }\n}\nServiceManager.knownServices = [AUTO_RENEW, SYNC_STORAGE, LEADER_ELECTION];\nServiceManager.defaultOptions = {\n  autoRenew: true,\n  autoRemove: true,\n  syncStorage: true\n};\nexport { ServiceManager };","map":{"version":3,"names":["AutoRenewService","SyncStorageService","LeaderElectionService","removeNils","AUTO_RENEW","SYNC_STORAGE","LEADER_ELECTION","ServiceManager","constructor","sdk","options","onLeader","bind","autoRenew","autoRemove","syncStorage","tokenManager","getOptions","electionChannelName","broadcastChannelName","Object","assign","defaultOptions","clientId","syncChannelName","started","services","Map","knownServices","forEach","name","svc","createService","set","_this","_asyncToGenerator","startServices","isLeader","_a","getService","isLeaderRequired","values","some","srv","canStart","requiresLeadership","start","_this2","stop","_this3","stopServices","get","_this4","entries","canStartService","_this5","isStarted","service","Error"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/ServiceManager.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AutoRenewService } from './services/AutoRenewService.js';\nimport { SyncStorageService } from './services/SyncStorageService.js';\nimport { LeaderElectionService } from './services/LeaderElectionService.js';\nimport { removeNils } from './util/object.js';\n\nconst AUTO_RENEW = 'autoRenew';\nconst SYNC_STORAGE = 'syncStorage';\nconst LEADER_ELECTION = 'leaderElection';\nclass ServiceManager {\n    constructor(sdk, options = {}) {\n        this.sdk = sdk;\n        this.onLeader = this.onLeader.bind(this);\n        const { autoRenew, autoRemove, syncStorage } = sdk.tokenManager.getOptions();\n        options.electionChannelName = options.electionChannelName || options.broadcastChannelName;\n        this.options = Object.assign({}, ServiceManager.defaultOptions, { autoRenew, autoRemove, syncStorage }, {\n            electionChannelName: `${sdk.options.clientId}-election`,\n            syncChannelName: `${sdk.options.clientId}-sync`,\n        }, removeNils(options));\n        this.started = false;\n        this.services = new Map();\n        ServiceManager.knownServices.forEach(name => {\n            const svc = this.createService(name);\n            if (svc) {\n                this.services.set(name, svc);\n            }\n        });\n    }\n    async onLeader() {\n        if (this.started) {\n            await this.startServices();\n        }\n    }\n    isLeader() {\n        var _a;\n        return (_a = this.getService(LEADER_ELECTION)) === null || _a === void 0 ? void 0 : _a.isLeader();\n    }\n    isLeaderRequired() {\n        return [...this.services.values()].some(srv => srv.canStart() && srv.requiresLeadership());\n    }\n    async start() {\n        if (this.started) {\n            return;\n        }\n        await this.startServices();\n        this.started = true;\n    }\n    async stop() {\n        await this.stopServices();\n        this.started = false;\n    }\n    getService(name) {\n        return this.services.get(name);\n    }\n    async startServices() {\n        for (const [name, srv] of this.services.entries()) {\n            if (this.canStartService(name, srv)) {\n                await srv.start();\n            }\n        }\n    }\n    async stopServices() {\n        for (const srv of this.services.values()) {\n            await srv.stop();\n        }\n    }\n    canStartService(name, srv) {\n        let canStart = srv.canStart() && !srv.isStarted();\n        if (name === LEADER_ELECTION) {\n            canStart && (canStart = this.isLeaderRequired());\n        }\n        else if (srv.requiresLeadership()) {\n            canStart && (canStart = this.isLeader());\n        }\n        return canStart;\n    }\n    createService(name) {\n        const tokenManager = this.sdk.tokenManager;\n        let service;\n        switch (name) {\n            case LEADER_ELECTION:\n                service = new LeaderElectionService(Object.assign(Object.assign({}, this.options), { onLeader: this.onLeader }));\n                break;\n            case AUTO_RENEW:\n                service = new AutoRenewService(tokenManager, Object.assign({}, this.options));\n                break;\n            case SYNC_STORAGE:\n                service = new SyncStorageService(tokenManager, Object.assign({}, this.options));\n                break;\n            default:\n                throw new Error(`Unknown service ${name}`);\n        }\n        return service;\n    }\n}\nServiceManager.knownServices = [AUTO_RENEW, SYNC_STORAGE, LEADER_ELECTION];\nServiceManager.defaultOptions = {\n    autoRenew: true,\n    autoRemove: true,\n    syncStorage: true\n};\n\nexport { ServiceManager };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}