{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\nclass Remediator {\n  constructor(remediation, values = {}, options = {}) {\n    this.values = Object.assign({}, values);\n    this.options = Object.assign({}, options);\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n  formatAuthenticators() {\n    this.values.authenticators = this.values.authenticators || [];\n    this.values.authenticators = this.values.authenticators.map(authenticator => {\n      return formatAuthenticator(authenticator);\n    });\n    if (this.values.authenticator) {\n      const authenticator = formatAuthenticator(this.values.authenticator);\n      const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n        return compareAuthenticators(authenticator, existing);\n      });\n      if (!hasAuthenticatorInList) {\n        this.values.authenticators.push(authenticator);\n      }\n    }\n    this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n      if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n        acc.push(authenticator);\n      }\n      return acc;\n    }, this.values.authenticatorsData || []);\n  }\n  getName() {\n    return this.remediation.name;\n  }\n  canRemediate() {\n    const required = getRequiredValues(this.remediation);\n    const needed = required.find(key => !this.hasData(key));\n    if (needed) {\n      return false;\n    }\n    return true;\n  }\n  getData(key) {\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues.reduce((data, key) => {\n        data[key] = this.getData(key);\n        return data;\n      }, {});\n      return res;\n    }\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      const val = this[`map${titleCase(key)}`](this.remediation.value.find(({\n        name\n      }) => name === key));\n      if (val) {\n        return val;\n      }\n    }\n    if (this.map && this.map[key]) {\n      const entry = this.map[key];\n      for (let i = 0; i < entry.length; i++) {\n        let val = this.values[entry[i]];\n        if (val) {\n          return val;\n        }\n      }\n    }\n    return this.values[key];\n  }\n  hasData(key) {\n    return !!this.getData(key);\n  }\n  getNextStep(_authClient, _context) {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const authenticator = this.getAuthenticator();\n    const type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n    return Object.assign(Object.assign({\n      name,\n      inputs\n    }, type && {\n      type\n    }), authenticator && {\n      authenticator\n    });\n  }\n  getInputs() {\n    const inputs = [];\n    const inputsFromRemediation = this.remediation.value || [];\n    inputsFromRemediation.forEach(inputFromRemediation => {\n      let input;\n      let {\n        name,\n        type,\n        visible,\n        messages\n      } = inputFromRemediation;\n      if (visible === false) {\n        return;\n      }\n      if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n        input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n      } else if (type !== 'object') {\n        let alias;\n        const aliases = (this.map ? this.map[name] : null) || [];\n        if (aliases.length === 1) {\n          alias = aliases[0];\n        } else {\n          alias = aliases.find(name => Object.keys(this.values).includes(name));\n        }\n        if (alias) {\n          input = Object.assign(Object.assign({}, inputFromRemediation), {\n            name: alias\n          });\n        }\n      }\n      if (!input) {\n        input = inputFromRemediation;\n      }\n      if (Array.isArray(input)) {\n        input.forEach(i => inputs.push(i));\n      } else {\n        if (messages) {\n          input.messages = messages;\n        }\n        inputs.push(input);\n      }\n    });\n    return inputs;\n  }\n  static getMessages(remediation) {\n    var _a, _b;\n    if (!remediation.value) {\n      return;\n    }\n    return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce((messages, field) => {\n      if (field.messages) {\n        messages = [...messages, ...field.messages.value];\n      }\n      return messages;\n    }, []);\n  }\n  getValuesAfterProceed() {\n    const inputsFromRemediation = this.remediation.value || [];\n    const inputsFromRemediator = this.getInputs();\n    const inputs = [...inputsFromRemediation, ...inputsFromRemediator];\n    for (const input of inputs) {\n      delete this.values[input.name];\n    }\n    return this.values;\n  }\n  getAuthenticator() {\n    var _a, _b;\n    const relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n    if (!relatesTo) {\n      return;\n    }\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    if (!authenticatorFromRemediation) {\n      return relatesTo;\n    }\n    const id = authenticatorFromRemediation.form.value.find(({\n      name\n    }) => name === 'id').value;\n    const enrollmentId = (_b = authenticatorFromRemediation.form.value.find(({\n      name\n    }) => name === 'enrollmentId')) === null || _b === void 0 ? void 0 : _b.value;\n    return Object.assign(Object.assign({}, relatesTo), {\n      id,\n      enrollmentId\n    });\n  }\n}\nexport { Remediator };","map":{"version":3,"names":["getRequiredValues","getAllValues","titleCase","getAuthenticatorFromRemediation","formatAuthenticator","compareAuthenticators","Remediator","constructor","remediation","values","options","Object","assign","formatAuthenticators","authenticators","map","authenticator","hasAuthenticatorInList","some","existing","push","authenticatorsData","reduce","acc","keys","length","getName","name","canRemediate","required","needed","find","key","hasData","getData","allValues","res","data","val","value","entry","i","getNextStep","_authClient","_context","inputs","getInputs","getAuthenticator","type","inputsFromRemediation","forEach","inputFromRemediation","input","visible","messages","alias","aliases","includes","Array","isArray","getMessages","_a","_b","form","field","getValuesAfterProceed","inputsFromRemediator","relatesTo","authenticatorFromRemediation","id","enrollmentId"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/Base/Remediator.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\n\nclass Remediator {\n    constructor(remediation, values = {}, options = {}) {\n        this.values = Object.assign({}, values);\n        this.options = Object.assign({}, options);\n        this.formatAuthenticators();\n        this.remediation = remediation;\n    }\n    formatAuthenticators() {\n        this.values.authenticators = (this.values.authenticators || []);\n        this.values.authenticators = this.values.authenticators.map(authenticator => {\n            return formatAuthenticator(authenticator);\n        });\n        if (this.values.authenticator) {\n            const authenticator = formatAuthenticator(this.values.authenticator);\n            const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n                return compareAuthenticators(authenticator, existing);\n            });\n            if (!hasAuthenticatorInList) {\n                this.values.authenticators.push(authenticator);\n            }\n        }\n        this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n            if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n                acc.push(authenticator);\n            }\n            return acc;\n        }, this.values.authenticatorsData || []);\n    }\n    getName() {\n        return this.remediation.name;\n    }\n    canRemediate() {\n        const required = getRequiredValues(this.remediation);\n        const needed = required.find((key) => !this.hasData(key));\n        if (needed) {\n            return false;\n        }\n        return true;\n    }\n    getData(key) {\n        if (!key) {\n            let allValues = getAllValues(this.remediation);\n            let res = allValues.reduce((data, key) => {\n                data[key] = this.getData(key);\n                return data;\n            }, {});\n            return res;\n        }\n        if (typeof this[`map${titleCase(key)}`] === 'function') {\n            const val = this[`map${titleCase(key)}`](this.remediation.value.find(({ name }) => name === key));\n            if (val) {\n                return val;\n            }\n        }\n        if (this.map && this.map[key]) {\n            const entry = this.map[key];\n            for (let i = 0; i < entry.length; i++) {\n                let val = this.values[entry[i]];\n                if (val) {\n                    return val;\n                }\n            }\n        }\n        return this.values[key];\n    }\n    hasData(key\n    ) {\n        return !!this.getData(key);\n    }\n    getNextStep(_authClient, _context) {\n        const name = this.getName();\n        const inputs = this.getInputs();\n        const authenticator = this.getAuthenticator();\n        const type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n        return Object.assign(Object.assign({ name,\n            inputs }, (type && { type })), (authenticator && { authenticator }));\n    }\n    getInputs() {\n        const inputs = [];\n        const inputsFromRemediation = this.remediation.value || [];\n        inputsFromRemediation.forEach(inputFromRemediation => {\n            let input;\n            let { name, type, visible, messages } = inputFromRemediation;\n            if (visible === false) {\n                return;\n            }\n            if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n                input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n            }\n            else if (type !== 'object') {\n                let alias;\n                const aliases = (this.map ? this.map[name] : null) || [];\n                if (aliases.length === 1) {\n                    alias = aliases[0];\n                }\n                else {\n                    alias = aliases.find(name => Object.keys(this.values).includes(name));\n                }\n                if (alias) {\n                    input = Object.assign(Object.assign({}, inputFromRemediation), { name: alias });\n                }\n            }\n            if (!input) {\n                input = inputFromRemediation;\n            }\n            if (Array.isArray(input)) {\n                input.forEach(i => inputs.push(i));\n            }\n            else {\n                if (messages) {\n                    input.messages = messages;\n                }\n                inputs.push(input);\n            }\n        });\n        return inputs;\n    }\n    static getMessages(remediation) {\n        var _a, _b;\n        if (!remediation.value) {\n            return;\n        }\n        return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce((messages, field) => {\n            if (field.messages) {\n                messages = [...messages, ...field.messages.value];\n            }\n            return messages;\n        }, []);\n    }\n    getValuesAfterProceed() {\n        const inputsFromRemediation = this.remediation.value || [];\n        const inputsFromRemediator = this.getInputs();\n        const inputs = [\n            ...inputsFromRemediation,\n            ...inputsFromRemediator\n        ];\n        for (const input of inputs) {\n            delete this.values[input.name];\n        }\n        return this.values;\n    }\n    getAuthenticator() {\n        var _a, _b;\n        const relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n        if (!relatesTo) {\n            return;\n        }\n        const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n        if (!authenticatorFromRemediation) {\n            return relatesTo;\n        }\n        const id = authenticatorFromRemediation.form.value\n            .find(({ name }) => name === 'id').value;\n        const enrollmentId = (_b = authenticatorFromRemediation.form.value\n            .find(({ name }) => name === 'enrollmentId')) === null || _b === void 0 ? void 0 : _b.value;\n        return Object.assign(Object.assign({}, relatesTo), { id,\n            enrollmentId });\n    }\n}\n\nexport { Remediator };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}