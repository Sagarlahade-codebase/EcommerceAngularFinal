{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { get } from '../../http/request.js';\nimport { find } from '../../util/object.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nfunction getWellKnown(sdk, issuer) {\n  var authServerUri = issuer || sdk.options.issuer;\n  return get(sdk, authServerUri + '/.well-known/openid-configuration', {\n    cacheResponse: true\n  });\n}\nfunction getKey(sdk, issuer, kid) {\n  var httpCache = sdk.storageManager.getHttpCache(sdk.options.cookies);\n  return getWellKnown(sdk, issuer).then(function (wellKnown) {\n    var jwksUri = wellKnown['jwks_uri'];\n    var cacheContents = httpCache.getStorage();\n    var cachedResponse = cacheContents[jwksUri];\n    if (cachedResponse && Date.now() / 1000 < cachedResponse.expiresAt) {\n      var cachedKey = find(cachedResponse.response.keys, {\n        kid: kid\n      });\n      if (cachedKey) {\n        return cachedKey;\n      }\n    }\n    httpCache.clearStorage(jwksUri);\n    return get(sdk, jwksUri, {\n      cacheResponse: true\n    }).then(function (res) {\n      var key = find(res.keys, {\n        kid: kid\n      });\n      if (key) {\n        return key;\n      }\n      throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\\'s keys');\n    });\n  });\n}\nexport { getKey, getWellKnown };","map":{"version":3,"names":["get","find","AuthSdkError","getWellKnown","sdk","issuer","authServerUri","options","cacheResponse","getKey","kid","httpCache","storageManager","getHttpCache","cookies","then","wellKnown","jwksUri","cacheContents","getStorage","cachedResponse","Date","now","expiresAt","cachedKey","response","keys","clearStorage","res","key"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/endpoints/well-known.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { get } from '../../http/request.js';\nimport { find } from '../../util/object.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\n\nfunction getWellKnown(sdk, issuer) {\n    var authServerUri = (issuer || sdk.options.issuer);\n    return get(sdk, authServerUri + '/.well-known/openid-configuration', {\n        cacheResponse: true\n    });\n}\nfunction getKey(sdk, issuer, kid) {\n    var httpCache = sdk.storageManager.getHttpCache(sdk.options.cookies);\n    return getWellKnown(sdk, issuer)\n        .then(function (wellKnown) {\n        var jwksUri = wellKnown['jwks_uri'];\n        var cacheContents = httpCache.getStorage();\n        var cachedResponse = cacheContents[jwksUri];\n        if (cachedResponse && Date.now() / 1000 < cachedResponse.expiresAt) {\n            var cachedKey = find(cachedResponse.response.keys, {\n                kid: kid\n            });\n            if (cachedKey) {\n                return cachedKey;\n            }\n        }\n        httpCache.clearStorage(jwksUri);\n        return get(sdk, jwksUri, {\n            cacheResponse: true\n        })\n            .then(function (res) {\n            var key = find(res.keys, {\n                kid: kid\n            });\n            if (key) {\n                return key;\n            }\n            throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\\'s keys');\n        });\n    });\n}\n\nexport { getKey, getWellKnown };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,GAAG,QAAQ,uBAAuB;AAC3C,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,OAAOC,YAAY,MAAM,8BAA8B;AAEvD,SAASC,YAAYA,CAACC,GAAG,EAAEC,MAAM,EAAE;EAC/B,IAAIC,aAAa,GAAID,MAAM,IAAID,GAAG,CAACG,OAAO,CAACF,MAAO;EAClD,OAAOL,GAAG,CAACI,GAAG,EAAEE,aAAa,GAAG,mCAAmC,EAAE;IACjEE,aAAa,EAAE;EACnB,CAAC,CAAC;AACN;AACA,SAASC,MAAMA,CAACL,GAAG,EAAEC,MAAM,EAAEK,GAAG,EAAE;EAC9B,IAAIC,SAAS,GAAGP,GAAG,CAACQ,cAAc,CAACC,YAAY,CAACT,GAAG,CAACG,OAAO,CAACO,OAAO,CAAC;EACpE,OAAOX,YAAY,CAACC,GAAG,EAAEC,MAAM,CAAC,CAC3BU,IAAI,CAAC,UAAUC,SAAS,EAAE;IAC3B,IAAIC,OAAO,GAAGD,SAAS,CAAC,UAAU,CAAC;IACnC,IAAIE,aAAa,GAAGP,SAAS,CAACQ,UAAU,CAAC,CAAC;IAC1C,IAAIC,cAAc,GAAGF,aAAa,CAACD,OAAO,CAAC;IAC3C,IAAIG,cAAc,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAGF,cAAc,CAACG,SAAS,EAAE;MAChE,IAAIC,SAAS,GAAGvB,IAAI,CAACmB,cAAc,CAACK,QAAQ,CAACC,IAAI,EAAE;QAC/ChB,GAAG,EAAEA;MACT,CAAC,CAAC;MACF,IAAIc,SAAS,EAAE;QACX,OAAOA,SAAS;MACpB;IACJ;IACAb,SAAS,CAACgB,YAAY,CAACV,OAAO,CAAC;IAC/B,OAAOjB,GAAG,CAACI,GAAG,EAAEa,OAAO,EAAE;MACrBT,aAAa,EAAE;IACnB,CAAC,CAAC,CACGO,IAAI,CAAC,UAAUa,GAAG,EAAE;MACrB,IAAIC,GAAG,GAAG5B,IAAI,CAAC2B,GAAG,CAACF,IAAI,EAAE;QACrBhB,GAAG,EAAEA;MACT,CAAC,CAAC;MACF,IAAImB,GAAG,EAAE;QACL,OAAOA,GAAG;MACd;MACA,MAAM,IAAI3B,YAAY,CAAC,cAAc,GAAGQ,GAAG,GAAG,uCAAuC,CAAC;IAC1F,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEA,SAASD,MAAM,EAAEN,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}