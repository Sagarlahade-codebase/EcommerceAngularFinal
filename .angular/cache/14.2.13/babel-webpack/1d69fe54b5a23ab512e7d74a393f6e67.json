{"ast":null,"code":"import clipboard from 'clipboard';\nimport oktaJQueryStatic from './jquery-wrapper.js';\nimport oktaUnderscore from './underscore-wrapper.js';\nimport FrameworkView from '../framework/View.js';\nimport Class from './Class.js';\nconst Clipboard = clipboard;\nconst OPTIONS = ['success', 'error', 'target', 'text'];\nconst ClipboardClipboardWrapper = Class.extend({\n  initialize: function (el, options) {\n    /* eslint complexity:0, max-statements: [2, 24] */\n    options = oktaUnderscore.pick(options || {}, OPTIONS);\n    let trigger;\n    let target;\n    let text;\n    if (oktaUnderscore.isString(el)) {\n      trigger = el;\n    }\n    if (oktaUnderscore.isElement(el)) {\n      trigger = el;\n    }\n    if (el instanceof oktaJQueryStatic) {\n      trigger = el.selector; // TODO: use stronger type\n    }\n    if (el instanceof FrameworkView) {\n      trigger = el.el;\n    }\n    if (oktaUnderscore.isFunction(options.target)) {\n      target = options.target;\n    }\n    if (oktaUnderscore.isElement(options.target)) {\n      target = oktaUnderscore.constant(options.target);\n    }\n    if (oktaUnderscore.isString(options.text)) {\n      text = oktaUnderscore.constant(options.text);\n    } else if (oktaUnderscore.isFunction(options.text)) {\n      text = options.text;\n    }\n    this.__instance = new Clipboard(trigger, {\n      target: target,\n      text: text\n    });\n    this.done = oktaUnderscore.partial(this.__setCallback, 'success');\n    this.error = oktaUnderscore.partial(this.__setCallback, 'error');\n    this.done(options.success);\n    this.error(options.error);\n  },\n  __setCallback: function (event, callback) {\n    if (!oktaUnderscore.isFunction(callback)) {\n      return;\n    }\n    this.__instance.on(event, callback);\n    return this.__instance;\n  }\n});\n/**\n * @class Clipboard\n * @abstract\n *\n * Abstract class that initializes a Clipboard\n *   https://clipboardjs.com/\n *\n * ### Example:\n *\n *  ```javascript\n *  //attach a selector\n *  Clipboard.attach('.copy-button');\n *\n *  //attach a node, and set a constant string\n *  Clipboard.attach(buttonView.el, {\n *    text: 'this is the content'\n *  });\n *\n *  //attach a view, set text dynamically, and set callback\n *  Clipboard.attach(buttonView, {\n *    text: function (triggerNode) {\n *      return $(triggerNode).attr('foo') + model.get('userName');\n *    }\n *  }).done(function (targetNode) {\n *    var msg = ['\"', targetNode.text, '\" is copied'].join('');\n *    view.notify('success', msg);\n *  });\n *\n *  //attach a jquery object, set the target node, and set callback\n *  Clipboard.attach($('.customizeTarget'), {\n *    target: function (triggerNode) {\n *      return triggerNode;\n *    },\n *    success: function (targetNode) {\n *      view.notify('success', 'copied!');\n *    }\n *  });\n *\n * ```\n */\n\nvar Clipboard$1 = {\n  /**\n   * @param {String|Node|View|jQuery} [el] el could be a selector (recommended),\n   *           a dom node, a view or a jquery object\n   * @param {Object} [options] Options hash\n   * @param  {Node|Function} [options.target] a static dom node\n   *           or a function that takes trigger node and returns a target node\n   * @param {String|Function} [options.text] a static string or a function that returns a string dynamically\n   * @param {Function} [options.success] success callback\n   * @param {Function} [options.error] error callback\n   * @return {Object} The clipboard object\n   */\n  attach: function (el, options) {\n    return new ClipboardClipboardWrapper(el, options);\n  }\n};\nexport { Clipboard$1 as default };","map":{"version":3,"names":["clipboard","oktaJQueryStatic","oktaUnderscore","FrameworkView","Class","Clipboard","OPTIONS","ClipboardClipboardWrapper","extend","initialize","el","options","pick","trigger","target","text","isString","isElement","selector","isFunction","constant","__instance","done","partial","__setCallback","error","success","event","callback","on","Clipboard$1","attach","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/packages/@okta/courage-dist/esm/src/courage/util/Clipboard.js"],"sourcesContent":["import clipboard from 'clipboard';\nimport oktaJQueryStatic from './jquery-wrapper.js';\nimport oktaUnderscore from './underscore-wrapper.js';\nimport FrameworkView from '../framework/View.js';\nimport Class from './Class.js';\n\nconst Clipboard = clipboard;\nconst OPTIONS = ['success', 'error', 'target', 'text'];\nconst ClipboardClipboardWrapper = Class.extend({\n  initialize: function (el, options) {\n    /* eslint complexity:0, max-statements: [2, 24] */\n    options = oktaUnderscore.pick(options || {}, OPTIONS);\n    let trigger;\n    let target;\n    let text;\n\n    if (oktaUnderscore.isString(el)) {\n      trigger = el;\n    }\n\n    if (oktaUnderscore.isElement(el)) {\n      trigger = el;\n    }\n\n    if (el instanceof oktaJQueryStatic) {\n      trigger = el.selector; // TODO: use stronger type\n    }\n\n    if (el instanceof FrameworkView) {\n      trigger = el.el;\n    }\n\n    if (oktaUnderscore.isFunction(options.target)) {\n      target = options.target;\n    }\n\n    if (oktaUnderscore.isElement(options.target)) {\n      target = oktaUnderscore.constant(options.target);\n    }\n\n    if (oktaUnderscore.isString(options.text)) {\n      text = oktaUnderscore.constant(options.text);\n    } else if (oktaUnderscore.isFunction(options.text)) {\n      text = options.text;\n    }\n\n    this.__instance = new Clipboard(trigger, {\n      target: target,\n      text: text\n    });\n    this.done = oktaUnderscore.partial(this.__setCallback, 'success');\n    this.error = oktaUnderscore.partial(this.__setCallback, 'error');\n    this.done(options.success);\n    this.error(options.error);\n  },\n  __setCallback: function (event, callback) {\n    if (!oktaUnderscore.isFunction(callback)) {\n      return;\n    }\n\n    this.__instance.on(event, callback);\n\n    return this.__instance;\n  }\n});\n/**\n * @class Clipboard\n * @abstract\n *\n * Abstract class that initializes a Clipboard\n *   https://clipboardjs.com/\n *\n * ### Example:\n *\n *  ```javascript\n *  //attach a selector\n *  Clipboard.attach('.copy-button');\n *\n *  //attach a node, and set a constant string\n *  Clipboard.attach(buttonView.el, {\n *    text: 'this is the content'\n *  });\n *\n *  //attach a view, set text dynamically, and set callback\n *  Clipboard.attach(buttonView, {\n *    text: function (triggerNode) {\n *      return $(triggerNode).attr('foo') + model.get('userName');\n *    }\n *  }).done(function (targetNode) {\n *    var msg = ['\"', targetNode.text, '\" is copied'].join('');\n *    view.notify('success', msg);\n *  });\n *\n *  //attach a jquery object, set the target node, and set callback\n *  Clipboard.attach($('.customizeTarget'), {\n *    target: function (triggerNode) {\n *      return triggerNode;\n *    },\n *    success: function (targetNode) {\n *      view.notify('success', 'copied!');\n *    }\n *  });\n *\n * ```\n */\n\nvar Clipboard$1 = {\n  /**\n   * @param {String|Node|View|jQuery} [el] el could be a selector (recommended),\n   *           a dom node, a view or a jquery object\n   * @param {Object} [options] Options hash\n   * @param  {Node|Function} [options.target] a static dom node\n   *           or a function that takes trigger node and returns a target node\n   * @param {String|Function} [options.text] a static string or a function that returns a string dynamically\n   * @param {Function} [options.success] success callback\n   * @param {Function} [options.error] error callback\n   * @return {Object} The clipboard object\n   */\n  attach: function (el, options) {\n    return new ClipboardClipboardWrapper(el, options);\n  }\n};\n\nexport { Clipboard$1 as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}