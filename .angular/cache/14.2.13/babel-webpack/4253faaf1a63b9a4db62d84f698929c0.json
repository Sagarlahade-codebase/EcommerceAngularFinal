{"ast":null,"code":"import { loc, createButton, Collection } from '../../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport AuthenticatorEnrollOptions from '../components/AuthenticatorEnrollOptions.js';\nimport AuthenticatorVerifyOptions from '../components/AuthenticatorVerifyOptions.js';\nimport { getAuthenticatorDataForEnroll, getAuthenticatorDataForVerification } from '../utils/AuthenticatorUtil.js';\nimport { FORMS, AUTHENTICATOR_KEY } from '../../ion/RemediationConstants.js';\nimport IDP from '../../../util/IDP.js';\nimport AdminScopeList from '../../../v1/views/admin-consent/ScopeList.js';\nimport EnduserScopeList from '../../../v1/views/consent/ScopeList.js';\nimport CaptchaView from '../views/captcha/CaptchaView.js';\nconst isTextOverflowing = (text, maxWidth) => {\n  // Create a temporary element and attach it to the document so we can compare the client width to the \n  // max width allowed.\n  const elem = document.createElement('div');\n  elem.style.position = 'absolute';\n  elem.style.left = '-9999px';\n  elem.style.whiteSpace = 'nowrap';\n  elem.innerHTML = text;\n  document.body.appendChild(elem);\n  const result = elem.clientWidth;\n  document.body.removeChild(elem);\n  return result > maxWidth;\n};\nconst createAuthenticatorEnrollSelectView = opt => {\n  const optionItems = (opt.options || []).map(opt => {\n    return Object.assign({}, opt, getAuthenticatorDataForEnroll(opt));\n  });\n  return {\n    View: AuthenticatorEnrollOptions,\n    options: {\n      name: opt.name,\n      collection: new Collection(optionItems)\n    }\n  };\n};\nconst createAuthenticatorVerifySelectView = opt => {\n  let optionItems = opt.options || []; // If webauthn enrollments > 1 just show one entry with a generic namne (first) so user doesnt have to select which\n  // one to pick. eg) If there is yubikey5 and another unknown u2f key, user cannot identify that easily. We need to\n  // do this at least  until users can give authenticator enrollments custom names.\n\n  const authSet = new Set();\n  optionItems = optionItems.filter(opt => {\n    let isDuplicate;\n    if (opt.authenticatorKey === AUTHENTICATOR_KEY.WEBAUTHN) {\n      isDuplicate = authSet.has(opt.authenticatorKey);\n      authSet.add(opt.authenticatorKey);\n    } else if (opt.authenticatorKey === AUTHENTICATOR_KEY.CUSTOM_APP) {\n      var _opt$value, _opt$value2;\n\n      // Filter the duplicate enrollment by id for custom app. \n      isDuplicate = authSet.has(opt === null || opt === void 0 ? void 0 : (_opt$value = opt.value) === null || _opt$value === void 0 ? void 0 : _opt$value.id);\n      authSet.add(opt === null || opt === void 0 ? void 0 : (_opt$value2 = opt.value) === null || _opt$value2 === void 0 ? void 0 : _opt$value2.id);\n    }\n    return !isDuplicate;\n  });\n  optionItems = optionItems.map(opt => {\n    return Object.assign({}, opt, getAuthenticatorDataForVerification(opt));\n  });\n  return {\n    View: AuthenticatorVerifyOptions,\n    options: {\n      name: opt.name,\n      collection: new Collection(optionItems)\n    }\n  };\n};\nconst createAdminScopesView = () => {\n  return {\n    View: AdminScopeList\n  };\n};\nconst createEnduserScopesView = () => {\n  return {\n    View: EnduserScopeList\n  };\n};\nconst createCaptchaView = opt => {\n  return {\n    View: CaptchaView,\n    options: {\n      name: opt.name\n    }\n  };\n};\nconst inputCreationStrategy = {\n  authenticatorEnrollSelect: createAuthenticatorEnrollSelectView,\n  authenticatorVerifySelect: createAuthenticatorVerifySelectView,\n  ['admin-consent']: createAdminScopesView,\n  ['consent']: createEnduserScopesView,\n  ['captcha']: createCaptchaView\n}; // TODO: move logic to uiSchemaTransformer\n\nconst create = function (uiSchemaObj) {\n  const strategyFn = inputCreationStrategy[uiSchemaObj.type] || oktaUnderscore.identity;\n  return strategyFn(uiSchemaObj);\n};\nconst createPIVButton = (settings, appState) => {\n  const pivIdp = appState.get('remediations').filter(idp => idp.name === FORMS.PIV_IDP);\n  if (pivIdp.length < 1) {\n    return [];\n  }\n  const pivConfig = settings.get('piv');\n  const className = pivConfig.className || '';\n  return [{\n    attributes: {\n      'data-se': 'piv-card-button'\n    },\n    className: className + ' piv-button',\n    title: pivConfig.text || loc('piv.cac.card', 'login'),\n    click: e => {\n      e.preventDefault();\n      appState.trigger('switchForm', FORMS.PIV_IDP);\n    }\n  }];\n};\n/**\n * Example of `redirect-idp` remediation.\n * {\n *   \"name\": \"redirect-idp\",\n *   \"type\": \"MICROSOFT\",\n *   \"idp\": {\n *      \"id\": \"0oa2szc1K1YPgz1pe0g4\",\n *      \"name\": \"Microsoft IDP\"\n *    },\n *   \"href\": \"http://localhost:3000/sso/idps/0oa2szc1K1YPgz1pe0g4?stateToken=BB...AA\",\n *   \"method\": \"GET\"\n * }\n *\n */\n\nconst createIdpButtons = ({\n  settings: settings,\n  appState: appState\n}) => {\n  // This is the max allowable text width that we can display for IDP buttons.\n  // Generated by taking the 316px width of button minus padding-left (90 px) and padding-right (50px)\n  const MAX_IDP_BUTTON_WIDTH = 186;\n  const redirectIdpRemediations = appState.get('remediations').filter(idp => idp.name === FORMS.REDIRECT_IDP);\n  if (!Array.isArray(redirectIdpRemediations)) {\n    return [];\n  } // create piv button\n\n  const pivButton = createPIVButton(settings, appState); //add buttons from idp object\n\n  const idpButtons = redirectIdpRemediations.map(idpObject => {\n    var _idpObject$type;\n    let type = (_idpObject$type = idpObject.type) === null || _idpObject$type === void 0 ? void 0 : _idpObject$type.toLowerCase();\n    let displayName;\n    if (!oktaUnderscore.contains(IDP.SUPPORTED_SOCIAL_IDPS, type)) {\n      var _idpObject$idp;\n      type = 'general-idp'; // OKTA-396684 - makes sure that custom idps always have a name\n\n      displayName = loc('customauth.sign.in.with.label', 'login', [(_idpObject$idp = idpObject.idp) === null || _idpObject$idp === void 0 ? void 0 : _idpObject$idp.name]);\n    } else {\n      displayName = loc(`socialauth.${type}.label`, 'login');\n    }\n    const classNames = ['social-auth-button', `social-auth-${type}-button`];\n    if (type === 'general-idp') {\n      classNames.push('no-translate');\n    }\n    if (idpObject.idp.className) {\n      classNames.push(idpObject.idp.className);\n    }\n    const button = {\n      attributes: {\n        'data-se': `social-auth-${type}-button`\n      },\n      className: classNames.join(' '),\n      title: displayName,\n      href: idpObject.href\n    };\n    if (isTextOverflowing(displayName, MAX_IDP_BUTTON_WIDTH)) {\n      // We add a tooltip in case the name gets truncated if too long\n      button.attributes.title = displayName;\n    }\n    return button;\n  });\n  return [...pivButton, ...idpButtons];\n};\nconst createCustomButtons = settings => {\n  const customButtons = settings.get('customButtons');\n  return customButtons.map(customButton => {\n    const button = {\n      attributes: {\n        'data-se': customButton.dataAttr\n      },\n      className: customButton.className + ' default-custom-button',\n      title: customButton.title || loc(customButton.i18nKey, 'login'),\n      click: customButton.click\n    };\n    return button;\n  });\n};\nconst addCustomButton = customButtonSettings => {\n  return createButton({\n    ...customButtonSettings,\n    className: `${customButtonSettings.className} default-custom-button button-primary`\n  });\n};\nexport { addCustomButton, create, createCustomButtons, createIdpButtons, isTextOverflowing };","map":{"version":3,"names":["loc","createButton","Collection","oktaUnderscore","AuthenticatorEnrollOptions","AuthenticatorVerifyOptions","getAuthenticatorDataForEnroll","getAuthenticatorDataForVerification","FORMS","AUTHENTICATOR_KEY","IDP","AdminScopeList","EnduserScopeList","CaptchaView","isTextOverflowing","text","maxWidth","elem","document","createElement","style","position","left","whiteSpace","innerHTML","body","appendChild","result","clientWidth","removeChild","createAuthenticatorEnrollSelectView","opt","optionItems","options","map","Object","assign","View","name","collection","createAuthenticatorVerifySelectView","authSet","Set","filter","isDuplicate","authenticatorKey","WEBAUTHN","has","add","CUSTOM_APP","_opt$value","_opt$value2","value","id","createAdminScopesView","createEnduserScopesView","createCaptchaView","inputCreationStrategy","authenticatorEnrollSelect","authenticatorVerifySelect","create","uiSchemaObj","strategyFn","type","identity","createPIVButton","settings","appState","pivIdp","get","idp","PIV_IDP","length","pivConfig","className","attributes","title","click","e","preventDefault","trigger","createIdpButtons","MAX_IDP_BUTTON_WIDTH","redirectIdpRemediations","REDIRECT_IDP","Array","isArray","pivButton","idpButtons","idpObject","_idpObject$type","toLowerCase","displayName","contains","SUPPORTED_SOCIAL_IDPS","_idpObject$idp","classNames","push","button","join","href","createCustomButtons","customButtons","customButton","dataAttr","i18nKey","addCustomButton","customButtonSettings"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/view-builder/internals/FormInputFactory.js"],"sourcesContent":["import { loc, createButton, Collection } from '../../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport AuthenticatorEnrollOptions from '../components/AuthenticatorEnrollOptions.js';\nimport AuthenticatorVerifyOptions from '../components/AuthenticatorVerifyOptions.js';\nimport { getAuthenticatorDataForEnroll, getAuthenticatorDataForVerification } from '../utils/AuthenticatorUtil.js';\nimport { FORMS, AUTHENTICATOR_KEY } from '../../ion/RemediationConstants.js';\nimport IDP from '../../../util/IDP.js';\nimport AdminScopeList from '../../../v1/views/admin-consent/ScopeList.js';\nimport EnduserScopeList from '../../../v1/views/consent/ScopeList.js';\nimport CaptchaView from '../views/captcha/CaptchaView.js';\n\nconst isTextOverflowing = (text, maxWidth) => {\n  // Create a temporary element and attach it to the document so we can compare the client width to the \n  // max width allowed.\n  const elem = document.createElement('div');\n  elem.style.position = 'absolute';\n  elem.style.left = '-9999px';\n  elem.style.whiteSpace = 'nowrap';\n  elem.innerHTML = text;\n  document.body.appendChild(elem);\n  const result = elem.clientWidth;\n  document.body.removeChild(elem);\n  return result > maxWidth;\n};\n\nconst createAuthenticatorEnrollSelectView = opt => {\n  const optionItems = (opt.options || []).map(opt => {\n    return Object.assign({}, opt, getAuthenticatorDataForEnroll(opt));\n  });\n  return {\n    View: AuthenticatorEnrollOptions,\n    options: {\n      name: opt.name,\n      collection: new Collection(optionItems)\n    }\n  };\n};\n\nconst createAuthenticatorVerifySelectView = opt => {\n  let optionItems = opt.options || []; // If webauthn enrollments > 1 just show one entry with a generic namne (first) so user doesnt have to select which\n  // one to pick. eg) If there is yubikey5 and another unknown u2f key, user cannot identify that easily. We need to\n  // do this at least  until users can give authenticator enrollments custom names.\n\n  const authSet = new Set();\n  optionItems = optionItems.filter(opt => {\n    let isDuplicate;\n\n    if (opt.authenticatorKey === AUTHENTICATOR_KEY.WEBAUTHN) {\n      isDuplicate = authSet.has(opt.authenticatorKey);\n      authSet.add(opt.authenticatorKey);\n    } else if (opt.authenticatorKey === AUTHENTICATOR_KEY.CUSTOM_APP) {\n      var _opt$value, _opt$value2;\n\n      // Filter the duplicate enrollment by id for custom app. \n      isDuplicate = authSet.has(opt === null || opt === void 0 ? void 0 : (_opt$value = opt.value) === null || _opt$value === void 0 ? void 0 : _opt$value.id);\n      authSet.add(opt === null || opt === void 0 ? void 0 : (_opt$value2 = opt.value) === null || _opt$value2 === void 0 ? void 0 : _opt$value2.id);\n    }\n\n    return !isDuplicate;\n  });\n  optionItems = optionItems.map(opt => {\n    return Object.assign({}, opt, getAuthenticatorDataForVerification(opt));\n  });\n  return {\n    View: AuthenticatorVerifyOptions,\n    options: {\n      name: opt.name,\n      collection: new Collection(optionItems)\n    }\n  };\n};\n\nconst createAdminScopesView = () => {\n  return {\n    View: AdminScopeList\n  };\n};\n\nconst createEnduserScopesView = () => {\n  return {\n    View: EnduserScopeList\n  };\n};\n\nconst createCaptchaView = opt => {\n  return {\n    View: CaptchaView,\n    options: {\n      name: opt.name\n    }\n  };\n};\n\nconst inputCreationStrategy = {\n  authenticatorEnrollSelect: createAuthenticatorEnrollSelectView,\n  authenticatorVerifySelect: createAuthenticatorVerifySelectView,\n  ['admin-consent']: createAdminScopesView,\n  ['consent']: createEnduserScopesView,\n  ['captcha']: createCaptchaView\n}; // TODO: move logic to uiSchemaTransformer\n\nconst create = function (uiSchemaObj) {\n  const strategyFn = inputCreationStrategy[uiSchemaObj.type] || oktaUnderscore.identity;\n  return strategyFn(uiSchemaObj);\n};\n\nconst createPIVButton = (settings, appState) => {\n  const pivIdp = appState.get('remediations').filter(idp => idp.name === FORMS.PIV_IDP);\n\n  if (pivIdp.length < 1) {\n    return [];\n  }\n\n  const pivConfig = settings.get('piv');\n  const className = pivConfig.className || '';\n  return [{\n    attributes: {\n      'data-se': 'piv-card-button'\n    },\n    className: className + ' piv-button',\n    title: pivConfig.text || loc('piv.cac.card', 'login'),\n    click: e => {\n      e.preventDefault();\n      appState.trigger('switchForm', FORMS.PIV_IDP);\n    }\n  }];\n};\n/**\n * Example of `redirect-idp` remediation.\n * {\n *   \"name\": \"redirect-idp\",\n *   \"type\": \"MICROSOFT\",\n *   \"idp\": {\n *      \"id\": \"0oa2szc1K1YPgz1pe0g4\",\n *      \"name\": \"Microsoft IDP\"\n *    },\n *   \"href\": \"http://localhost:3000/sso/idps/0oa2szc1K1YPgz1pe0g4?stateToken=BB...AA\",\n *   \"method\": \"GET\"\n * }\n *\n */\n\n\nconst createIdpButtons = ({\n  settings: settings,\n  appState: appState\n}) => {\n  // This is the max allowable text width that we can display for IDP buttons.\n  // Generated by taking the 316px width of button minus padding-left (90 px) and padding-right (50px)\n  const MAX_IDP_BUTTON_WIDTH = 186;\n  const redirectIdpRemediations = appState.get('remediations').filter(idp => idp.name === FORMS.REDIRECT_IDP);\n\n  if (!Array.isArray(redirectIdpRemediations)) {\n    return [];\n  } // create piv button\n\n\n  const pivButton = createPIVButton(settings, appState); //add buttons from idp object\n\n  const idpButtons = redirectIdpRemediations.map(idpObject => {\n    var _idpObject$type;\n\n    let type = (_idpObject$type = idpObject.type) === null || _idpObject$type === void 0 ? void 0 : _idpObject$type.toLowerCase();\n    let displayName;\n\n    if (!oktaUnderscore.contains(IDP.SUPPORTED_SOCIAL_IDPS, type)) {\n      var _idpObject$idp;\n\n      type = 'general-idp'; // OKTA-396684 - makes sure that custom idps always have a name\n\n      displayName = loc('customauth.sign.in.with.label', 'login', [(_idpObject$idp = idpObject.idp) === null || _idpObject$idp === void 0 ? void 0 : _idpObject$idp.name]);\n    } else {\n      displayName = loc(`socialauth.${type}.label`, 'login');\n    }\n\n    const classNames = ['social-auth-button', `social-auth-${type}-button`];\n\n    if (type === 'general-idp') {\n      classNames.push('no-translate');\n    }\n\n    if (idpObject.idp.className) {\n      classNames.push(idpObject.idp.className);\n    }\n\n    const button = {\n      attributes: {\n        'data-se': `social-auth-${type}-button`\n      },\n      className: classNames.join(' '),\n      title: displayName,\n      href: idpObject.href\n    };\n\n    if (isTextOverflowing(displayName, MAX_IDP_BUTTON_WIDTH)) {\n      // We add a tooltip in case the name gets truncated if too long\n      button.attributes.title = displayName;\n    }\n\n    return button;\n  });\n  return [...pivButton, ...idpButtons];\n};\n\nconst createCustomButtons = settings => {\n  const customButtons = settings.get('customButtons');\n  return customButtons.map(customButton => {\n    const button = {\n      attributes: {\n        'data-se': customButton.dataAttr\n      },\n      className: customButton.className + ' default-custom-button',\n      title: customButton.title || loc(customButton.i18nKey, 'login'),\n      click: customButton.click\n    };\n    return button;\n  });\n};\n\nconst addCustomButton = customButtonSettings => {\n  return createButton({ ...customButtonSettings,\n    className: `${customButtonSettings.className} default-custom-button button-primary`\n  });\n};\n\nexport { addCustomButton, create, createCustomButtons, createIdpButtons, isTextOverflowing };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}