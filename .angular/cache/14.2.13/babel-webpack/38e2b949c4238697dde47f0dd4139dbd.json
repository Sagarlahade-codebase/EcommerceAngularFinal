{"ast":null,"code":"import { loc, Collection } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport Q from 'q';\nimport { AuthStopPollInitiationError } from '../../util/Errors.js';\nimport fn from '../../util/FactorUtil.js';\nimport Util from '../../util/Util.js';\nimport BaseLoginModel from './BaseLoginModel.js';\n\n/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst PUSH_INTERVAL = 4000; // Avoid setting interval to same value as keep-alive time (5 seconds) because it\n// caused an occasional issue with network connection lost errors in Safari and IE\n\nconst FactorFactor = BaseLoginModel.extend({\n  extraProperties: true,\n  flat: false,\n  props: {\n    id: 'string',\n    factorType: {\n      type: 'string',\n      values: ['sms', 'call', 'email', 'token', 'token:software:totp', 'token:hotp', 'token:hardware', 'question', 'push', 'u2f', 'password', 'assertion:saml2', 'assertion:oidc', 'claims_provider', 'webauthn']\n    },\n    provider: {\n      type: 'string',\n      values: ['OKTA', 'RSA', 'DEL_OATH', 'SYMANTEC', 'GOOGLE', 'YUBICO', 'FIDO', 'CUSTOM', 'GENERIC_SAML', 'GENERIC_OIDC']\n    },\n    enrollment: {\n      type: 'string',\n      values: ['OPTIONAL', 'REQUIRED']\n    },\n    status: {\n      type: 'string',\n      values: ['NOT_SETUP', 'ACTIVE']\n    },\n    profile: ['object'],\n    vendorName: 'string',\n    policy: ['object'],\n    profiles: ['object']\n  },\n  local: {\n    answer: 'string',\n    password: 'string',\n    backupFactor: 'object',\n    showAnswer: 'boolean',\n    rememberDevice: 'boolean',\n    autoPush: ['boolean', true, false]\n  },\n  derived: {\n    isOktaFactor: {\n      deps: ['provider'],\n      fn: function (provider) {\n        return provider === 'OKTA';\n      }\n    },\n    factorName: {\n      deps: ['provider', 'factorType'],\n      fn: fn.getFactorName\n    },\n    factorLabel: {\n      deps: ['provider', 'factorType', 'vendorName'],\n      fn: function (provider, factorType, vendorName) {\n        if (oktaUnderscore.contains(['DEL_OATH', 'GENERIC_SAML', 'GENERIC_OIDC', 'CUSTOM'], provider)) {\n          return vendorName;\n        }\n        return fn.getFactorLabel.apply(this, [provider, factorType]);\n      }\n    },\n    factorDescription: {\n      deps: ['provider', 'factorType'],\n      fn: fn.getFactorDescription\n    },\n    sortOrder: {\n      deps: ['provider', 'factorType'],\n      fn: fn.getFactorSortOrder\n    },\n    iconClassName: {\n      deps: ['provider', 'factorType'],\n      fn: fn.getFactorIconClassName\n    },\n    securityQuestion: {\n      deps: ['profile', 'factorType'],\n      fn: function (profile, factorType) {\n        if (factorType !== 'question') {\n          return null;\n        }\n        return profile && fn.getSecurityQuestionLabel(profile);\n      }\n    },\n    phoneNumber: {\n      deps: ['profile', 'factorType'],\n      fn: function (profile, factorType) {\n        if (oktaUnderscore.contains(['sms', 'call'], factorType)) {\n          return profile && profile.phoneNumber;\n        }\n        return null;\n      }\n    },\n    email: {\n      deps: ['profile', 'factorType'],\n      fn: function (profile, factorType) {\n        if (factorType === 'email') {\n          return profile && profile.email;\n        }\n        return null;\n      }\n    },\n    deviceName: {\n      deps: ['profile', 'factorType'],\n      fn: function (profile, factorType) {\n        if (factorType !== 'push') {\n          return null;\n        }\n        return profile && profile.name;\n      }\n    },\n    enrolled: {\n      deps: ['status'],\n      fn: function (status) {\n        return status === 'ACTIVE';\n      }\n    },\n    cardinality: {\n      deps: ['policy', 'profiles'],\n      fn: function (policy, profiles) {\n        if (profiles && profiles.length > 0) {\n          const profile = profiles[0]; //assume for now we only get one profile (multiple profiles are not supported yet)\n\n          const enrolled = profile._embedded.enrolledFactors.length;\n          const adoption = oktaUnderscore.findWhere(profile._embedded.features, {\n            type: 'adoption'\n          });\n          if (adoption && adoption.cardinality) {\n            return {\n              enrolled: enrolled,\n              minimum: adoption.cardinality.min,\n              maximum: adoption.cardinality.max\n            };\n          }\n          return false;\n        } else if (policy && policy.enrollment) {\n          return policy.enrollment;\n        } else {\n          return false;\n        }\n      }\n    },\n    additionalEnrollment: {\n      deps: ['cardinality'],\n      fn: function (cardinality) {\n        if (cardinality) {\n          return cardinality.enrolled !== 0 && cardinality.enrolled < cardinality.maximum;\n        } else {\n          return false;\n        }\n      }\n    },\n    required: {\n      deps: ['enrollment'],\n      fn: function (enrollment) {\n        return enrollment === 'REQUIRED';\n      }\n    },\n    canUseResend: {\n      deps: ['provider', 'factorType'],\n      fn: function (provider, factorType) {\n        // Only push, sms and call have resend links.\n        return provider === 'OKTA' && oktaUnderscore.contains(['push', 'sms', 'call', 'email'], factorType);\n      }\n    },\n    isAnswerRequired: {\n      deps: ['factorType'],\n      fn: function (factorType) {\n        return oktaUnderscore.contains(['sms', 'call', 'email', 'token', 'token:software:totp', 'question'], factorType);\n      }\n    },\n    isFactorTypeVerification: {\n      deps: ['provider', 'id'],\n      fn: function (provider, id) {\n        return provider === undefined && id === undefined;\n      }\n    }\n  },\n  parse: function (attributes) {\n    this.settings = attributes.settings;\n    this.appState = attributes.appState; // set the initial value for remember device.\n\n    attributes.rememberDevice = fn.getRememberDeviceValue(this.appState); // Add vendorname for custom totp enroll\n\n    this.setCustomHotpVendorName(attributes);\n    return oktaUnderscore.omit(attributes, ['settings', 'appState']);\n  },\n  validate: function () {\n    if (this.get('isAnswerRequired') && !this.get('answer')) {\n      return {\n        answer: loc('model.validation.field.blank')\n      };\n    } else if (this.get('factorType') === 'password' && !this.get('password')) {\n      return {\n        password: loc('error.password.required')\n      };\n    }\n  },\n  needsPasscode: function () {\n    // we don't need passcode for email with magic link flow\n    return !(this.options.appState.get('isIdxStateToken') && this.get('factorType') === 'email');\n  },\n  resend: function () {\n    this.trigger('form:clear-errors');\n    return this.manageTransaction(function (transaction) {\n      const firstLink = transaction.data._links.resend[0];\n      return transaction.resend(firstLink.name);\n    });\n  },\n  save: function () {\n    const rememberDevice = !!this.get('rememberDevice');\n    const self = this; // Set/Remove the remember device cookie based on the remember device input.\n\n    return this.manageTransaction(function (transaction, setTransaction) {\n      const data = {\n        rememberDevice: rememberDevice\n      };\n      if (this.get('factorType') === 'question') {\n        data.answer = this.get('answer');\n      } else if (this.get('factorType') === 'password') {\n        data.password = this.get('password');\n      } else if (this.needsPasscode()) {\n        data.passCode = this.get('answer');\n      }\n      if (this.pushFactorHasAutoPush()) {\n        data.autoPush = this.get('autoPush');\n      }\n      let promise; // MFA_REQUIRED, FACTOR_REQUIRED or UNAUTHENTICATED with factors (passwordlessAuth)\n\n      if (transaction.status === 'MFA_REQUIRED' || transaction.status === 'FACTOR_REQUIRED' || this.appState.get('promptForFactorInUnauthenticated')) {\n        const factor = this._findFactor(transaction);\n        promise = factor.verify(data);\n      } else if (this.get('canUseResend') && !this.get('answer') && transaction.resend) {\n        // MFA_CHALLENGE/ FACTOR_CHALLENGE\n        const firstLink = transaction.data._links.resend[0];\n        promise = transaction.resend(firstLink.name);\n      } else {\n        promise = transaction.verify(data);\n      } //the 'save' event here is triggered and used in the BaseLoginController\n      //to disable the primary button on the factor form\n\n      this.trigger('save');\n      return promise.then(function (trans) {\n        const options = {\n          delay: PUSH_INTERVAL,\n          transactionCallBack: transaction => {\n            self.options.appState.set('lastAuthResponse', transaction);\n          }\n        };\n        setTransaction(trans); // In Okta verify case we initiate poll.\n\n        if (trans.status === 'MFA_CHALLENGE' && trans.poll || trans.status === 'FACTOR_CHALLENGE' && trans.poll) {\n          const deferred = Q.defer();\n          const initiatePollTimout = Util.callAfterTimeout(deferred.resolve, PUSH_INTERVAL);\n          self.listenToOnce(self.options.appState, 'factorSwitched', () => {\n            clearTimeout(initiatePollTimout);\n            deferred.reject(new AuthStopPollInitiationError());\n          });\n          return deferred.promise.then(function () {\n            // Stop listening if factor was not switched before poll.\n            self.stopListening(self.options.appState, 'factorSwitched');\n            if (self.pushFactorHasAutoPush()) {\n              options.autoPush = function () {\n                return self.get('autoPush');\n              };\n              options.rememberDevice = function () {\n                return self.get('rememberDevice');\n              };\n            }\n            return trans.poll(options).then(function (trans) {\n              self.options.appState.set('lastAuthResponse', trans.data);\n              setTransaction(trans);\n            });\n          });\n        }\n      });\n    });\n  },\n  _findFactor: function (transaction) {\n    let factor;\n    if (transaction.factorTypes) {\n      factor = oktaUnderscore.findWhere(transaction.factorTypes, {\n        factorType: this.get('factorType')\n      });\n    }\n    if (!factor) {\n      factor = oktaUnderscore.findWhere(transaction.factors, {\n        id: this.get('id')\n      });\n    }\n    return factor;\n  },\n  pushFactorHasAutoPush: function () {\n    return this.settings.get('features.autoPush') && this.get('factorType') === 'push';\n  },\n  setCustomHotpVendorName: function (attributes) {\n    // If factor is token:hotp and not enrolled, we assume the first profile is the default.\n    // If factor is enrolled, we only support one profile to be enrolled, so find that one\n    // and display as enrolled profile. We do this by populating profile name in vendorName.\n    if (attributes.factorType === 'token:hotp' && attributes.profiles) {\n      if (attributes.status === 'NOT_SETUP') {\n        attributes.vendorName = attributes.profiles[0].name;\n      } else if (attributes.status === 'ACTIVE') {\n        const enrolledProfiles = attributes.profiles.filter(profile => {\n          return profile._embedded.enrolledFactors.length > 0;\n        });\n        attributes.vendorName = enrolledProfiles[0].name;\n      }\n    }\n    return attributes;\n  }\n});\nconst FactorFactors = Collection.extend({\n  model: FactorFactor,\n  comparator: 'sortOrder',\n  // One override necessary here - When Okta Verify OTP and Push are in the list,\n  // they are presented in the view as one factor - in the beacon menu,\n  // there's only one option (Okta Verify), and we show a form with Push\n  // with an inline totp option. What we need to do is to add totp\n  // as a \"backupFactor\" for push\n  parse: function (factors) {\n    // Keep a track of the last used factor, since\n    // we need it to determine the default factor.\n    this.lastUsedFactor = factors[0];\n    const oktaPushFactor = oktaUnderscore.findWhere(factors, {\n      provider: 'OKTA',\n      factorType: 'push'\n    });\n    let totpFactor;\n    if (oktaUnderscore.where(factors, {\n      factorType: 'push'\n    }).length > 1) {\n      totpFactor = oktaUnderscore.findWhere(factors, {\n        factorType: 'token:software:totp'\n      });\n    } else {\n      totpFactor = oktaUnderscore.findWhere(factors, {\n        provider: 'OKTA',\n        factorType: 'token:software:totp'\n      });\n    }\n    if (!oktaPushFactor || !totpFactor) {\n      return factors;\n    }\n    const isTotpFirst = totpFactor === factors[0];\n    const parsedFactors = oktaUnderscore.reduce(factors, function (memo, factor) {\n      const isOkta = factor.provider === 'OKTA';\n      const isOktaTotp = isOkta && factor.factorType === 'token:software:totp';\n      const isOktaPush = isOkta && factor.factorType === 'push';\n      const notEnrolled = factor.status !== 'ACTIVE';\n      const hideOktaTotp = isOktaTotp && (notEnrolled || oktaPushFactor.status === 'ACTIVE');\n      const hideOktaPush = isOktaPush && notEnrolled && totpFactor.status === 'ACTIVE';\n      if (hideOktaTotp || hideOktaPush) {\n        return memo;\n      }\n      if (isOktaPush) {\n        factor.backupFactor = new FactorFactor(totpFactor, {\n          parse: true\n        });\n      }\n      memo.push(factor);\n      return memo;\n    }, []); // Use push factor instead of TOTP, if TOTP is first in the list\n    // (since it is stored as backupFactor for push).\n\n    if (isTotpFirst) {\n      this.lastUsedFactor = oktaPushFactor;\n    }\n    return parsedFactors;\n  },\n  // Will need to update this to use HAL link to get last used factor:\n  // https://oktainc.atlassian.net/browse/OKTA-58380\n  // However, current code returns last used factor as first factor in list.\n  // Also, will need to add priority - i.e. if they do not have a last used\n  // factor, should try Okta Verify, then Okta SMS, etc.\n  getDefaultFactor: function () {\n    const factor = oktaUnderscore.pick(this.lastUsedFactor, 'factorType', 'provider');\n    return this.findWhere(factor);\n  },\n  getFirstUnenrolledRequiredFactor: function () {\n    return this.findWhere({\n      required: true,\n      enrolled: false\n    });\n  },\n  _getFactorsOfType: function (factorType) {\n    return this.where({\n      factorType: factorType\n    });\n  },\n  getFactorIndex: function (factorType, factorId) {\n    return this._getFactorsOfType(factorType).findIndex(function (factor) {\n      return factor.get('id') === factorId;\n    });\n  },\n  hasMultipleFactorsOfSameType: function (factorType) {\n    return this._getFactorsOfType(factorType).length > 1;\n  },\n  getFactorByTypeAndIndex: function (factorType, factorIndex) {\n    return this._getFactorsOfType(factorType)[factorIndex];\n  }\n});\nvar Factor = {\n  Model: FactorFactor,\n  Collection: FactorFactors\n};\nexport { Factor as default };","map":{"version":3,"names":["loc","Collection","oktaUnderscore","Q","AuthStopPollInitiationError","fn","Util","BaseLoginModel","PUSH_INTERVAL","FactorFactor","extend","extraProperties","flat","props","id","factorType","type","values","provider","enrollment","status","profile","vendorName","policy","profiles","local","answer","password","backupFactor","showAnswer","rememberDevice","autoPush","derived","isOktaFactor","deps","factorName","getFactorName","factorLabel","contains","getFactorLabel","apply","factorDescription","getFactorDescription","sortOrder","getFactorSortOrder","iconClassName","getFactorIconClassName","securityQuestion","getSecurityQuestionLabel","phoneNumber","email","deviceName","name","enrolled","cardinality","length","_embedded","enrolledFactors","adoption","findWhere","features","minimum","min","maximum","max","additionalEnrollment","required","canUseResend","isAnswerRequired","isFactorTypeVerification","undefined","parse","attributes","settings","appState","getRememberDeviceValue","setCustomHotpVendorName","omit","validate","get","needsPasscode","options","resend","trigger","manageTransaction","transaction","firstLink","data","_links","save","self","setTransaction","passCode","pushFactorHasAutoPush","promise","factor","_findFactor","verify","then","trans","delay","transactionCallBack","set","poll","deferred","defer","initiatePollTimout","callAfterTimeout","resolve","listenToOnce","clearTimeout","reject","stopListening","factorTypes","factors","enrolledProfiles","filter","FactorFactors","model","comparator","lastUsedFactor","oktaPushFactor","totpFactor","where","isTotpFirst","parsedFactors","reduce","memo","isOkta","isOktaTotp","isOktaPush","notEnrolled","hideOktaTotp","hideOktaPush","push","getDefaultFactor","pick","getFirstUnenrolledRequiredFactor","_getFactorsOfType","getFactorIndex","factorId","findIndex","hasMultipleFactorsOfSameType","getFactorByTypeAndIndex","factorIndex","Factor","Model","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v1/models/Factor.js"],"sourcesContent":["import { loc, Collection } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/handle-url.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-base64.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-i18n.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-img.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-markdown.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/handlebars/helper-xsrfTokenInput.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport Q from 'q';\nimport { AuthStopPollInitiationError } from '../../util/Errors.js';\nimport fn from '../../util/FactorUtil.js';\nimport Util from '../../util/Util.js';\nimport BaseLoginModel from './BaseLoginModel.js';\n\n/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst PUSH_INTERVAL = 4000; // Avoid setting interval to same value as keep-alive time (5 seconds) because it\n// caused an occasional issue with network connection lost errors in Safari and IE\n\nconst FactorFactor = BaseLoginModel.extend({\n  extraProperties: true,\n  flat: false,\n  props: {\n    id: 'string',\n    factorType: {\n      type: 'string',\n      values: ['sms', 'call', 'email', 'token', 'token:software:totp', 'token:hotp', 'token:hardware', 'question', 'push', 'u2f', 'password', 'assertion:saml2', 'assertion:oidc', 'claims_provider', 'webauthn']\n    },\n    provider: {\n      type: 'string',\n      values: ['OKTA', 'RSA', 'DEL_OATH', 'SYMANTEC', 'GOOGLE', 'YUBICO', 'FIDO', 'CUSTOM', 'GENERIC_SAML', 'GENERIC_OIDC']\n    },\n    enrollment: {\n      type: 'string',\n      values: ['OPTIONAL', 'REQUIRED']\n    },\n    status: {\n      type: 'string',\n      values: ['NOT_SETUP', 'ACTIVE']\n    },\n    profile: ['object'],\n    vendorName: 'string',\n    policy: ['object'],\n    profiles: ['object']\n  },\n  local: {\n    answer: 'string',\n    password: 'string',\n    backupFactor: 'object',\n    showAnswer: 'boolean',\n    rememberDevice: 'boolean',\n    autoPush: ['boolean', true, false]\n  },\n  derived: {\n    isOktaFactor: {\n      deps: ['provider'],\n      fn: function (provider) {\n        return provider === 'OKTA';\n      }\n    },\n    factorName: {\n      deps: ['provider', 'factorType'],\n      fn: fn.getFactorName\n    },\n    factorLabel: {\n      deps: ['provider', 'factorType', 'vendorName'],\n      fn: function (provider, factorType, vendorName) {\n        if (oktaUnderscore.contains(['DEL_OATH', 'GENERIC_SAML', 'GENERIC_OIDC', 'CUSTOM'], provider)) {\n          return vendorName;\n        }\n\n        return fn.getFactorLabel.apply(this, [provider, factorType]);\n      }\n    },\n    factorDescription: {\n      deps: ['provider', 'factorType'],\n      fn: fn.getFactorDescription\n    },\n    sortOrder: {\n      deps: ['provider', 'factorType'],\n      fn: fn.getFactorSortOrder\n    },\n    iconClassName: {\n      deps: ['provider', 'factorType'],\n      fn: fn.getFactorIconClassName\n    },\n    securityQuestion: {\n      deps: ['profile', 'factorType'],\n      fn: function (profile, factorType) {\n        if (factorType !== 'question') {\n          return null;\n        }\n\n        return profile && fn.getSecurityQuestionLabel(profile);\n      }\n    },\n    phoneNumber: {\n      deps: ['profile', 'factorType'],\n      fn: function (profile, factorType) {\n        if (oktaUnderscore.contains(['sms', 'call'], factorType)) {\n          return profile && profile.phoneNumber;\n        }\n\n        return null;\n      }\n    },\n    email: {\n      deps: ['profile', 'factorType'],\n      fn: function (profile, factorType) {\n        if (factorType === 'email') {\n          return profile && profile.email;\n        }\n\n        return null;\n      }\n    },\n    deviceName: {\n      deps: ['profile', 'factorType'],\n      fn: function (profile, factorType) {\n        if (factorType !== 'push') {\n          return null;\n        }\n\n        return profile && profile.name;\n      }\n    },\n    enrolled: {\n      deps: ['status'],\n      fn: function (status) {\n        return status === 'ACTIVE';\n      }\n    },\n    cardinality: {\n      deps: ['policy', 'profiles'],\n      fn: function (policy, profiles) {\n        if (profiles && profiles.length > 0) {\n          const profile = profiles[0]; //assume for now we only get one profile (multiple profiles are not supported yet)\n\n          const enrolled = profile._embedded.enrolledFactors.length;\n\n          const adoption = oktaUnderscore.findWhere(profile._embedded.features, {\n            type: 'adoption'\n          });\n\n          if (adoption && adoption.cardinality) {\n            return {\n              enrolled: enrolled,\n              minimum: adoption.cardinality.min,\n              maximum: adoption.cardinality.max\n            };\n          }\n\n          return false;\n        } else if (policy && policy.enrollment) {\n          return policy.enrollment;\n        } else {\n          return false;\n        }\n      }\n    },\n    additionalEnrollment: {\n      deps: ['cardinality'],\n      fn: function (cardinality) {\n        if (cardinality) {\n          return cardinality.enrolled !== 0 && cardinality.enrolled < cardinality.maximum;\n        } else {\n          return false;\n        }\n      }\n    },\n    required: {\n      deps: ['enrollment'],\n      fn: function (enrollment) {\n        return enrollment === 'REQUIRED';\n      }\n    },\n    canUseResend: {\n      deps: ['provider', 'factorType'],\n      fn: function (provider, factorType) {\n        // Only push, sms and call have resend links.\n        return provider === 'OKTA' && oktaUnderscore.contains(['push', 'sms', 'call', 'email'], factorType);\n      }\n    },\n    isAnswerRequired: {\n      deps: ['factorType'],\n      fn: function (factorType) {\n        return oktaUnderscore.contains(['sms', 'call', 'email', 'token', 'token:software:totp', 'question'], factorType);\n      }\n    },\n    isFactorTypeVerification: {\n      deps: ['provider', 'id'],\n      fn: function (provider, id) {\n        return provider === undefined && id === undefined;\n      }\n    }\n  },\n  parse: function (attributes) {\n    this.settings = attributes.settings;\n    this.appState = attributes.appState; // set the initial value for remember device.\n\n    attributes.rememberDevice = fn.getRememberDeviceValue(this.appState); // Add vendorname for custom totp enroll\n\n    this.setCustomHotpVendorName(attributes);\n    return oktaUnderscore.omit(attributes, ['settings', 'appState']);\n  },\n  validate: function () {\n    if (this.get('isAnswerRequired') && !this.get('answer')) {\n      return {\n        answer: loc('model.validation.field.blank')\n      };\n    } else if (this.get('factorType') === 'password' && !this.get('password')) {\n      return {\n        password: loc('error.password.required')\n      };\n    }\n  },\n  needsPasscode: function () {\n    // we don't need passcode for email with magic link flow\n    return !(this.options.appState.get('isIdxStateToken') && this.get('factorType') === 'email');\n  },\n  resend: function () {\n    this.trigger('form:clear-errors');\n    return this.manageTransaction(function (transaction) {\n      const firstLink = transaction.data._links.resend[0];\n      return transaction.resend(firstLink.name);\n    });\n  },\n  save: function () {\n    const rememberDevice = !!this.get('rememberDevice');\n    const self = this; // Set/Remove the remember device cookie based on the remember device input.\n\n    return this.manageTransaction(function (transaction, setTransaction) {\n      const data = {\n        rememberDevice: rememberDevice\n      };\n\n      if (this.get('factorType') === 'question') {\n        data.answer = this.get('answer');\n      } else if (this.get('factorType') === 'password') {\n        data.password = this.get('password');\n      } else if (this.needsPasscode()) {\n        data.passCode = this.get('answer');\n      }\n\n      if (this.pushFactorHasAutoPush()) {\n        data.autoPush = this.get('autoPush');\n      }\n\n      let promise; // MFA_REQUIRED, FACTOR_REQUIRED or UNAUTHENTICATED with factors (passwordlessAuth)\n\n      if (transaction.status === 'MFA_REQUIRED' || transaction.status === 'FACTOR_REQUIRED' || this.appState.get('promptForFactorInUnauthenticated')) {\n        const factor = this._findFactor(transaction);\n\n        promise = factor.verify(data);\n      } else if (this.get('canUseResend') && !this.get('answer') && transaction.resend) {\n        // MFA_CHALLENGE/ FACTOR_CHALLENGE\n        const firstLink = transaction.data._links.resend[0];\n        promise = transaction.resend(firstLink.name);\n      } else {\n        promise = transaction.verify(data);\n      } //the 'save' event here is triggered and used in the BaseLoginController\n      //to disable the primary button on the factor form\n\n\n      this.trigger('save');\n      return promise.then(function (trans) {\n        const options = {\n          delay: PUSH_INTERVAL,\n          transactionCallBack: transaction => {\n            self.options.appState.set('lastAuthResponse', transaction);\n          }\n        };\n        setTransaction(trans); // In Okta verify case we initiate poll.\n\n        if (trans.status === 'MFA_CHALLENGE' && trans.poll || trans.status === 'FACTOR_CHALLENGE' && trans.poll) {\n          const deferred = Q.defer();\n          const initiatePollTimout = Util.callAfterTimeout(deferred.resolve, PUSH_INTERVAL);\n          self.listenToOnce(self.options.appState, 'factorSwitched', () => {\n            clearTimeout(initiatePollTimout);\n            deferred.reject(new AuthStopPollInitiationError());\n          });\n          return deferred.promise.then(function () {\n            // Stop listening if factor was not switched before poll.\n            self.stopListening(self.options.appState, 'factorSwitched');\n\n            if (self.pushFactorHasAutoPush()) {\n              options.autoPush = function () {\n                return self.get('autoPush');\n              };\n\n              options.rememberDevice = function () {\n                return self.get('rememberDevice');\n              };\n            }\n\n            return trans.poll(options).then(function (trans) {\n              self.options.appState.set('lastAuthResponse', trans.data);\n              setTransaction(trans);\n            });\n          });\n        }\n      });\n    });\n  },\n  _findFactor: function (transaction) {\n    let factor;\n\n    if (transaction.factorTypes) {\n      factor = oktaUnderscore.findWhere(transaction.factorTypes, {\n        factorType: this.get('factorType')\n      });\n    }\n\n    if (!factor) {\n      factor = oktaUnderscore.findWhere(transaction.factors, {\n        id: this.get('id')\n      });\n    }\n\n    return factor;\n  },\n  pushFactorHasAutoPush: function () {\n    return this.settings.get('features.autoPush') && this.get('factorType') === 'push';\n  },\n  setCustomHotpVendorName: function (attributes) {\n    // If factor is token:hotp and not enrolled, we assume the first profile is the default.\n    // If factor is enrolled, we only support one profile to be enrolled, so find that one\n    // and display as enrolled profile. We do this by populating profile name in vendorName.\n    if (attributes.factorType === 'token:hotp' && attributes.profiles) {\n      if (attributes.status === 'NOT_SETUP') {\n        attributes.vendorName = attributes.profiles[0].name;\n      } else if (attributes.status === 'ACTIVE') {\n        const enrolledProfiles = attributes.profiles.filter(profile => {\n          return profile._embedded.enrolledFactors.length > 0;\n        });\n        attributes.vendorName = enrolledProfiles[0].name;\n      }\n    }\n\n    return attributes;\n  }\n});\nconst FactorFactors = Collection.extend({\n  model: FactorFactor,\n  comparator: 'sortOrder',\n  // One override necessary here - When Okta Verify OTP and Push are in the list,\n  // they are presented in the view as one factor - in the beacon menu,\n  // there's only one option (Okta Verify), and we show a form with Push\n  // with an inline totp option. What we need to do is to add totp\n  // as a \"backupFactor\" for push\n  parse: function (factors) {\n    // Keep a track of the last used factor, since\n    // we need it to determine the default factor.\n    this.lastUsedFactor = factors[0];\n\n    const oktaPushFactor = oktaUnderscore.findWhere(factors, {\n      provider: 'OKTA',\n      factorType: 'push'\n    });\n\n    let totpFactor;\n\n    if (oktaUnderscore.where(factors, {\n      factorType: 'push'\n    }).length > 1) {\n      totpFactor = oktaUnderscore.findWhere(factors, {\n        factorType: 'token:software:totp'\n      });\n    } else {\n      totpFactor = oktaUnderscore.findWhere(factors, {\n        provider: 'OKTA',\n        factorType: 'token:software:totp'\n      });\n    }\n\n    if (!oktaPushFactor || !totpFactor) {\n      return factors;\n    }\n\n    const isTotpFirst = totpFactor === factors[0];\n\n    const parsedFactors = oktaUnderscore.reduce(factors, function (memo, factor) {\n      const isOkta = factor.provider === 'OKTA';\n      const isOktaTotp = isOkta && factor.factorType === 'token:software:totp';\n      const isOktaPush = isOkta && factor.factorType === 'push';\n      const notEnrolled = factor.status !== 'ACTIVE';\n      const hideOktaTotp = isOktaTotp && (notEnrolled || oktaPushFactor.status === 'ACTIVE');\n      const hideOktaPush = isOktaPush && notEnrolled && totpFactor.status === 'ACTIVE';\n\n      if (hideOktaTotp || hideOktaPush) {\n        return memo;\n      }\n\n      if (isOktaPush) {\n        factor.backupFactor = new FactorFactor(totpFactor, {\n          parse: true\n        });\n      }\n\n      memo.push(factor);\n      return memo;\n    }, []); // Use push factor instead of TOTP, if TOTP is first in the list\n    // (since it is stored as backupFactor for push).\n\n\n    if (isTotpFirst) {\n      this.lastUsedFactor = oktaPushFactor;\n    }\n\n    return parsedFactors;\n  },\n  // Will need to update this to use HAL link to get last used factor:\n  // https://oktainc.atlassian.net/browse/OKTA-58380\n  // However, current code returns last used factor as first factor in list.\n  // Also, will need to add priority - i.e. if they do not have a last used\n  // factor, should try Okta Verify, then Okta SMS, etc.\n  getDefaultFactor: function () {\n    const factor = oktaUnderscore.pick(this.lastUsedFactor, 'factorType', 'provider');\n\n    return this.findWhere(factor);\n  },\n  getFirstUnenrolledRequiredFactor: function () {\n    return this.findWhere({\n      required: true,\n      enrolled: false\n    });\n  },\n  _getFactorsOfType: function (factorType) {\n    return this.where({\n      factorType: factorType\n    });\n  },\n  getFactorIndex: function (factorType, factorId) {\n    return this._getFactorsOfType(factorType).findIndex(function (factor) {\n      return factor.get('id') === factorId;\n    });\n  },\n  hasMultipleFactorsOfSameType: function (factorType) {\n    return this._getFactorsOfType(factorType).length > 1;\n  },\n  getFactorByTypeAndIndex: function (factorType, factorIndex) {\n    return this._getFactorsOfType(factorType)[factorIndex];\n  }\n});\nvar Factor = {\n  Model: FactorFactor,\n  Collection: FactorFactors\n};\n\nexport { Factor as default };\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,UAAU,QAAQ,wEAAwE;AACxG,OAAO,wFAAwF;AAC/F,OAAO,oFAAoF;AAC3F,OAAO,uFAAuF;AAC9F,OAAO,qFAAqF;AAC5F,OAAO,oFAAoF;AAC3F,OAAO,yFAAyF;AAChG,OAAO,+FAA+F;AACtG,OAAO,yEAAyE;AAChF,OAAO,6EAA6E;AACpF,OAAO,6EAA6E;AACpF,OAAOC,cAAc,MAAM,iFAAiF;AAC5G,OAAO,sEAAsE;AAC7E,OAAO,0EAA0E;AACjF,OAAO,wEAAwE;AAC/E,OAAO,iFAAiF;AACxF,OAAOC,CAAC,MAAM,GAAG;AACjB,SAASC,2BAA2B,QAAQ,sBAAsB;AAClE,OAAOC,EAAE,MAAM,0BAA0B;AACzC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,IAAI,CAAC,CAAC;AAC5B;;AAEA,MAAMC,YAAY,GAAGF,cAAc,CAACG,MAAM,CAAC;EACzCC,eAAe,EAAE,IAAI;EACrBC,IAAI,EAAE,KAAK;EACXC,KAAK,EAAE;IACLC,EAAE,EAAE,QAAQ;IACZC,UAAU,EAAE;MACVC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,qBAAqB,EAAE,YAAY,EAAE,gBAAgB,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,UAAU;IAC5M,CAAC;IACDC,QAAQ,EAAE;MACRF,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,cAAc;IACtH,CAAC;IACDE,UAAU,EAAE;MACVH,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE,CAAC,UAAU,EAAE,UAAU;IACjC,CAAC;IACDG,MAAM,EAAE;MACNJ,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE,CAAC,WAAW,EAAE,QAAQ;IAChC,CAAC;IACDI,OAAO,EAAE,CAAC,QAAQ,CAAC;IACnBC,UAAU,EAAE,QAAQ;IACpBC,MAAM,EAAE,CAAC,QAAQ,CAAC;IAClBC,QAAQ,EAAE,CAAC,QAAQ;EACrB,CAAC;EACDC,KAAK,EAAE;IACLC,MAAM,EAAE,QAAQ;IAChBC,QAAQ,EAAE,QAAQ;IAClBC,YAAY,EAAE,QAAQ;IACtBC,UAAU,EAAE,SAAS;IACrBC,cAAc,EAAE,SAAS;IACzBC,QAAQ,EAAE,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK;EACnC,CAAC;EACDC,OAAO,EAAE;IACPC,YAAY,EAAE;MACZC,IAAI,EAAE,CAAC,UAAU,CAAC;MAClB7B,EAAE,EAAE,SAAAA,CAAUa,QAAQ,EAAE;QACtB,OAAOA,QAAQ,KAAK,MAAM;MAC5B;IACF,CAAC;IACDiB,UAAU,EAAE;MACVD,IAAI,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;MAChC7B,EAAE,EAAEA,EAAE,CAAC+B;IACT,CAAC;IACDC,WAAW,EAAE;MACXH,IAAI,EAAE,CAAC,UAAU,EAAE,YAAY,EAAE,YAAY,CAAC;MAC9C7B,EAAE,EAAE,SAAAA,CAAUa,QAAQ,EAAEH,UAAU,EAAEO,UAAU,EAAE;QAC9C,IAAIpB,cAAc,CAACoC,QAAQ,CAAC,CAAC,UAAU,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,EAAEpB,QAAQ,CAAC,EAAE;UAC7F,OAAOI,UAAU;QACnB;QAEA,OAAOjB,EAAE,CAACkC,cAAc,CAACC,KAAK,CAAC,IAAI,EAAE,CAACtB,QAAQ,EAAEH,UAAU,CAAC,CAAC;MAC9D;IACF,CAAC;IACD0B,iBAAiB,EAAE;MACjBP,IAAI,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;MAChC7B,EAAE,EAAEA,EAAE,CAACqC;IACT,CAAC;IACDC,SAAS,EAAE;MACTT,IAAI,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;MAChC7B,EAAE,EAAEA,EAAE,CAACuC;IACT,CAAC;IACDC,aAAa,EAAE;MACbX,IAAI,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;MAChC7B,EAAE,EAAEA,EAAE,CAACyC;IACT,CAAC;IACDC,gBAAgB,EAAE;MAChBb,IAAI,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;MAC/B7B,EAAE,EAAE,SAAAA,CAAUgB,OAAO,EAAEN,UAAU,EAAE;QACjC,IAAIA,UAAU,KAAK,UAAU,EAAE;UAC7B,OAAO,IAAI;QACb;QAEA,OAAOM,OAAO,IAAIhB,EAAE,CAAC2C,wBAAwB,CAAC3B,OAAO,CAAC;MACxD;IACF,CAAC;IACD4B,WAAW,EAAE;MACXf,IAAI,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;MAC/B7B,EAAE,EAAE,SAAAA,CAAUgB,OAAO,EAAEN,UAAU,EAAE;QACjC,IAAIb,cAAc,CAACoC,QAAQ,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAEvB,UAAU,CAAC,EAAE;UACxD,OAAOM,OAAO,IAAIA,OAAO,CAAC4B,WAAW;QACvC;QAEA,OAAO,IAAI;MACb;IACF,CAAC;IACDC,KAAK,EAAE;MACLhB,IAAI,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;MAC/B7B,EAAE,EAAE,SAAAA,CAAUgB,OAAO,EAAEN,UAAU,EAAE;QACjC,IAAIA,UAAU,KAAK,OAAO,EAAE;UAC1B,OAAOM,OAAO,IAAIA,OAAO,CAAC6B,KAAK;QACjC;QAEA,OAAO,IAAI;MACb;IACF,CAAC;IACDC,UAAU,EAAE;MACVjB,IAAI,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;MAC/B7B,EAAE,EAAE,SAAAA,CAAUgB,OAAO,EAAEN,UAAU,EAAE;QACjC,IAAIA,UAAU,KAAK,MAAM,EAAE;UACzB,OAAO,IAAI;QACb;QAEA,OAAOM,OAAO,IAAIA,OAAO,CAAC+B,IAAI;MAChC;IACF,CAAC;IACDC,QAAQ,EAAE;MACRnB,IAAI,EAAE,CAAC,QAAQ,CAAC;MAChB7B,EAAE,EAAE,SAAAA,CAAUe,MAAM,EAAE;QACpB,OAAOA,MAAM,KAAK,QAAQ;MAC5B;IACF,CAAC;IACDkC,WAAW,EAAE;MACXpB,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC;MAC5B7B,EAAE,EAAE,SAAAA,CAAUkB,MAAM,EAAEC,QAAQ,EAAE;QAC9B,IAAIA,QAAQ,IAAIA,QAAQ,CAAC+B,MAAM,GAAG,CAAC,EAAE;UACnC,MAAMlC,OAAO,GAAGG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;UAE7B,MAAM6B,QAAQ,GAAGhC,OAAO,CAACmC,SAAS,CAACC,eAAe,CAACF,MAAM;UAEzD,MAAMG,QAAQ,GAAGxD,cAAc,CAACyD,SAAS,CAACtC,OAAO,CAACmC,SAAS,CAACI,QAAQ,EAAE;YACpE5C,IAAI,EAAE;UACR,CAAC,CAAC;UAEF,IAAI0C,QAAQ,IAAIA,QAAQ,CAACJ,WAAW,EAAE;YACpC,OAAO;cACLD,QAAQ,EAAEA,QAAQ;cAClBQ,OAAO,EAAEH,QAAQ,CAACJ,WAAW,CAACQ,GAAG;cACjCC,OAAO,EAAEL,QAAQ,CAACJ,WAAW,CAACU;YAChC,CAAC;UACH;UAEA,OAAO,KAAK;QACd,CAAC,MAAM,IAAIzC,MAAM,IAAIA,MAAM,CAACJ,UAAU,EAAE;UACtC,OAAOI,MAAM,CAACJ,UAAU;QAC1B,CAAC,MAAM;UACL,OAAO,KAAK;QACd;MACF;IACF,CAAC;IACD8C,oBAAoB,EAAE;MACpB/B,IAAI,EAAE,CAAC,aAAa,CAAC;MACrB7B,EAAE,EAAE,SAAAA,CAAUiD,WAAW,EAAE;QACzB,IAAIA,WAAW,EAAE;UACf,OAAOA,WAAW,CAACD,QAAQ,KAAK,CAAC,IAAIC,WAAW,CAACD,QAAQ,GAAGC,WAAW,CAACS,OAAO;QACjF,CAAC,MAAM;UACL,OAAO,KAAK;QACd;MACF;IACF,CAAC;IACDG,QAAQ,EAAE;MACRhC,IAAI,EAAE,CAAC,YAAY,CAAC;MACpB7B,EAAE,EAAE,SAAAA,CAAUc,UAAU,EAAE;QACxB,OAAOA,UAAU,KAAK,UAAU;MAClC;IACF,CAAC;IACDgD,YAAY,EAAE;MACZjC,IAAI,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;MAChC7B,EAAE,EAAE,SAAAA,CAAUa,QAAQ,EAAEH,UAAU,EAAE;QAClC;QACA,OAAOG,QAAQ,KAAK,MAAM,IAAIhB,cAAc,CAACoC,QAAQ,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAEvB,UAAU,CAAC;MACrG;IACF,CAAC;IACDqD,gBAAgB,EAAE;MAChBlC,IAAI,EAAE,CAAC,YAAY,CAAC;MACpB7B,EAAE,EAAE,SAAAA,CAAUU,UAAU,EAAE;QACxB,OAAOb,cAAc,CAACoC,QAAQ,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,qBAAqB,EAAE,UAAU,CAAC,EAAEvB,UAAU,CAAC;MAClH;IACF,CAAC;IACDsD,wBAAwB,EAAE;MACxBnC,IAAI,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;MACxB7B,EAAE,EAAE,SAAAA,CAAUa,QAAQ,EAAEJ,EAAE,EAAE;QAC1B,OAAOI,QAAQ,KAAKoD,SAAS,IAAIxD,EAAE,KAAKwD,SAAS;MACnD;IACF;EACF,CAAC;EACDC,KAAK,EAAE,SAAAA,CAAUC,UAAU,EAAE;IAC3B,IAAI,CAACC,QAAQ,GAAGD,UAAU,CAACC,QAAQ;IACnC,IAAI,CAACC,QAAQ,GAAGF,UAAU,CAACE,QAAQ,CAAC,CAAC;;IAErCF,UAAU,CAAC1C,cAAc,GAAGzB,EAAE,CAACsE,sBAAsB,CAAC,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC;;IAEtE,IAAI,CAACE,uBAAuB,CAACJ,UAAU,CAAC;IACxC,OAAOtE,cAAc,CAAC2E,IAAI,CAACL,UAAU,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;EAClE,CAAC;EACDM,QAAQ,EAAE,SAAAA,CAAA,EAAY;IACpB,IAAI,IAAI,CAACC,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAACA,GAAG,CAAC,QAAQ,CAAC,EAAE;MACvD,OAAO;QACLrD,MAAM,EAAE1B,GAAG,CAAC,8BAA8B;MAC5C,CAAC;IACH,CAAC,MAAM,IAAI,IAAI,CAAC+E,GAAG,CAAC,YAAY,CAAC,KAAK,UAAU,IAAI,CAAC,IAAI,CAACA,GAAG,CAAC,UAAU,CAAC,EAAE;MACzE,OAAO;QACLpD,QAAQ,EAAE3B,GAAG,CAAC,yBAAyB;MACzC,CAAC;IACH;EACF,CAAC;EACDgF,aAAa,EAAE,SAAAA,CAAA,EAAY;IACzB;IACA,OAAO,EAAE,IAAI,CAACC,OAAO,CAACP,QAAQ,CAACK,GAAG,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAACA,GAAG,CAAC,YAAY,CAAC,KAAK,OAAO,CAAC;EAC9F,CAAC;EACDG,MAAM,EAAE,SAAAA,CAAA,EAAY;IAClB,IAAI,CAACC,OAAO,CAAC,mBAAmB,CAAC;IACjC,OAAO,IAAI,CAACC,iBAAiB,CAAC,UAAUC,WAAW,EAAE;MACnD,MAAMC,SAAS,GAAGD,WAAW,CAACE,IAAI,CAACC,MAAM,CAACN,MAAM,CAAC,CAAC,CAAC;MACnD,OAAOG,WAAW,CAACH,MAAM,CAACI,SAAS,CAAClC,IAAI,CAAC;IAC3C,CAAC,CAAC;EACJ,CAAC;EACDqC,IAAI,EAAE,SAAAA,CAAA,EAAY;IAChB,MAAM3D,cAAc,GAAG,CAAC,CAAC,IAAI,CAACiD,GAAG,CAAC,gBAAgB,CAAC;IACnD,MAAMW,IAAI,GAAG,IAAI,CAAC,CAAC;;IAEnB,OAAO,IAAI,CAACN,iBAAiB,CAAC,UAAUC,WAAW,EAAEM,cAAc,EAAE;MACnE,MAAMJ,IAAI,GAAG;QACXzD,cAAc,EAAEA;MAClB,CAAC;MAED,IAAI,IAAI,CAACiD,GAAG,CAAC,YAAY,CAAC,KAAK,UAAU,EAAE;QACzCQ,IAAI,CAAC7D,MAAM,GAAG,IAAI,CAACqD,GAAG,CAAC,QAAQ,CAAC;MAClC,CAAC,MAAM,IAAI,IAAI,CAACA,GAAG,CAAC,YAAY,CAAC,KAAK,UAAU,EAAE;QAChDQ,IAAI,CAAC5D,QAAQ,GAAG,IAAI,CAACoD,GAAG,CAAC,UAAU,CAAC;MACtC,CAAC,MAAM,IAAI,IAAI,CAACC,aAAa,CAAC,CAAC,EAAE;QAC/BO,IAAI,CAACK,QAAQ,GAAG,IAAI,CAACb,GAAG,CAAC,QAAQ,CAAC;MACpC;MAEA,IAAI,IAAI,CAACc,qBAAqB,CAAC,CAAC,EAAE;QAChCN,IAAI,CAACxD,QAAQ,GAAG,IAAI,CAACgD,GAAG,CAAC,UAAU,CAAC;MACtC;MAEA,IAAIe,OAAO,CAAC,CAAC;;MAEb,IAAIT,WAAW,CAACjE,MAAM,KAAK,cAAc,IAAIiE,WAAW,CAACjE,MAAM,KAAK,iBAAiB,IAAI,IAAI,CAACsD,QAAQ,CAACK,GAAG,CAAC,kCAAkC,CAAC,EAAE;QAC9I,MAAMgB,MAAM,GAAG,IAAI,CAACC,WAAW,CAACX,WAAW,CAAC;QAE5CS,OAAO,GAAGC,MAAM,CAACE,MAAM,CAACV,IAAI,CAAC;MAC/B,CAAC,MAAM,IAAI,IAAI,CAACR,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAACA,GAAG,CAAC,QAAQ,CAAC,IAAIM,WAAW,CAACH,MAAM,EAAE;QAChF;QACA,MAAMI,SAAS,GAAGD,WAAW,CAACE,IAAI,CAACC,MAAM,CAACN,MAAM,CAAC,CAAC,CAAC;QACnDY,OAAO,GAAGT,WAAW,CAACH,MAAM,CAACI,SAAS,CAAClC,IAAI,CAAC;MAC9C,CAAC,MAAM;QACL0C,OAAO,GAAGT,WAAW,CAACY,MAAM,CAACV,IAAI,CAAC;MACpC,CAAC,CAAC;MACF;;MAGA,IAAI,CAACJ,OAAO,CAAC,MAAM,CAAC;MACpB,OAAOW,OAAO,CAACI,IAAI,CAAC,UAAUC,KAAK,EAAE;QACnC,MAAMlB,OAAO,GAAG;UACdmB,KAAK,EAAE5F,aAAa;UACpB6F,mBAAmB,EAAEhB,WAAW,IAAI;YAClCK,IAAI,CAACT,OAAO,CAACP,QAAQ,CAAC4B,GAAG,CAAC,kBAAkB,EAAEjB,WAAW,CAAC;UAC5D;QACF,CAAC;QACDM,cAAc,CAACQ,KAAK,CAAC,CAAC,CAAC;;QAEvB,IAAIA,KAAK,CAAC/E,MAAM,KAAK,eAAe,IAAI+E,KAAK,CAACI,IAAI,IAAIJ,KAAK,CAAC/E,MAAM,KAAK,kBAAkB,IAAI+E,KAAK,CAACI,IAAI,EAAE;UACvG,MAAMC,QAAQ,GAAGrG,CAAC,CAACsG,KAAK,CAAC,CAAC;UAC1B,MAAMC,kBAAkB,GAAGpG,IAAI,CAACqG,gBAAgB,CAACH,QAAQ,CAACI,OAAO,EAAEpG,aAAa,CAAC;UACjFkF,IAAI,CAACmB,YAAY,CAACnB,IAAI,CAACT,OAAO,CAACP,QAAQ,EAAE,gBAAgB,EAAE,MAAM;YAC/DoC,YAAY,CAACJ,kBAAkB,CAAC;YAChCF,QAAQ,CAACO,MAAM,CAAC,IAAI3G,2BAA2B,CAAC,CAAC,CAAC;UACpD,CAAC,CAAC;UACF,OAAOoG,QAAQ,CAACV,OAAO,CAACI,IAAI,CAAC,YAAY;YACvC;YACAR,IAAI,CAACsB,aAAa,CAACtB,IAAI,CAACT,OAAO,CAACP,QAAQ,EAAE,gBAAgB,CAAC;YAE3D,IAAIgB,IAAI,CAACG,qBAAqB,CAAC,CAAC,EAAE;cAChCZ,OAAO,CAAClD,QAAQ,GAAG,YAAY;gBAC7B,OAAO2D,IAAI,CAACX,GAAG,CAAC,UAAU,CAAC;cAC7B,CAAC;cAEDE,OAAO,CAACnD,cAAc,GAAG,YAAY;gBACnC,OAAO4D,IAAI,CAACX,GAAG,CAAC,gBAAgB,CAAC;cACnC,CAAC;YACH;YAEA,OAAOoB,KAAK,CAACI,IAAI,CAACtB,OAAO,CAAC,CAACiB,IAAI,CAAC,UAAUC,KAAK,EAAE;cAC/CT,IAAI,CAACT,OAAO,CAACP,QAAQ,CAAC4B,GAAG,CAAC,kBAAkB,EAAEH,KAAK,CAACZ,IAAI,CAAC;cACzDI,cAAc,CAACQ,KAAK,CAAC;YACvB,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EACDH,WAAW,EAAE,SAAAA,CAAUX,WAAW,EAAE;IAClC,IAAIU,MAAM;IAEV,IAAIV,WAAW,CAAC4B,WAAW,EAAE;MAC3BlB,MAAM,GAAG7F,cAAc,CAACyD,SAAS,CAAC0B,WAAW,CAAC4B,WAAW,EAAE;QACzDlG,UAAU,EAAE,IAAI,CAACgE,GAAG,CAAC,YAAY;MACnC,CAAC,CAAC;IACJ;IAEA,IAAI,CAACgB,MAAM,EAAE;MACXA,MAAM,GAAG7F,cAAc,CAACyD,SAAS,CAAC0B,WAAW,CAAC6B,OAAO,EAAE;QACrDpG,EAAE,EAAE,IAAI,CAACiE,GAAG,CAAC,IAAI;MACnB,CAAC,CAAC;IACJ;IAEA,OAAOgB,MAAM;EACf,CAAC;EACDF,qBAAqB,EAAE,SAAAA,CAAA,EAAY;IACjC,OAAO,IAAI,CAACpB,QAAQ,CAACM,GAAG,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAACA,GAAG,CAAC,YAAY,CAAC,KAAK,MAAM;EACpF,CAAC;EACDH,uBAAuB,EAAE,SAAAA,CAAUJ,UAAU,EAAE;IAC7C;IACA;IACA;IACA,IAAIA,UAAU,CAACzD,UAAU,KAAK,YAAY,IAAIyD,UAAU,CAAChD,QAAQ,EAAE;MACjE,IAAIgD,UAAU,CAACpD,MAAM,KAAK,WAAW,EAAE;QACrCoD,UAAU,CAAClD,UAAU,GAAGkD,UAAU,CAAChD,QAAQ,CAAC,CAAC,CAAC,CAAC4B,IAAI;MACrD,CAAC,MAAM,IAAIoB,UAAU,CAACpD,MAAM,KAAK,QAAQ,EAAE;QACzC,MAAM+F,gBAAgB,GAAG3C,UAAU,CAAChD,QAAQ,CAAC4F,MAAM,CAAC/F,OAAO,IAAI;UAC7D,OAAOA,OAAO,CAACmC,SAAS,CAACC,eAAe,CAACF,MAAM,GAAG,CAAC;QACrD,CAAC,CAAC;QACFiB,UAAU,CAAClD,UAAU,GAAG6F,gBAAgB,CAAC,CAAC,CAAC,CAAC/D,IAAI;MAClD;IACF;IAEA,OAAOoB,UAAU;EACnB;AACF,CAAC,CAAC;AACF,MAAM6C,aAAa,GAAGpH,UAAU,CAACS,MAAM,CAAC;EACtC4G,KAAK,EAAE7G,YAAY;EACnB8G,UAAU,EAAE,WAAW;EACvB;EACA;EACA;EACA;EACA;EACAhD,KAAK,EAAE,SAAAA,CAAU2C,OAAO,EAAE;IACxB;IACA;IACA,IAAI,CAACM,cAAc,GAAGN,OAAO,CAAC,CAAC,CAAC;IAEhC,MAAMO,cAAc,GAAGvH,cAAc,CAACyD,SAAS,CAACuD,OAAO,EAAE;MACvDhG,QAAQ,EAAE,MAAM;MAChBH,UAAU,EAAE;IACd,CAAC,CAAC;IAEF,IAAI2G,UAAU;IAEd,IAAIxH,cAAc,CAACyH,KAAK,CAACT,OAAO,EAAE;MAChCnG,UAAU,EAAE;IACd,CAAC,CAAC,CAACwC,MAAM,GAAG,CAAC,EAAE;MACbmE,UAAU,GAAGxH,cAAc,CAACyD,SAAS,CAACuD,OAAO,EAAE;QAC7CnG,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,MAAM;MACL2G,UAAU,GAAGxH,cAAc,CAACyD,SAAS,CAACuD,OAAO,EAAE;QAC7ChG,QAAQ,EAAE,MAAM;QAChBH,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IAEA,IAAI,CAAC0G,cAAc,IAAI,CAACC,UAAU,EAAE;MAClC,OAAOR,OAAO;IAChB;IAEA,MAAMU,WAAW,GAAGF,UAAU,KAAKR,OAAO,CAAC,CAAC,CAAC;IAE7C,MAAMW,aAAa,GAAG3H,cAAc,CAAC4H,MAAM,CAACZ,OAAO,EAAE,UAAUa,IAAI,EAAEhC,MAAM,EAAE;MAC3E,MAAMiC,MAAM,GAAGjC,MAAM,CAAC7E,QAAQ,KAAK,MAAM;MACzC,MAAM+G,UAAU,GAAGD,MAAM,IAAIjC,MAAM,CAAChF,UAAU,KAAK,qBAAqB;MACxE,MAAMmH,UAAU,GAAGF,MAAM,IAAIjC,MAAM,CAAChF,UAAU,KAAK,MAAM;MACzD,MAAMoH,WAAW,GAAGpC,MAAM,CAAC3E,MAAM,KAAK,QAAQ;MAC9C,MAAMgH,YAAY,GAAGH,UAAU,KAAKE,WAAW,IAAIV,cAAc,CAACrG,MAAM,KAAK,QAAQ,CAAC;MACtF,MAAMiH,YAAY,GAAGH,UAAU,IAAIC,WAAW,IAAIT,UAAU,CAACtG,MAAM,KAAK,QAAQ;MAEhF,IAAIgH,YAAY,IAAIC,YAAY,EAAE;QAChC,OAAON,IAAI;MACb;MAEA,IAAIG,UAAU,EAAE;QACdnC,MAAM,CAACnE,YAAY,GAAG,IAAInB,YAAY,CAACiH,UAAU,EAAE;UACjDnD,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;MAEAwD,IAAI,CAACO,IAAI,CAACvC,MAAM,CAAC;MACjB,OAAOgC,IAAI;IACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACR;;IAGA,IAAIH,WAAW,EAAE;MACf,IAAI,CAACJ,cAAc,GAAGC,cAAc;IACtC;IAEA,OAAOI,aAAa;EACtB,CAAC;EACD;EACA;EACA;EACA;EACA;EACAU,gBAAgB,EAAE,SAAAA,CAAA,EAAY;IAC5B,MAAMxC,MAAM,GAAG7F,cAAc,CAACsI,IAAI,CAAC,IAAI,CAAChB,cAAc,EAAE,YAAY,EAAE,UAAU,CAAC;IAEjF,OAAO,IAAI,CAAC7D,SAAS,CAACoC,MAAM,CAAC;EAC/B,CAAC;EACD0C,gCAAgC,EAAE,SAAAA,CAAA,EAAY;IAC5C,OAAO,IAAI,CAAC9E,SAAS,CAAC;MACpBO,QAAQ,EAAE,IAAI;MACdb,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EACDqF,iBAAiB,EAAE,SAAAA,CAAU3H,UAAU,EAAE;IACvC,OAAO,IAAI,CAAC4G,KAAK,CAAC;MAChB5G,UAAU,EAAEA;IACd,CAAC,CAAC;EACJ,CAAC;EACD4H,cAAc,EAAE,SAAAA,CAAU5H,UAAU,EAAE6H,QAAQ,EAAE;IAC9C,OAAO,IAAI,CAACF,iBAAiB,CAAC3H,UAAU,CAAC,CAAC8H,SAAS,CAAC,UAAU9C,MAAM,EAAE;MACpE,OAAOA,MAAM,CAAChB,GAAG,CAAC,IAAI,CAAC,KAAK6D,QAAQ;IACtC,CAAC,CAAC;EACJ,CAAC;EACDE,4BAA4B,EAAE,SAAAA,CAAU/H,UAAU,EAAE;IAClD,OAAO,IAAI,CAAC2H,iBAAiB,CAAC3H,UAAU,CAAC,CAACwC,MAAM,GAAG,CAAC;EACtD,CAAC;EACDwF,uBAAuB,EAAE,SAAAA,CAAUhI,UAAU,EAAEiI,WAAW,EAAE;IAC1D,OAAO,IAAI,CAACN,iBAAiB,CAAC3H,UAAU,CAAC,CAACiI,WAAW,CAAC;EACxD;AACF,CAAC,CAAC;AACF,IAAIC,MAAM,GAAG;EACXC,KAAK,EAAEzI,YAAY;EACnBR,UAAU,EAAEoH;AACd,CAAC;AAED,SAAS4B,MAAM,IAAIE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}