{"ast":null,"code":"import Spinner from '../views/shared/Spinner.js';\nimport BaseLoginController from '../util/BaseLoginController.js';\nimport Util from '../../util/Util.js';\n\n/*!\n * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar ForceIDPDiscoveryController = BaseLoginController.extend({\n  className: 'force-idp-discovery',\n  View: Spinner,\n  Model: {},\n  initialize: function () {\n    const OKTA_IDP_TYPE = 'OKTA';\n    const RESOURCE = 'okta:acct:';\n    const options = this.options;\n    const lastAuthResponse = options.appState.get('lastAuthResponse');\n    const stateToken = lastAuthResponse && (lastAuthResponse === null || lastAuthResponse === void 0 ? void 0 : lastAuthResponse.stateToken);\n    const webfingerArgs = {\n      resource: RESOURCE,\n      requestContext: stateToken\n    };\n    options.appState.settings.authClient.webfinger(webfingerArgs).then(res => {\n      if (res !== null && res !== void 0 && res.links && res.links[0]) {\n        if (res.links[0].properties['okta:idp:type'] !== OKTA_IDP_TYPE && res.links[0].href) {\n          const redirectFn = res.links[0].href.includes('OKTA_INVALID_SESSION_REPOST%3Dtrue') ? Util.redirectWithFormGet.bind(Util) : this.settings.get('redirectUtilFn'); //override redirectFn to only use Util.redirectWithFormGet if OKTA_INVALID_SESSION_REPOST is included\n          //it will be encoded since it will be included in the encoded fromURI\n\n          redirectFn(res.links[0].href);\n          return;\n        }\n      }\n      options.appState.trigger('navigate', '');\n    }).catch(() => {\n      // TODO: OKTA-436775 Show error instead of navigating to default route\n      options.appState.trigger('navigate', '');\n    });\n  }\n});\nexport { ForceIDPDiscoveryController as default };","map":{"version":3,"names":["Spinner","BaseLoginController","Util","ForceIDPDiscoveryController","extend","className","View","Model","initialize","OKTA_IDP_TYPE","RESOURCE","options","lastAuthResponse","appState","get","stateToken","webfingerArgs","resource","requestContext","settings","authClient","webfinger","then","res","links","properties","href","redirectFn","includes","redirectWithFormGet","bind","trigger","catch","default"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v1/controllers/ForceIDPDiscoveryController.js"],"sourcesContent":["import Spinner from '../views/shared/Spinner.js';\nimport BaseLoginController from '../util/BaseLoginController.js';\nimport Util from '../../util/Util.js';\n\n/*!\n * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar ForceIDPDiscoveryController = BaseLoginController.extend({\n  className: 'force-idp-discovery',\n  View: Spinner,\n  Model: {},\n  initialize: function () {\n    const OKTA_IDP_TYPE = 'OKTA';\n    const RESOURCE = 'okta:acct:';\n    const options = this.options;\n    const lastAuthResponse = options.appState.get('lastAuthResponse');\n    const stateToken = lastAuthResponse && (lastAuthResponse === null || lastAuthResponse === void 0 ? void 0 : lastAuthResponse.stateToken);\n    const webfingerArgs = {\n      resource: RESOURCE,\n      requestContext: stateToken\n    };\n    options.appState.settings.authClient.webfinger(webfingerArgs).then(res => {\n      if (res !== null && res !== void 0 && res.links && res.links[0]) {\n        if (res.links[0].properties['okta:idp:type'] !== OKTA_IDP_TYPE && res.links[0].href) {\n          const redirectFn = res.links[0].href.includes('OKTA_INVALID_SESSION_REPOST%3Dtrue') ? Util.redirectWithFormGet.bind(Util) : this.settings.get('redirectUtilFn'); //override redirectFn to only use Util.redirectWithFormGet if OKTA_INVALID_SESSION_REPOST is included\n          //it will be encoded since it will be included in the encoded fromURI\n\n          redirectFn(res.links[0].href);\n          return;\n        }\n      }\n\n      options.appState.trigger('navigate', '');\n    }).catch(() => {\n      // TODO: OKTA-436775 Show error instead of navigating to default route\n      options.appState.trigger('navigate', '');\n    });\n  }\n});\n\nexport { ForceIDPDiscoveryController as default };\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,4BAA4B;AAChD,OAAOC,mBAAmB,MAAM,gCAAgC;AAChE,OAAOC,IAAI,MAAM,oBAAoB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,2BAA2B,GAAGF,mBAAmB,CAACG,MAAM,CAAC;EAC3DC,SAAS,EAAE,qBAAqB;EAChCC,IAAI,EAAEN,OAAO;EACbO,KAAK,EAAE,CAAC,CAAC;EACTC,UAAU,EAAE,SAAAA,CAAA,EAAY;IACtB,MAAMC,aAAa,GAAG,MAAM;IAC5B,MAAMC,QAAQ,GAAG,YAAY;IAC7B,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMC,gBAAgB,GAAGD,OAAO,CAACE,QAAQ,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACjE,MAAMC,UAAU,GAAGH,gBAAgB,KAAKA,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACG,UAAU,CAAC;IACxI,MAAMC,aAAa,GAAG;MACpBC,QAAQ,EAAEP,QAAQ;MAClBQ,cAAc,EAAEH;IAClB,CAAC;IACDJ,OAAO,CAACE,QAAQ,CAACM,QAAQ,CAACC,UAAU,CAACC,SAAS,CAACL,aAAa,CAAC,CAACM,IAAI,CAACC,GAAG,IAAI;MACxE,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,IAAIA,GAAG,CAACC,KAAK,IAAID,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;QAC/D,IAAID,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC,eAAe,CAAC,KAAKhB,aAAa,IAAIc,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE;UACnF,MAAMC,UAAU,GAAGJ,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,CAACE,QAAQ,CAAC,oCAAoC,CAAC,GAAG1B,IAAI,CAAC2B,mBAAmB,CAACC,IAAI,CAAC5B,IAAI,CAAC,GAAG,IAAI,CAACiB,QAAQ,CAACL,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;UACjK;;UAEAa,UAAU,CAACJ,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC;UAC7B;QACF;MACF;MAEAf,OAAO,CAACE,QAAQ,CAACkB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IAC1C,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM;MACb;MACArB,OAAO,CAACE,QAAQ,CAACkB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IAC1C,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,SAAS5B,2BAA2B,IAAI8B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}