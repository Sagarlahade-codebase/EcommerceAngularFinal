{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Base/Remediator.js';\nclass EnrollmentChannelData extends Remediator {\n  getInputEmail() {\n    return [{\n      name: 'email',\n      type: 'string',\n      required: true,\n      label: 'Email'\n    }];\n  }\n  getInputPhoneNumber() {\n    return [{\n      name: 'phoneNumber',\n      type: 'string',\n      required: true,\n      label: 'Phone Number'\n    }];\n  }\n  canRemediate() {\n    return Boolean(this.values.email || this.values.phoneNumber);\n  }\n  getNextStep(authClient, context) {\n    const common = super.getNextStep(authClient, context);\n    const authenticator = context.currentAuthenticator.value;\n    return Object.assign(Object.assign({}, common), {\n      authenticator\n    });\n  }\n  getData() {\n    return {\n      stateHandle: this.values.stateHandle,\n      email: this.values.email,\n      phoneNumber: this.values.phoneNumber\n    };\n  }\n  getValuesAfterProceed() {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => !['email', 'phoneNumber'].includes(valueKey));\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n}\nEnrollmentChannelData.remediationName = 'enrollment-channel-data';\nexport { EnrollmentChannelData };","map":{"version":3,"names":["Remediator","EnrollmentChannelData","getInputEmail","name","type","required","label","getInputPhoneNumber","canRemediate","Boolean","values","email","phoneNumber","getNextStep","authClient","context","common","authenticator","currentAuthenticator","value","Object","assign","getData","stateHandle","getValuesAfterProceed","trimmedValues","keys","filter","valueKey","includes","reduce","remediationName"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/EnrollmentChannelData.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Base/Remediator.js';\n\nclass EnrollmentChannelData extends Remediator {\n    getInputEmail() {\n        return [\n            { name: 'email', type: 'string', required: true, label: 'Email' },\n        ];\n    }\n    getInputPhoneNumber() {\n        return [\n            { name: 'phoneNumber', type: 'string', required: true, label: 'Phone Number' },\n        ];\n    }\n    canRemediate() {\n        return Boolean(this.values.email || this.values.phoneNumber);\n    }\n    getNextStep(authClient, context) {\n        const common = super.getNextStep(authClient, context);\n        const authenticator = context.currentAuthenticator.value;\n        return Object.assign(Object.assign({}, common), { authenticator });\n    }\n    getData() {\n        return {\n            stateHandle: this.values.stateHandle,\n            email: this.values.email,\n            phoneNumber: this.values.phoneNumber\n        };\n    }\n    getValuesAfterProceed() {\n        let trimmedValues = Object.keys(this.values).filter(valueKey => !['email', 'phoneNumber'].includes(valueKey));\n        return trimmedValues.reduce((values, valueKey) => (Object.assign(Object.assign({}, values), { [valueKey]: this.values[valueKey] })), {});\n    }\n}\nEnrollmentChannelData.remediationName = 'enrollment-channel-data';\n\nexport { EnrollmentChannelData };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,sBAAsB;AAEjD,MAAMC,qBAAqB,SAASD,UAAU,CAAC;EAC3CE,aAAaA,CAAA,EAAG;IACZ,OAAO,CACH;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAQ,CAAC,CACpE;EACL;EACAC,mBAAmBA,CAAA,EAAG;IAClB,OAAO,CACH;MAAEJ,IAAI,EAAE,aAAa;MAAEC,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAe,CAAC,CACjF;EACL;EACAE,YAAYA,CAAA,EAAG;IACX,OAAOC,OAAO,CAAC,IAAI,CAACC,MAAM,CAACC,KAAK,IAAI,IAAI,CAACD,MAAM,CAACE,WAAW,CAAC;EAChE;EACAC,WAAWA,CAACC,UAAU,EAAEC,OAAO,EAAE;IAC7B,MAAMC,MAAM,GAAG,KAAK,CAACH,WAAW,CAACC,UAAU,EAAEC,OAAO,CAAC;IACrD,MAAME,aAAa,GAAGF,OAAO,CAACG,oBAAoB,CAACC,KAAK;IACxD,OAAOC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,MAAM,CAAC,EAAE;MAAEC;IAAc,CAAC,CAAC;EACtE;EACAK,OAAOA,CAAA,EAAG;IACN,OAAO;MACHC,WAAW,EAAE,IAAI,CAACb,MAAM,CAACa,WAAW;MACpCZ,KAAK,EAAE,IAAI,CAACD,MAAM,CAACC,KAAK;MACxBC,WAAW,EAAE,IAAI,CAACF,MAAM,CAACE;IAC7B,CAAC;EACL;EACAY,qBAAqBA,CAAA,EAAG;IACpB,IAAIC,aAAa,GAAGL,MAAM,CAACM,IAAI,CAAC,IAAI,CAAChB,MAAM,CAAC,CAACiB,MAAM,CAACC,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,aAAa,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,CAAC;IAC7G,OAAOH,aAAa,CAACK,MAAM,CAAC,CAACpB,MAAM,EAAEkB,QAAQ,KAAMR,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEX,MAAM,CAAC,EAAE;MAAE,CAACkB,QAAQ,GAAG,IAAI,CAAClB,MAAM,CAACkB,QAAQ;IAAE,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC;EAC5I;AACJ;AACA3B,qBAAqB,CAAC8B,eAAe,GAAG,yBAAyB;AAEjE,SAAS9B,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module"}