{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Base/Remediator.js';\nclass EnrollPoll extends Remediator {\n  canRemediate() {\n    return !!this.values.startPolling || this.options.step === 'enroll-poll';\n  }\n  getNextStep(authClient, context) {\n    const common = super.getNextStep(authClient, context);\n    let authenticator = this.getAuthenticator();\n    if (!authenticator && (context === null || context === void 0 ? void 0 : context.currentAuthenticator)) {\n      authenticator = context.currentAuthenticator.value;\n    }\n    return Object.assign(Object.assign({}, common), {\n      authenticator,\n      poll: {\n        required: true,\n        refresh: this.remediation.refresh\n      }\n    });\n  }\n  getValuesAfterProceed() {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'startPolling');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n}\nEnrollPoll.remediationName = 'enroll-poll';\nexport { EnrollPoll };","map":{"version":3,"names":["Remediator","EnrollPoll","canRemediate","values","startPolling","options","step","getNextStep","authClient","context","common","authenticator","getAuthenticator","currentAuthenticator","value","Object","assign","poll","required","refresh","remediation","getValuesAfterProceed","trimmedValues","keys","filter","valueKey","reduce","remediationName"],"sources":["/Users/tushar/Desktop/fullstack-angular-and-springboot-master/source-code/ecommerce-project-release-3.0/09-security-order-history-secure-backend-and-frontend/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/EnrollPoll.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Base/Remediator.js';\n\nclass EnrollPoll extends Remediator {\n    canRemediate() {\n        return !!this.values.startPolling || this.options.step === 'enroll-poll';\n    }\n    getNextStep(authClient, context) {\n        const common = super.getNextStep(authClient, context);\n        let authenticator = this.getAuthenticator();\n        if (!authenticator && (context === null || context === void 0 ? void 0 : context.currentAuthenticator)) {\n            authenticator = context.currentAuthenticator.value;\n        }\n        return Object.assign(Object.assign({}, common), { authenticator, poll: {\n                required: true,\n                refresh: this.remediation.refresh\n            } });\n    }\n    getValuesAfterProceed() {\n        let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'startPolling');\n        return trimmedValues.reduce((values, valueKey) => (Object.assign(Object.assign({}, values), { [valueKey]: this.values[valueKey] })), {});\n    }\n}\nEnrollPoll.remediationName = 'enroll-poll';\n\nexport { EnrollPoll };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,sBAAsB;AAEjD,MAAMC,UAAU,SAASD,UAAU,CAAC;EAChCE,YAAYA,CAAA,EAAG;IACX,OAAO,CAAC,CAAC,IAAI,CAACC,MAAM,CAACC,YAAY,IAAI,IAAI,CAACC,OAAO,CAACC,IAAI,KAAK,aAAa;EAC5E;EACAC,WAAWA,CAACC,UAAU,EAAEC,OAAO,EAAE;IAC7B,MAAMC,MAAM,GAAG,KAAK,CAACH,WAAW,CAACC,UAAU,EAAEC,OAAO,CAAC;IACrD,IAAIE,aAAa,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;IAC3C,IAAI,CAACD,aAAa,KAAKF,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACI,oBAAoB,CAAC,EAAE;MACpGF,aAAa,GAAGF,OAAO,CAACI,oBAAoB,CAACC,KAAK;IACtD;IACA,OAAOC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,MAAM,CAAC,EAAE;MAAEC,aAAa;MAAEM,IAAI,EAAE;QAC/DC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE,IAAI,CAACC,WAAW,CAACD;MAC9B;IAAE,CAAC,CAAC;EACZ;EACAE,qBAAqBA,CAAA,EAAG;IACpB,IAAIC,aAAa,GAAGP,MAAM,CAACQ,IAAI,CAAC,IAAI,CAACpB,MAAM,CAAC,CAACqB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,KAAK,cAAc,CAAC;IAC5F,OAAOH,aAAa,CAACI,MAAM,CAAC,CAACvB,MAAM,EAAEsB,QAAQ,KAAMV,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEb,MAAM,CAAC,EAAE;MAAE,CAACsB,QAAQ,GAAG,IAAI,CAACtB,MAAM,CAACsB,QAAQ;IAAE,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC;EAC5I;AACJ;AACAxB,UAAU,CAAC0B,eAAe,GAAG,aAAa;AAE1C,SAAS1B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}